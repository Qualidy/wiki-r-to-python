{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"R zu Python Umsteig","text":"<ul> <li> Python vs. R</li> <li> Installation</li> <li> Variablen</li> <li> Bedingter Code</li> <li> Schleifen</li> <li> Collections</li> <li> Funktionen</li> <li> Module &amp; Pakete</li> <li> Virtuelle Umgebung</li> <li> Pandas</li> <li> Plotting &amp; Dashboards</li> <li> Unit Tests</li> <li> OOP</li> <li> Lineare Regressionen</li> </ul> <p>Schneller Navigieren</p> <p>P oder , : Zur vorherigen Seite gehen (Previous)</p> <p>N oder . : Zur n\u00e4chsten Seite gehen (Next)</p> <p></p>"},{"location":"content/_venv/_venv/","title":"Virtuelle Umgebungen in Pyton","text":"<p>In Python k\u00f6nnen virtuelle Umgebungen erstellt werden, um die Abh\u00e4ngigkeiten von Projekten zu verwalten. Dies ist besonders n\u00fctzlich, wenn mehrere Projekte unterschiedliche Versionen von Bibliotheken ben\u00f6tigen. In diesem Kapitel wird gezeigt, wie virtuelle Umgebungen in Python erstellt und verwendet werden.</p>"},{"location":"content/_venv/_venv/#wie-funktioniert-eine-virtuelle-umgebung","title":"Wie funktioniert eine virtuelle Umgebung?","text":"<p>Eine virtuelle Umgebung ist ein Verzeichnis, das alle notwendigen Dateien enth\u00e4lt, um eine isolierte Umgebung f\u00fcr ein Python-Projekt zu erstellen. Dies bedeutet, dass jede virtuelle Umgebung ihre eigene Kopie von Python und Bibliotheken enth\u00e4lt. Wenn eine virtuelle Umgebung aktiviert ist, werden alle Python-Befehle auf die Kopie von Python und die Bibliotheken in der virtuellen Umgebung umgeleitet.</p>"},{"location":"content/_venv/_venv/#erstellen-einer-virtuellen-umgebung","title":"Erstellen einer virtuellen Umgebung","text":"<p>Eine virtuelle Umgebung kann mit dem Modul <code>venv</code> erstellt werden. Das Modul <code>venv</code> ist in Python 3.3 und h\u00f6her standardm\u00e4\u00dfig enthalten. Um eine virtuelle Umgebung zu erstellen, f\u00fchren Sie den folgenden Befehl aus:</p> <pre><code>python -m venv &lt;name&gt;\n</code></pre> <p>Der Befehl erstellt ein Verzeichnis mit dem Namen <code>&lt;name&gt;</code>, das die virtuelle Umgebung enth\u00e4lt. Der Name kann frei gew\u00e4hlt werden. Um die virtuelle Umgebung zu aktivieren, f\u00fchren Sie unter Windows den folgenden Befehl aus:</p> <pre><code>&lt;name&gt;\\Scripts\\activate\n</code></pre> <p>Achtung</p> <p>Unter Linux und macOS lautet der Befehl <code>source &lt;name&gt;/bin/activate</code>.</p> <p>Hinweis</p> <p>In VS Code kann die virtuelle Umgebung \u00fcber das Dropdown-Men\u00fc in der unteren rechten Ecke ausgew\u00e4hlt werden. Oftmals wird die virtuelle Umgebung automatisch erkannt.</p> <p>Um die virtuelle Umgebung zu deaktivieren, f\u00fchren Sie den folgenden Befehl aus:</p> <pre><code>deactivate\n</code></pre>"},{"location":"content/_venv/_venv/#installieren-von-bibliotheken","title":"Installieren von Bibliotheken","text":"<p>Nachdem die virtuelle Umgebung aktiviert ist, k\u00f6nnen Bibliotheken mit dem Befehl <code>pip install</code> installiert werden. Die Bibliotheken werden in der virtuellen Umgebung installiert und sind nur f\u00fcr das aktuelle Projekt verf\u00fcgbar.</p> <pre><code>pip install &lt;library&gt;\n</code></pre> <p>Wollen Sie beispielweise die Bibliothek <code>pandas</code> installieren, f\u00fchren Sie den folgenden Befehl aus:</p> <pre><code>pip install pandas\n</code></pre>"},{"location":"content/_venv/_venv/#requirements-datei","title":"Requirements-Datei","text":"<p>Um underen Kollegen oder zuk\u00fcnftigen Selbst zu zeigen, welche Bibliotheken in der virtuellen Umgebung installiert sind, kann eine Requirements-Datei erstellt werden. Die Datei enth\u00e4lt eine Liste der installierten Bibliotheken und deren Versionen. Um eine Requirements-Datei zu erstellen, f\u00fchren Sie den folgenden Befehl aus:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"content/bedingter_code/bedingter_code/","title":"Bedingter Code","text":"Video <p>Mit dem <code>if</code> Keyword und Einr\u00fcckungen kann man festlegen, dass Code nur unter bestimmten Bedingungen ausgef\u00fchrt wird.</p> <pre><code>name = input(\"Wie ist dein Name?\") # (1)!\nif 'q' in name: # (2)!\n    print(\"Wow, das ist ja ein seltener Name!\") # (3)!\nprint(f\"Auf jeden Fall ist dein Name {name}\") # (4)!\n</code></pre> <ol> <li>Der Nutzer wird nach seinem Namen gefragt. Die Eingabe wird in der Variable <code>name</code> gespeichert.</li> <li>Es wird gepr\u00fcft, ob der Buchstabe <code>'q'</code> in <code>name</code> auftaucht.</li> <li>Wenn <code>'q'</code> in <code>name</code> auftaucht, wird der einger\u00fcckte Code ausgef\u00fchrt. Hier k\u00f6nnen auch noch mehr Zeilen einger\u00fcckter Code stehen, die nur ausgef\u00fchrt werden, wenn die Bedingung erf\u00fcllt ist.</li> <li>Diese Zeile ist nicht einger\u00fcckt und wird daher auf jeden Fall wieder ausgef\u00fchrt.</li> </ol> <p>Code im Debugger ansehen</p> <p>Wenn die Bedingung, die neben dem <code>if</code> steht, wahr ist, dann werden die n\u00e4chsten Zeilen Code, die einger\u00fcckt sind ausgef\u00fchrt. Wenn die Bedingung aber falsch ist, werden die einger\u00fcckten Zeilen einfach \u00fcbersprungen.</p> Bedingung einf\u00fcgen <p>Ersetzten Sie die <code>...</code> im folgenden Code so, dass zun\u00e4chst gepr\u00fcft wird, ob die in <code>alter</code> gespeicherte Zahl kleiner als <code>18</code> ist und man dann eine Abfuhr erh\u00e4lt. Danach soll gepr\u00fcft werden, ob das <code>alter</code> gr\u00f6\u00dfer oder gleich <code>18</code> ist und man wird reingelassen:</p> <pre><code>alter = int(input(\"Wie alt bist du?\"))\n\n... alter &lt; 18:\n    print(\"Dieser Film ist nichts f\u00fcr dich!\")\n\n... alter &gt;= 18:\n    print(\"Du darfst rein.\")\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>alter = int(input(\"Wie alt bist du?\"))\n\nif alter &lt; 18:\n    print(\"Dieser Film ist nichts f\u00fcr dich!\")\n\nif alter &gt;= 18:\n    print(\"Du darfst rein\")\n</code></pre>"},{"location":"content/bedingter_code/bedingung/","title":"Was ist eine Bedingung?","text":"Video <p>Eine Bedingung ist ein Ausdruck, der schlie\u00dflich zu einem booleschen Wert <code>True</code> oder <code>False</code> ausgewertet wird. Solche Bedingungen k\u00f6nnen wir leicht verstehen, indem wir sie laut vorlesen.</p> <pre><code>a = int(input(\"Gebe eine Ganzzahl ein:\"))\n\nprint(\"a ist kleiner als 5:\")\nprint(a &lt; 5)\n\nprint(\"a ist gr\u00f6\u00dfer als 10:\")\nprint(a &gt; 10)\n\nprint(\"a ist gr\u00f6\u00dfer als 1 und kleiner oder gleich 4:\")\nprint(1 &lt; a &lt;= 4)\n\nprint(\"x in Hallo\")\nprint(\"x\" in \"Hallo\")\n\nprint(\"a in Hallo\")\nprint(\"a\" in \"Hallo\")\n</code></pre> <p>Hier ist eine Liste mit den wichtigsten Operatoren f\u00fcr uns:</p> Operator Name <code>==</code> Gleich <code>!=</code> Ungleich <code>&gt;</code> (echt) Gr\u00f6\u00dfer als <code>&lt;</code> (echt) Kleiner als <code>&gt;=</code> Gr\u00f6\u00dfer oder gleich <code>&lt;=</code> Kleiner oder gleich <code>in</code> ist enthalten Boolsche Werte voraussagen <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <pre><code>a = 3\nb = 5\n\nprint(a &gt; 5)\nprint(b &lt;= 5)\nprint(a + b &gt;= 5)\nprint(a &gt; b)\nprint(a + 2 == b)  \nprint(a)\nprint(b)\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>a = 3\nb = 5\n\nprint(a &gt; 5) # False\nprint(b &lt;= 5) # True\nprint(a + b &gt;= 5) # True\nprint(a &gt; b) # False\nprint(a + 2 == b) # True\nprint(a) # 3\nprint(b) # 5\n</code></pre> <p>Man beachte, dass <code>a</code> und <code>b</code> in diesem Code niemals ge\u00e4ndert wurden.</p> Programmausf\u00fchrung voraussagen <p>Abh\u00e4ngig von der Variablen <code>alter</code>, hat die Variable <code>preis</code> einen anderen Inhalt.</p> <p>Sagen sie nun\u00e4chst voraus, was auf der Konsole erscheint, wenn <code>alter</code> mit <code>20</code>, <code>70</code> und <code>2</code> bef\u00fcllt ist.</p> <p>Wie l\u00e4sst sich also die Bestimmung des Preises allgemein beschreiben?</p> <pre><code>preis = 3.50\nalter = ...\n\nif alter &gt;= 65:\n    preis = preis - 2\n\nif alter &lt; 7:\n    preis = 0.0\n\nprint(f\"Mit {alter} Jahren zahlst du: {preis} \u20ac.\")\n</code></pre> Tipp <p>Die Zeile <code>preis = preis - 2</code> bedeutet, dass der Wert in der Variablen <code>preis</code> um <code>2</code> reduziert wird und dieses nun als neuer Wert in <code>preis</code> gespeichert wird.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <code>alter</code> <code>preis</code> Konsolenausgabe <code>20</code> <code>3.5</code> <code>Mit 20 Jahren zahlst du: 3.5 \u20ac</code> <code>70</code> <code>1.5</code> <code>Mit 70 Jahren zahlst du: 1.5 \u20ac</code> <code>2</code> <code>0.0</code> <code>Mit 2 Jahren zahlst du: 0 \u20ac</code> <p>Der Preis ist wie folgt aufgebaut:</p> <ul> <li>Kinder bis einschlie\u00dflich 6 Jahren zahlen nichts.</li> <li>Erwachsene ab 65 Jahren zahlen den reduzierten Preis von 1,50 \u20ac.</li> <li>Alle anderen Zahlen 3,50 \u20ac.</li> </ul> Eingabe korrigieren <p>Ersetze die <code>...</code> in folgendem Programm so dass eine Eingabe von negativen Zahlen (z.B. <code>-100</code>) vom Programm korrigiert wird. Dazu soll zun\u00e4chst gepr\u00fcft werden, ob das eingegeben Alter negativ ist und wenn ja, soll dieses auf <code>0</code> gesetzt werden.</p> <pre><code>alter = int(input(\"Wie alt bist du?\"))\nif ...:\n    ...\n\nprint(f\"Du bist {alter} Jahre alt.\")\n</code></pre> Tipp <p>Um zu pr\u00fcfen ob eine Zahl <code>a</code> negativ ist, kann z.B. <code>a &lt; 0</code> verwendet werden.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>alter = int(input(\"Wie alt bist du?\"))\nif alter &lt; 0:\n    alter = 0\n\nprint(f\"Du bist {alter} Jahre alt.\")\n</code></pre> Verschachtelte <code>if</code>s <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <p>Was passiert, wenn <code>alter = 15</code> ist? </p> <p>Was passiert, wenn <code>alter = 15</code> und <code>film_genre = \"M\u00e4rchen\"</code> ist? </p> <pre><code>alter = 25\nfilm_genre = \"Horror\"\n\nif film_genre == \"Horror\":\n    print(\"Wie alt bist du denn?\")\n\n    if alter &gt;= 18:\n        print(\"Viel Spa\u00df beim Film!\")\n\n    if alter &lt; 18:\n        print(\"Das wird nichts!\")\n\nprint(\"Tsch\u00fcss!\")\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>alter = 25\nfilm_genre = \"Horror\"\n\nif film_genre == \"Horror\":\n    print(\"Wie alt bist du denn?\")\n\n    if alter &gt;= 18:\n        print(\"Viel Spa\u00df beim Film!\")\n\n    if alter &lt; 18:\n        print(\"Das wird nichts!\")\n\nprint(\"Tsch\u00fcss!\")\n</code></pre> <p>Bei der gegebenen Variablenbelegung erscheint auf der Konsole:</p> <pre><code>Wie alt bist du denn?\nViel Spa\u00df beim Film!\nTsch\u00fcss!\n</code></pre> <p>Ist <code>alter = 15</code> und <code>alter = \"Horror\"</code> erscheint:</p> <pre><code>Wie alt bist du denn?\nDas wird nichts!\nTsch\u00fcss!\n</code></pre> <p>Ist <code>alter = 15</code> und <code>alter = \"M\u00e4rchen\"</code> erscheint:</p> <pre><code>Tsch\u00fcss!\n</code></pre>"},{"location":"content/bedingter_code/bedingungen_verkn%C3%BCpfen/","title":"Bedingungen verkn\u00fcpfen","text":"Video <p>Wir k\u00f6nnen mehrere Bedingungen auch miteinander verkn\u00fcpfen.</p> Operator Beschreibung Beispiel <code>and</code> Gibt <code>True</code> zur\u00fcck, wenn alle Parameter <code>True</code> sind. <code>x &lt; 5 and y &gt; 10</code> <code>or</code> Gibt <code>True</code> zur\u00fcck, wenn eines der Parameter <code>True</code> ist. <code>x &lt; 5 or y &gt; 10</code> <code>not</code> Invertiert die Eingabe. Aus <code>True</code> wird <code>False</code> und umbekehrt. <code>not x &gt;= 6</code> Booleans direkt als Bedingung verwenden <p>Der folgende Code beschreibt, wie im Museum die Eintrittspreise berechnet werden.</p> <p>Erkl\u00e4ren Sie in deutscher Sprache, wie sich der Preis berechnet.</p> <p>Was passiert, wenn man die Variable <code>vereinsmitglied = False</code> setzt?</p> <pre><code>alter = 65\nvereinsmitglied = True\n\npreis = 6\n\nif alter &gt; 55 or alter &lt; 5:\n    preis = preis / 2\n\nif vereinsmitglied:\n    preis = 0\n\nprint(f\"Ihr Preis ist {preis}\")\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Wenn die Person \u00e4lter als 55 Jahre oder j\u00fcnger als 5 Jahre ist, wird der Preis halbiert.</p> <p>Wenn die Person Vereinsmitglied ist (also wenn die Variable vereinsmitglied auf <code>True</code> gesetzt ist), wird der Preis auf <code>0</code> gesetzt, unabh\u00e4ngig vom Alter. </p> <p>Wenn <code>vereinsmitglied</code> auf <code>False</code> gesetzt wird, hat dies zur Folge, dass die zweite Bedingung <code>if vereinsmitglied:</code> nicht erf\u00fcllt wird. Das bedeutet, dass die Person keinen kostenlosen Eintritt bekommt.</p> Verneinungen von Aussagen <p>Im \"H Club\" werden die Eintrittspreise wie folgt berechnet:</p> <pre><code>name = \"Thure\"\nmitglied = True\n\npreis = 0\n\nif not mitglied:\n    preis = 3 \n\nif not \"h\" in name and not \"H\" in name:\n    preis = preis * 2\n\nprint(f\"{name} zahlt {preis} \u20ac.\")\n</code></pre> <ul> <li> <p>Wie viel Zahlen Emmi, Henrik und Thure (der als einziger Mitglied ist).</p> </li> <li> <p>Wie wird der Preis berechnet? </p> </li> <li> <p>Wie m\u00fcsste man den Code anpassen, wenn der Club \"H&amp;M Club\" hei\u00dfen w\u00fcrde?</p> </li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> <ul> <li> <p>Emmi zahlt 6\u20ac, Henrik zahlt 3\u20ac und Thure zahlt 0\u20ac.</p> </li> <li> <p>Nichtmitglieder zahlen 3 \u20ac. Hat der Name kein \"h\" oder \"H\", verdoppelt sich der Preis.</p> </li> <li> <p>Erweitere die Bedingung: <code>if not \"h\" in name and not \"H\" in name and not \"m\" in name and not \"M\" in name:</code></p> </li> <li> <p>Alternativ: <code>if not (\"h\" in name or \"H\" in name or \"m\" in name or \"M\" in name):</code></p> </li> </ul> Preisberechnung basierend auf Alter und Mitgliedschaft <p>Schreibe einen kleinen Python-Code, der den Eintrittspreis berechnet. Es gelten folgende Regeln:</p> <ul> <li>Personen unter 18 Jahren zahlen 5 \u20ac.</li> <li>Personen ab 65 Jahren zahlen 5 \u20ac.</li> <li>Alle anderen zahlen 10 \u20ac.</li> <li>Mitglieder eines Clubs erhalten 50 % Rabatt auf den Eintrittspreis.</li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>alter = 30\nmitglied = True\n\npreis = 10\n\nif alter &lt; 18 or alter &gt;= 65:\n    preis = 5\n\nif mitglied:\n    preis = preis / 2\n\nprint(f\"Der Preis betr\u00e4gt {preis} \u20ac.\")\n</code></pre>"},{"location":"content/collections/for_loop/","title":"for-Schleife","text":"<p>H\u00e4ufig wollen wir bestimmte Operationen auf allen Elementen einer Liste durchf\u00fchren. Dies kann zwar \u00fcber eine <code>while</code>-Schleife implementiert werden, ist aber etwas  umst\u00e4ndlich und sogar fehleranf\u00e4llig. Lieber wird mit der <code>for</code>-Schleife gearbeitet, die erlaubt alle Elemente einer Liste nacheinander durchzugehen, ohne dass dabei der Index zum Zugriff auf die Elemente genutzt werden muss. </p> for-loopwhile-loop <pre><code>produkte = [\"Butter\", \"Milch\", \"Wurst\"] # (1)!\n\nfor produkt in produkte: # (2)!\n    print(f\"Heute gibt es {produkt}.\") # (3)!\n</code></pre> <ol> <li>Lege eine Liste mit Elementen an, die durchlaufen werden sollen.</li> <li>Hier wird eine Variable <code>produkt</code> angelegt und diese wird nun nacheinander mit allen Elementen der Liste <code>produkte</code> bef\u00fcllt. Zuerst gilt also <code>produkt = \"Butter\"</code> und mit diesem Wert werden die n\u00e4chsten einger\u00fcckten Zeilen durgef\u00fchrt. Danach ist <code>produkt = \"Milch\"</code> und die einger\u00fcckten Zeilen werden erneut durchgef\u00fchrt. Dies geht so lange weiter, bis alle Elemente in der Liste durchlaufen wurden. </li> <li>Der einger\u00fcckte Code ist der Schleifenrumpf. Dieser wird so oft durchlaufen, wie es Elemente in der Liste gibt.</li> </ol> <p>So w\u00fcrde die Implementierung mit einer <code>while</code>-Schleife aussehen.</p> <pre><code>produkte = [\"Butter\", \"Milch\", \"Wurst\"] # (1)!\ni = 0 # (2)!\n\nwhile i &lt; len(produkte): # (3)!\n    print(f\"Heute gibt es {produkte[i]}.\") # (4)!\n    i = i + 1 # (5)!\n</code></pre> <ol> <li>Lege eine Liste mit Elementen an, die durchlaufen werden sollen.</li> <li>Es wird eine Variable <code>i</code> angelegt, die f\u00fcr den Zugriff auf die Liste \u00fcber den Index ben\u00f6tigt wird.</li> <li>Solange <code>i</code> nicht gr\u00f6\u00dfer ist, als der gr\u00f6\u00dftm\u00f6gliche Index, soll die Schleife durchlaufen werden. <code>len(prodcukte)</code> gibt die Anzahl der Elemente in der Liste zur\u00fcck und ist hier <code>3</code>.</li> <li>Um nun auf die Elemente zuzugreifen, wird die Index-Notation <code>produkte[i]</code> verwendet.</li> <li>Abschlie\u00dfend muss der <code>i</code> vergr\u00f6\u00dfert werden, um sicher zu stellen, dass im n\u00e4chsten Schleifendurchlauf auch auf das n\u00e4chste Element zugegriffen wird.</li> </ol> <p>Konsolenausgabe:</p> <pre><code>Heute gibt es Butter\nHeute gibt es Milch\nHeute gibt es Wurst\n</code></pre> <p>Code im Debugger</p> <p> </p> for-Schleifen lesen <p>Gegeben sei der folgende Code. Sagen sie voraus, was auf der Konsole erscheinen wird: <pre><code>print(\"Meine Freunde hei\u00dfen:\")\nfor name in [\"Karl\", \"Jannik\", \"Alexa\"]:\n    print(f\"{name}, \")\nprint(\"und mein bester Freund hei\u00dft Max.\")\n</code></pre></p> L\u00f6sung <pre><code>Meine Freunde hei\u00dfen:\nKarl,\nJannik,\nAlexa,\nund mein bester Freund hei\u00dft Max.\n</code></pre> Summen bilden <p>Gegeben sei der folgende Code. Sagen sie voraus, was auf der Konsole erscheinen wird, wenn</p> <ul> <li><code>summanden = [1,2,3,4]</code></li> <li><code>summanden = [3, -3, 4, -2]</code></li> <li><code>summanden = [1]</code></li> <li><code>summanden = []</code></li> </ul> <pre><code>summanden = ...\nsumme = 0\nfor s in summanden:\n    summe = summe + s\nprint(f\"Die Summe von {summanden} ist {summe}.\")\n</code></pre> L\u00f6sung Vorraussetzung Konsolenausgabe <code>summanden = [1,2,3,4]</code> <code>Die Summe von [1,2,3,4] ist 10.</code> <code>summanden = [3, -3, 4, -2]</code> <code>Die Summe von [3, -3, 4, -2] ist 2.</code> <code>summanden = [1]</code> <code>Die Summe von [1] ist 1.</code> <code>summanden = []</code> <code>Die Summe von [0] ist 0}.</code> for-Schleife schreiben <p>Schreiben Sie mithilfe der <code>for</code>-Schleife ein Programm, dass alle Elemente einer Liste miteinander multipliziert und Diese Produkt am Ende ausgibt.</p> Tipp <p>Erstellen Sie eine Variable <code>product = 1</code>, in der Sie die L\u00f6sung speichern wollen.</p> L\u00f6sung <pre><code>factors = [2, 3, 2]\nproduct = 1\nfor f in factors:\n    product = product * f\n\nprint(f\"Das Produkt von {factors} ist {product}\") \n</code></pre> Marstransport <p>Die folgende Funktion berechnet das Marsgewicht f\u00fcr eine einzelne Variable.</p> <pre><code>gewicht = 65\nmars_faktor = 0.38\nmars_gewicht = gewicht * mars_faktor\nprint(f'Dein Marsgewicht: {mars_gewicht}')\n</code></pre> <p>a) Passe das Programm so an, dass f\u00fcr eine Liste <code>gewichte = [100, 65, 23]</code> die Berechnung durchgef\u00fchrt wird und auf der Konsole erscheint:</p> <pre><code>Dein Marsgewicht: 38.0\nDein Marsgewicht: 24.7\nDein Marsgewicht: 8.74\n</code></pre> <p>b) Erweitere das Programm, sodass zus\u00e4tzlich alle Marsgewichte in einer Liste  gespeichert und am Ende ausgegeben werden.</p> <pre><code>Dein Marsgewicht: 38.0\nDein Marsgewicht: 24.7\nDein Marsgewicht: 8.74\nMarsgewichte: [38.9, 24.7, 8.74]\n</code></pre> L\u00f6sung <p>a)</p> <pre><code>gewichte = [100, 65, 23]\nmars_faktor = 0.38\nfor gewicht in gewichte:\n    mars_gewicht = gewicht * mars_faktor\n    print(f'Dein Marsgewicht: {mars_gewicht}')\n</code></pre> <p>b)</p> <pre><code>gewichte = [100, 65, 23]\nmars_gewichte = []\nmars_faktor = 0.38\nfor gewicht in gewichte:\n    mars_gewicht = gewicht * mars_faktor\n    mars_gewichte.append(mars_gewicht)\n    print(f'Dein Marsgewicht: {mars_gewicht}')\nprint(f\"Marsgewichte: {Marsgewichte:}\")\n</code></pre> Usernamen \u00fcberpr\u00fcfen <p>In einem Onlineportal d\u00fcrfen Nutzer ihren Username frei w\u00e4hlen, jedoch gibt es bestimmte Begriffe, die nicht als Teil des Namens auftauchen d\u00fcrfen. Diese sind in der folgenden Liste verbotener W\u00f6rter notiert:</p> <pre><code>verboten = ['admin', 'super', 'user']\n</code></pre> <p>Folgende Nutzernamen w\u00e4hren hier also verboten:</p> <ul> <li>superman</li> <li>administrator</li> <li>Radminister</li> <li>H\u00e4user</li> <li>superadmin</li> <li>admin</li> </ul> <p>Schreibe ein Programm, das den Nutzer um einen Namen bitten und eine Warnmeldung gibt, wenn der Name verboten ist.</p> Tipp <pre><code>username = input('Nutzername eingeben: ')\nverboten = ['admin', 'super', 'user']\n\nfor ...:\n    if ...:\n        print(\"Nutzername nicht erlaubt!\")\n</code></pre> L\u00f6sung <pre><code>username = input('Nutzername eingeben: ')\nverboten = ['admin', 'super', 'user']\n\nfor v in verboten:\n    if v in username:\n        print(\"Nutzername nicht erlaubt!\")\n</code></pre>"},{"location":"content/collections/lists/","title":"Listen","text":"Video <p>Derzeit k\u00f6nnen wir in einer Variablen genau einen Wert speichern.</p> <p>Wir werden nun M\u00f6glichkeiten kennenlernen, wie wir in einer Variable eine gro\u00dfe Menge von Daten speichern k\u00f6nnen.</p> <p>Die wichtigste M\u00f6glichkeit zum Speichern gro\u00dfer Datenmengen in einer Variable sind Listen.</p> <p>Eine Liste kann man sich vorstellen, wie eine Variable mit mehrere Schubladen und diese Schubladen sind durchnummeriert. Die Nummerierung startet mit <code>0</code>, geht dann weiter zu <code>1</code>, weiter zu <code>2</code> usw.</p> <p>Wir k\u00f6nnen eine Liste definieren, indem wir die Elemente, die gespeichert werden sollen in eckige Klammern (<code>[...]</code>) schreiben:</p> <pre><code>trinkgeld = [70, 60, 15, 15, 0, 100, 0]\n</code></pre> <p>Um nun auf die Elemente zuzugreifen geben wir den schreiben wir nach dem Variablennamen in eckigen Klammern, welchen Eintrag wir haben m\u00f6chten.</p> <pre><code>print(trinkgeld[0]) # (1)!\n</code></pre> <ol> <li>Konsolenausgabe: <code>70</code></li> </ol> <p>Code im Debugger</p> <p> </p> <p>Andererseits k\u00f6nnen wir \u00fcber die Notation Werte \u00fcberschreiben:</p> <pre><code>trinkgeld[0] = 10 # (2)!\nprint(trinkgeld[0]) # (1)!\n</code></pre> <ol> <li>Konsolenausgabe: <code>10</code></li> <li>Schreibe <code>10</code> an die erste Stelle (Index <code>0</code>) der Liste.</li> </ol> <p>Code im Debugger</p> <p> </p> <p>Variablen</p> <p> <pre><code>my_var = 5\n\nprint(my_var) # (1)!\n\nmy_var = 6 # (2)!\n</code></pre></p> <ol> <li>Zugriff direkt \u00fcber den Namen der Variablen.</li> <li>\u00dcberschreiben der Variablen. </li> </ol> <p>Listen</p> <p> <pre><code>my_list = [5, 8, 5, 1, 0,80]\n\nprint(my_list[0]) # (1)!\n\nmy_list[0] = 10 # (2)!\n</code></pre></p> <ol> <li>Zugriff auf Element \u00fcber den Index <code>0</code>.</li> <li>\u00dcberschreiben des Elements an dem Index <code>0</code>.</li> </ol> <p>Listen niemals <code>list</code> nennen!</p> <p>Der Variablenname einer Liste (oder sonst irgendeines Objektes), darf niemals <code>list</code> hei\u00dfen.</p> <p>Dies w\u00fcrde zu einer \u00dcberschreibung des <code>list</code>-Konstruktors f\u00fchren und ggf. den Rest des Pythonprogramms zerst\u00f6ren .</p> <p><code>list</code> isthier keine Ausnahme. Hier findest du noch eine Liste aller Build-In-Functions, die man nicht als Variablennamen verwenden soll.</p>"},{"location":"content/collections/lists/#listen-in-r-und-in-python","title":"Listen in R und in Python","text":"<p>Die Funktionsweise von Listen in R und Python ist sehr \u00e4hnlich. In R werden Listen mit der Funktion <code>list()</code> erstellt, in Python mit eckigen Klammern <code>[]</code>. Ungew\u00f6hnlich in R ist jedoch, dass Listen mit dem Index <code>1</code> beginnen, w\u00e4hrend in Python der Index <code>0</code> der erste Eintrag ist.</p> Listen lesen <p>Was erscheint hier auf der Konsole?</p> <pre><code>produkte = ['Milch', 'Butter', 'K\u00e4se']\n\nprint(produkte[2])\nprint(produkte[1])\nprint(produkte[0])\n\nprodukte[1] = 'Magarine'\n\nprint(produkte[0])\nprint(produkte[1])\nprint(produkte[1+1])\n\npos = 2\nprint(produkte[pos])\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Konsolenausgabe</p> <pre><code>K\u00e4se\nButter\nMilch\nMilch\nMagarine\nK\u00e4se\nK\u00e4se\n</code></pre> Listen definieren <p>Definieren Sie eine Liste namens <code>meine_lieblinge</code> mit ihren Lieblingsfilmen.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>meine_lieblinge = ['Alles steht Kopf', 'Die Schlange im Schatten des Adlers', 'Der Pate']\n</code></pre> Listen mit Zahlen definieren <p>Definieren Sie eine Liste mit den Zaheln von <code>0</code> bis <code>8</code>. Speichern Sie diese in eine  Variable namens <code>spielfeld</code>.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>spielfeld = [0, 1, 2, 3, 4, 5, 6, 7, 8] \n</code></pre> Listen manipulieren <p>Gegeben Sei die folgende Liste:</p> <pre><code>mitarbeiter = ['Anton', 'Bernd', 'Clara', 'Dennis']\n</code></pre> <p>Tauschen Sie die <code>Bernd</code> durch eine <code>Emil</code> aus. </p> <p>Geben Sie dann jedes zweite Element der Liste aus. Die Konsolenausgabe ist also diese:</p> <pre><code>Emil\nDennis\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>mitarbeiter = ['Anton', 'Bernd', 'Clara', 'Dennis']\n\nmitarbeiter[1] = 'Emil'\n\nprint(mitarbeiter[1])\nprint(mitarbeiter[3])\n</code></pre>"},{"location":"content/collections/lists_append/","title":"Listen erweitern","text":"Video <p>Zu einer Liste k\u00f6nnen neue Elemente mit der Methode <code>append</code> hinzugef\u00fcgt werden. Das sieht dann wie folgt aus:</p> <pre><code>fragezeichen = ['Justus'] # (1)!\nfragezeichen.append('Peter') # (2)!\nfragezeichen.append('Bob')\nprint(fragezeichen)\n</code></pre> <ol> <li>Liste wird erstellt.</li> <li>Neues Element wird mit <code>append</code> hinzugef\u00fcgt.</li> </ol> <p>Code im Debugger</p> <p> </p> Listen mit Operationen bei der Definition <p>Was erscheint hier auf der Konsole?</p> <pre><code>list_0 = []\nlist_0.append(15)\nlist_0.append(3 * 2)\nprint(list_0)\n\na = 5\nb = 15\nlist_1 = [1 + 1, 1 / 2, a, a + b]\nlist_1.append(a * b + 7)\nlist_1.append(list_1[0])\nprint(list_1)\n</code></pre> Tipp <p><code>list_0 = []</code> beschreibt eine leere Liste, ohne Elemente.</p> <p>Berechne zun\u00e4chst den Inhalt der Elemente in <code>list_1</code>. Die Elemente sind durch Kommas (<code>,</code>) getrennt.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Konsolenausgabe</p> <pre><code>[15, 6]\n[2, 0.5, 5, 20, 15, 82, 2]\n</code></pre> Listen fortlaufend erweitern <p>Schreibe ein Programm, dass den Nutzer wiederholt nach einer Zahl fragt. Das Programm hat intern eine Liste namens <code>eingaben</code>, in der alle bisher eingegebenen Zahlen gespeichert werden. Es soll vor der Eingabe immer die bisher gespeicherten Elemente eingeblendet werden.</p> <p>Die Konsolenausgabe soll also etwa so aussehen:</p> <pre><code>Bisherige Zahlen: []\nGib eine Zahl ein: 3\nBisherige Zahlen: [3]\nGib eine Zahl ein: 10\nBisherige Zahlen: [3, 10]\nGib eine Zahl ein: -20\nBisherige Zahlen: [3, 10, -20]\nGib eine Zahl ein: \n</code></pre> Tipp Tipps ohne CodeCodevorlage mit Schleife <ul> <li>Lege dir zun\u00e4chst eine Variable <code>eingaben</code> an, in der du die Eingaben sammeln wirst. Zun\u00e4chst ist <code>eingabe</code> eine leere Liste.</li> <li>Um eine Schleife dauerhaft f\u00fcr immer zu durchlaufen kann als Bedingung <code>True</code> genutzt werden.</li> <li>Mit <code>int(input(\"Gib eine Zahl ein: \"))</code> kann man den Nutzer um eine Zahl bitten.</li> <li>F\u00fcge neue Elemente in eine Liste mit <code>append</code> ein.</li> </ul> <pre><code>eingaben = ...\nwhile ...: \n    print(f\"Bisherige Zahlen: {eingaben}\")\n    eingabe = ...\n    eingaben. ...\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>eingaben = []\nwhile True:\n    print(f\"Bisherige Zahlen: {eingaben}\")\n    eingabe = int(input(\"Gib eine Zahl ein: \"))\n    eingaben.append(eingabe)\n</code></pre> Speicher manipulieren <p>Schreibe ein Programm, dass in einer Liste die Zahlen von <code>0</code> bis <code>8</code> gespeichert hat. Ziel dieses Programms ist es nun die gespeicherten Zahlen durch Nutzereingaben zu manipulieren.</p> <p>Das Programm fragt dann den Nutzer nach einer Zahl zwischen <code>0</code> und <code>8</code>. Es speichert diese Eingabe in der Variablen namens <code>pos</code>.</p> <p>Das Programm fragt den Nutzer dann, nach der zu speichernden Text. Dieser Text wird nun in der Liste an der Postion <code>pos</code> gespeichert und der bisherige Wert wird \u00fcberschrieben.</p> <p>Erweitern Sie das Programm so, dass der Nutzer immer wieder abgefragt wird.</p> <p>Die Konsolenausgabe sollte dann wie folgt aussehen:</p> <pre><code>Bisheriger Speicher: [0, 1, 2, 3, 4, 5, 6, 7, 8]\nAn welcher Stelle (0-8) soll gespeichert werden? 1 \nWas soll gespeichert werden? Anton\n\nBisheriger Speicher: [0, 'Anton', 2, 3, 4, 5, 6, 7, 8]\nAn welcher Stelle (0-8) soll gespeichert werden? 5 \nWas soll gespeichert werden? Britta\n\nBisheriger Speicher: [0, 'Anton', 2, 3, 4, 'Britta', 6, 7, 8]\nAn welcher Stelle (0-8) soll gespeichert werden? 1 \nWas soll gespeichert werden? Carlo\n\nBisheriger Speicher: [0, 'Carlo', 2, 3, 4, 'Britta', 6, 7, 8]\nAn welcher Stelle (0-8) soll gespeichert werden? \n</code></pre> Tipp Tipps ohne CodeCodevorlage mit Schleife <ul> <li>Lege dir zun\u00e4chst eine Variable <code>speicher</code> an mit den Zahlen von <code>0</code> bis <code>8</code> (siehe \u00dcbungsaufgabe Listen definieren mit Zahlen).</li> <li>Um eine Schleife dauerhaft f\u00fcr immer zu durchlaufen kann als Bedingung <code>True</code> genutzt werden.</li> <li>Nutzerabfragen k\u00f6nnen mit der <code>input</code> Funktion eingeholt werden.</li> <li>Nutzer eingaben liefern immer nur Strings zur\u00fcck. Wenn sie als Integer gebraucht werden, nutze <code>int(input(...))</code>.</li> <li>Der Postion, die manipuliert werden muss, steht in <code>pos</code>.</li> </ul> <pre><code>speicher = ...\nwhile ...:\n    print(f\"Bisheriger Speicher: { speicher }\")\n    pos = ...\n    eingabe = ...\n    speicher[...] = ...\n    print()\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>speicher = [0, 1, 2, 3, 4, 5, 6, 7, 8]\nwhile True:\n    print(f\"Bisheriger Speicher: { speicher }\")\n    pos = int(input('An welcher Stelle (0-8) soll gespeichert werden? '))\n    eingabe = input('Was soll gespeichert werden? ')\n    speicher[pos] = eingabe\n    print()\n</code></pre>"},{"location":"content/collections/weitere_datenstrukturen/","title":"Set","text":"Video <p>Sets (deutsch: Mengen ) sind listen sehr \u00e4hnlich, sie haben aber zwei f\u00fcr uns wichtige unterschiede:</p> <ul> <li>Jedes Element in der Liste darf nur ein mal auftauchen.</li> <li>Jedes Mengen haben keine Ordnung, das hei\u00dft, wir k\u00f6nnen nicht auf das <code>x</code>-te Element zugreifen.</li> <li>Sets werden mit geschweifen Klammern definiert, statt mit eckigen.</li> </ul> <p>Ein Anwendungsfall f\u00fcr Sets ist das finden einmaliger Elementen in Listen.</p> <pre><code>my_list = [1, 1, 2, 1, 2, 3] # (1)!\nmy_set = set(my_list) # (2)!\nprint(my_set) # (3)!\n</code></pre> <ol> <li>Liste <code>my_list</code> wird erstellt. Manche Elemente sind doppelt und dreifach vorhanden.</li> <li>Aus der Liste wird ein Set (Menge) gemacht.</li> <li>In der Liste sind nun alle Elemente einmalig.</li> </ol> <p>Code im Debugger</p> <p> </p>"},{"location":"content/collections/weitere_datenstrukturen/#tupel","title":"Tupel","text":"Video <p>Tupel sind fast identisch zu listen. Hier sind die f\u00fcr uns entscheidenden Unterschiede:</p> <ul> <li>Tupel werden mit runden <code>()</code> statt mit eckigen Klammern <code>[]</code> definiert.</li> <li>Tupel lassen sich im Nachhinein nicht mehr \u00e4ndern.</li> </ul> <pre><code>my_tuple = (1, 2, 3) # (1)!\nprint(f\"Erstes Element: {my_tuple[0]}\") # (2)!\n\nmy_tuple[0] = 4 # (3)! \n</code></pre> <ol> <li>Ein Tupel wird hier definiert.</li> <li>Der Zugriff auf die Elemente des Tupels sieht genau so aus, wie bei Listen.</li> <li>Hier kommt es bei der Ausf\u00fchrung zu einem Fehler, denn der Inhalt eines Tupels kann im Nachhinein nicht mehr ge\u00e4ndert werden. Auch Methoden wie <code>append</code> exitieren nicht bei Tupeln.</li> </ol>"},{"location":"content/collections/weitere_datenstrukturen/#dictionary","title":"Dictionary","text":"Video <p>Dictionaries sind eine h\u00e4ufig verwendete Datenstruktur, die man als eine Liste mit speziellen Zugriffsm\u00f6glichkeiten betrachten kann. Bei einer Liste greift man auf die Werte immer \u00fcber Zahlen zu. Bei einem Dictionary werden auf die Werte (Values) \u00fcber  vorher definierte Schl\u00fcssel (Keys) zugegriffen.</p> <p>Wir k\u00f6nnen uns also vorstellen, dass die Schubladen in unseren Schr\u00e4nken nicht durchnummeriert sind, sondern eine Aufschrift haben.</p> <p>Listen</p> <p> <pre><code>my_list = [5, 8, 5, 1, 0,80]\n\nprint(my_list[0]) # (1)!\n\nmy_list[0] = 10 # (2)!\n</code></pre></p> <ol> <li>Zugriff auf Element \u00fcber den Index <code>0</code>.</li> <li>\u00dcberschreiben des Elements an dem Index <code>0</code>.</li> </ol> <p>Dictionaries</p> <p> <pre><code>my_dict = {\n    'Hunde': 5,\n    'Katzen': 8,\n    'H\u00fchner': 5,\n    'H\u00e4hne': 1,\n    'Schweine': 0,\n    'K\u00fche': 80\n}\n\nprint(my_dict['Hunde']) # (1)!\n\nmy_dict['Hunde'] = 6 # (2)!\n</code></pre></p> <ol> <li>\u00dcber den Schl\u00fcssel <code>Hunde</code> wird auf das Value <code>5</code> zugegriffen.</li> <li>Ein neuer Value <code>6</code> wird beim Schl\u00fcssel <code>Hunde</code> gespeichert. </li> </ol>"},{"location":"content/functions/functions/","title":"Funktionen definieren","text":"Video <p>Bisher sind alle unsere Codebeispiel so geschrieben, dass dieser einmalig ausgef\u00fchrt  wird und dann nicht mehr gebraucht wird. Das ist normalerweise nicht der Fall. Normalerweise werden Codeabschnitte immer wieder und in verschiedenen Kontexten aufgerufen. Zum Beispiel wollen wir Code bereitstellen, um den BMI einer Person zu berechnen. Den Code m\u00f6chte man einerseits f\u00fcr beliebige Personen ausf\u00fchren und andererseits an verschiedenen Stellen (z.B. bei verschiedenen Anzeigen in einer App).</p> <p>Die wichtigste M\u00f6glichkeit zur Strukturierung des Codes sind Funktionen bzw. Methoden.</p> <p>In Python ist eine Funktion eine selbstst\u00e4ndige, wiederverwendbare Codeeinheit, die dazu dient, eine bestimmte Aufgabe zu erledigen. Funktionen k\u00f6nnen Parameter akzeptieren,  Operationen durchf\u00fchren und einen k\u00f6nnen R\u00fcckgabewert liefern.</p> <p>Beliebte Metaphern, um sie Funktionen vorzustellen sind:</p> <ul> <li>Eine Funktion, ist eine Maschine, in die wir Argumente stopfen, damit sie diese verarbeitet und uns Ergebnisse liefert.</li> <li>Eine Funktion ist wie ein Rezept. Es erwartet bestimmte Zutaten und wenn wir der Anleitung folgen, erhalten wir eine raffinierte Mahlzeit.</li> </ul> <pre><code>graph TD;\n    A([Parameter]) --&gt; B[Funktion] --&gt; C([R\u00fcckgabewert])\n    A1([Zutaten]) --&gt; B1[Rezept] --&gt; C1([Mahlzeit])\n    A2([Rohstoffe]) --&gt; B2[Maschine] --&gt; C2([Produkt])</code></pre> Ein alter Schuh <p>Wir haben bereits an vielen Stellen Funktionen genutzt, die in Python eingebaut sind. Welche sind das?</p> Tipp <ul> <li>Wie wurden Inhalte auf der Konsole ausgegeben?</li> <li>Wie konnten Nutzereingaben vorgenommen werden?</li> </ul> L\u00f6sung <p>Wir haben bereits die in Python eingebauten Funktionen <code>print()</code> und <code>input()</code> genutzt. Auch <code>int()</code> und <code>float()</code> sind Funktionen.</p> <p>Im folgenden Code wird unsere erste eigene Funktion <code>hoch()</code> definiert und diese dann drei mal aufgerufen wird:</p> <pre><code>def hoch(): # (1)!\n    print(\"Er lebe...\") # (2)!\n    print(\"HOCH!\")\n\nhoch() # (3)!\nhoch() # (4)!\nhoch() # (5)!\n</code></pre> <ol> <li>Die Funktion wird it dem Schl\u00fcsselwort <code>def</code> definiert. Wir geben ihr den Namen <code>hoch</code>. Da sie keine Parameter hat schreiben wir hier einfach runde Klammern <code>()</code> und danach einen <code>:</code> (so wie beim <code>if</code>).Diese Erste Zeile einer Funktion wird Funktionskopf genannt.</li> <li>Die nun einger\u00fcckten Zeilen sind der Funktionsrumpf oder Funktionsk\u00f6rper. Diese werden nur durchgef\u00fchrt, wenn die Funktion aufgerufen wird.</li> <li>Wir f\u00fchren in dieser Zeile die Funktion aus. Dazu schreiben wir den Funktionsnamen auf, gefolgt von runden Klammern.</li> <li>Wir f\u00fchren die Funktion erneut aus...</li> <li>Und noch ein drittes mal\ud83e\udd73</li> </ol> <p>Code im Debugger</p> <p> </p> Seid gegr\u00fc\u00dft! <p>Gegeben sei der folgende Code. Beschreiben Sie, auf der Konsole erscheint, wenn dieser durchgef\u00fchrt wird:</p> <pre><code>def gru\u00df_nord():\n    print('Moin')\n\ndef gru\u00df_s\u00fcd():\n    print('Gr\u00fc\u00df Gott')\n\ngru\u00df_nord()\ngru\u00df_s\u00fcd()\ngru\u00df_s\u00fcd()\ngru\u00df_nord()\n</code></pre> <p>Wie m\u00fcsste man den Code anpassen, damit alle norddeutschen Gr\u00fc\u00dfe <code>Moin moin!</code> sind? </p> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Auf der Konsole erscheint: <pre><code>Moin\nGr\u00fc\u00df Gott\nGr\u00fc\u00df Gott\nMoin\n</code></pre></p> <p>Zeile 2 muss wie folgt ge\u00e4ndert werden, f\u00fcr einen ver\u00e4nderten Gru\u00df:</p> <pre><code>def gru\u00df_nord():\n    print('Moin moin!')\n</code></pre> Eigene Funktion schreiben <p>Erstellen Sie eine Funktion <code>countdown</code>, die auf der Konsole die Zahlen von <code>10</code> bis <code>0</code> ausgibt.</p> <p>Bonus \ud83d\ude80 Verwenden Sie eine <code>while</code>-Schleife in ihrer implementierung.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def countdown():\n    print(10)\n    print(9)\n    print(8)\n    print(7)\n    print(6)\n    print(5)\n    print(4)\n    print(3)\n    print(2)\n    print(1)\n    print(0)\n\ncountdown()\n</code></pre> <p>L\u00f6sung mit <code>while</code>:</p> <pre><code>def countdown():\n    counter = 10\n    while counter &gt; -1:\n        print(counter)\n        counter = counter - 1\n\ncountdown()\n</code></pre>"},{"location":"content/functions/functions_with_parameters/","title":"Funktionen mit Parametern","text":"Video <p>\u00dcber Parameter k\u00f6nnen wir daf\u00fcr sorgen, dass Funktionen nicht immer exakt das Gleiche tun, sondern, eben abh\u00e4ngig von  den \u00fcbergebenen Parametern, in ihren Ergebnissen variieren, obwohl die Rechenvorschriften gleich sind.</p> <p>Im Bild gesprochen: Ein Rezept besteht einerseits aus einer Liste von Zubereitungsschritten (Funktionsk\u00f6rper) aber auch aus einer Auflistung der Zutaten (Parameter). Nun kann man zwei verschiedene Kuchen mit demselben Rezept  backen, indem man die Zutaten variiert. So macht es z.B. einen Unterschied welche konkrete Apfelsorte man in einem Apfelkuchen verwendet.</p> <p>Definieren wir Parameter in einer Funktion, so m\u00fcssen wir diese beim Funktionsaufruf mit Klammern angeben:</p> <pre><code>def print_greeting(name, age): # (1)!\n    print(f\"Hallo {name}!\") # (2)!\n    if age &gt; 65: # (3)!\n        print(f\"Geht es?\") # (4)! \n\nprint_greeting(\"J\u00f6rg\", 68) # (5)!\nprint_greeting(\"Kevin\", 20) # (6)!\n</code></pre> <ol> <li>Bei der Funktionsdefinition werden alle Parameter mit <code>,</code> getrennt in die runden Klammern geschrieben.</li> <li>Der erste \u00fcbergebene Parameter wird hier in der Konsolenausgabe verwendet.</li> <li>Der zweite \u00fcbergebene Parameter wird hier in der Bedingung benutzt.</li> <li>Auch diese zwei Mal einger\u00fcckte Zeile geh\u00f6rt noch zum Funktionsrumpf.</li> <li>Die Funktion wird hier aufgerufen. Die Argumente sind <code>J\u00f6rg</code> und <code>68</code>, welche f\u00fcr die Paramter <code>name</code> und <code>age</code> eingesetzt werden.</li> <li>Die Funktion wird hier erneut aufgerufen, aber mit anderen Argumenten. Dies f\u00fchrt zu anderen Konsolenausgaben als bei der ersten Durchf\u00fchrung. </li> </ol> <pre><code>graph TD;\n    P1([\"age\"]) --&gt; F[print_greeting]\n    P2([\"name\"]) --&gt; F</code></pre> <p>Code im Debugger</p> <p> </p> Eigene Funktion mit Parameter schreiben <p>Erstellen Sie eine Funktion <code>countdown_from(n)</code>, die auf der Konsole die Zahlen von <code>n</code> bis <code>0</code> ausgibt.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def countdown_from(n):\n    counter = n\n    while counter &gt;= 0:\n        print(counter)\n        counter = counter - 1\n\ncountdown_from(7)\n</code></pre>"},{"location":"content/functions/functions_with_returns/","title":"R\u00fcckgabewerte","text":"Video <p>Nun ist noch wichtig zu erw\u00e4hnen, dass Funktionen nicht nur verarbeiten, sondern auch ein Ergebnis am Ende ihrer Durchf\u00fchrung zur\u00fcckgeben k\u00f6nnen. Der Wert der zur\u00fcckgegeben werden soll steht in einer Zeile mit einem vorangehenden <code>return</code>.</p> <pre><code>def quadrat(zahl): # (1)!\n    return zahl * zahl # (2)!\n\nx = 4 # (3)!\nq = quadrat(x) # (4)!\n\nprint(f\"{x}\u00b2 = {q}\") # (5)!\n</code></pre> <ol> <li>Beim Funktionskopf sagen wir, dass es einen Paramter gibt. Dass es eine R\u00fcckgabe geben wird, l\u00e4sst sich hier nicht erkennen.</li> <li>Der Parameter <code>zahl</code> wird mit sich selbst multipliziert und das Ergebnis dann zur\u00fcckgegeben, da ein <code>return</code> am anfang der einger\u00fcckten Zeile steht. </li> <li>Wir speichern in der Variablen <code>x</code> das Argument.</li> <li>Wir \u00fcbergeben <code>x</code> an die Funktion und speichern die R\u00fcckgabe in der Variablen <code>q</code>.</li> <li>Wir geben die Ergebnisse fein s\u00e4uberlich auf der Konsole aus.</li> </ol> <pre><code>graph TD;\n    P1([zahl]) --&gt; F[quadrat] --&gt; R([Ergebnis])</code></pre> <p>Code im Debugger</p> <p> </p> Eigene Funktion mit R\u00fcckgabe schreiben <p>Schreibe eine Funktion <code>alle_gleich(a, b, c)</code>, die drei Parameter annimmt und <code>True</code> zur\u00fcckgibt, wenn alle gleich sind und <code>False</code>, wenn nicht.</p> <pre><code>print(alle_gleich(1, 1, 1)) # True\nprint(alle_gleich(3, 1 + 1 + 1, 5 - 2)) # True\nprint(alle_gleich(1, 1, 2)) # False\nprint(alle_gleich(3, 2, 1)) # False\n</code></pre> Tipp <p>Mit <code>a == b</code> k\u00f6nnen wir pr\u00fcfen, ob zwei Elemente gleich sind.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def alle_gleich(a, b, c):\n    return a == b == c\n\nprint(alle_gleich(1, 1, 1)) # True\nprint(alle_gleich(3, 1 + 1 + 1, 5 - 2)) # True\nprint(alle_gleich(1, 1, 2)) # False\nprint(alle_gleich(3, 2, 1)) # False\n</code></pre> Komplexe Funktion lesen <p>Was folgende Programm berechnet einen Preis.</p> <p>Was erscheint hier auf der Konsole, wenn das Programm ausgef\u00fchrt wird?</p> <p>Erkl\u00e4ren Sie, wie sich der Preis berechnet.</p> <pre><code>def berechne_rabbatierten_preis(preis, wochentag, alter):\n    rabatt = 0\n\n    if wochentag == \"Sonntag\" or wochentag == \"Samstag\":\n        rabatt = rabatt + 0.25\n\n    if alter &gt; 65 or alter &lt; 6:\n        rabatt = rabatt + 0.5\n\n    return preis * (1 - rabatt)\n\n\nbasis_preis = 10\nheute = \"Montag\"\nalter_kunde = 70\n\nend_preis = berechne_rabbatierten_preis(basis_preis, heute, alter_kunde)\nprint(end_preis)\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Am Wochenende gibt es einen Rabatt von 25% und f\u00fcr Kinder bis einschlie\u00dflich f\u00fcnf Jahren und Erwachsene ab 66 Jahren einen Rabatt zus\u00e4tzlichen Rabatt von 50%.</p> <p>Konsolenausgabe:</p> <pre><code>5.0\n</code></pre> Erstellung eines Einkaufsladens <p>Erstelle ein Programm, welches einen online Einkaufladen in der Konsole abbildet.</p> <ul> <li>Der Einkaufsladen soll mindestens 5 Produkte anbieten (am Besten ein Dictionary)<ul> <li>Preis</li> <li>Name</li> <li>Kategorie</li> <li>Menge</li> <li>Einheit</li> </ul> </li> <li>Der Benutzer soll die M\u00f6glichkeit haben, Produkte in den Warenkorb zu legen (Liste)</li> <li>Der Benutzer soll die M\u00f6glichkeit haben, den Warenkorb einzusehen</li> <li>Der Benutzer soll die M\u00f6glichkeit haben, den Warenkorb zu leeren</li> <li>Der Benutzer soll die M\u00f6glichkeit haben, den Warenkorb zu kaufen</li> <li>Der Benutzer soll die M\u00f6glichkeit haben, den Einkaufsladen zu verlassen</li> </ul> L\u00f6sung <pre><code>Siehe Live Coding\n</code></pre>"},{"location":"content/installation/installation/","title":"Installation","text":"Video <p>Um mit dem Programmieren loslegen zu k\u00f6nnen m\u00fcssen wir zun\u00e4chst Python und eine Entwicklungsumgebung installieren:</p> <ul> <li> <p> Python</p> <p>Um Pythonprogramme schreiben und ausf\u00fchren zu k\u00f6nnen ben\u00f6tigen Sie das Programm Python auf dem Rechner. Dann k\u00f6nnen wir .py-Dateien schreiben und ausf\u00fchren.</p> <p>Installiere Python \u00fcber Microsoft Store (1) oder python.org</p> <ol> <li>Suche nach \"Store\" in der Suchleiste, um den Microsoft Store auf deinem Rechner zu finden. Hier kannst du nach \"Python 3.12\" suchen und es installieren.</li> </ol> </li> <li> <p>Entwicklungsumgebung</p> <p>Um bequem Pythonprogramme zu schreiben Nutzen wir eine Entwicklungsumgebung. (1)</p> <ol> <li>Alle hier vorgeschlagenen Entwicklungsumgebungen sind gleichwertig. Wir werden hier mit Visual Studio Code arbeiten.</li> </ol>  Visual Studio Code PyCharm Community Edition <p>Microsoft Store (1) oder code.visualstudio.com</p> <ol> <li>Suche nach \"Store\" in der Suchleiste, um den Microsoft Store auf deinem Rechner zu finden. Hier kannst du nach \"vscode\" suchen und es installieren.</li> </ol> <p>Starte Visual Studio Code und installiere dann die Erweiterung \"Python\". (1)</p> <ol> <li></li> </ol> <p>jetbrains.com (1)</p> <ol> <li>Nutze den unteren Link zum Download der kostenfreien Community Edition (schwarz hinterlegt). Der obere Link ist eine 30-Tage-Testversion der Professional Edition.</li> </ol> </li> </ul> Dein erstes Programm Video <p> </p> <ul> <li>Erstelle einen Leeren Ordner \"python-schulung\".</li> <li>Starte Visual Studio Code.</li> <li>Gehe auf \"File\" &gt; \"Open Folder\" und w\u00e4hle den von dir erstellten Ordner aus. (1)</li> <li>Best\u00e4tige, dass du dem Projekt vertraust. (5)</li> <li>Erstelle eine neue Python-Datei namens \"hallo.py\", indem du auf das  neben dem Ordnernamen klickst. (2)</li> <li>Schreibe <code>print(\"Hallo Welt\")</code> in die Datei.</li> <li>Aktiviere das automtische Speichern, indem du auf \"File\" &gt; \"Auto Save\" klickst. (3)</li> <li>Klicke auf das die -Taste oben rechts, um die Datei auszuf\u00fchren. (4)</li> <li>Ein Terminal \u00f6ffnen sich unten und auf dieser erscheint die Ausgabe <code>Hallo Welt</code>. \ud83c\udf89\ud83c\udf89\ud83c\udf89 </li> </ul> <p> </p> <ol> <li></li> <li>Das Symbol taucht erst auf, wenn man mit der Maus dar\u00fcber ist.\ud83d\ude44</li> <li></li> <li></li> <li></li> </ol> <p>Strukturiert bleiben</p> <p>Im folgenden werden Sie viele .py-Dateien erstellen. Sortieren sie diese mit Hilfe von Unterordnern, um nicht die \u00dcbersicht zu verlieren. So k\u00f6nnen Sie z.B. f\u00fcr jedes Seite hier im Browser einen eigenen Unterordner, mit dem Namen des Abschnitts.</p>"},{"location":"content/ki/umgang/","title":"Umgang mit Sprachmodellen","text":"<p>Mit der Ver\u00f6ffentlichung Large Language Model ChatGPT ist eine neue \u00c4re des Programmierens und Programmieren Lernens angebrochen.</p> <p>Textgenerierende Sprachmodelle k\u00f6nnen eine riesige Hilfe im Arbeitsalltag darstellen, sowohl f\u00fcr Anf\u00e4nger, als auch f\u00fcr  fortgeschrittene Entwickler.</p> <p>Man sollte jedoch wissen, wo die St\u00e4rken der Modelle wirklich liegen und welche Gefahren sie bergen.</p>"},{"location":"content/ki/umgang/#gefahren","title":"Gefahren","text":"<ul> <li>Teile den Modellen keine sensiblen Daten mit. Denn diese gehen in das Modell ein und k\u00f6nnten von der KI-Firma genutzt werden oder durch geschickte Fragen von anderen Nutzern dem Modell wieder entlockt werden.</li> <li>Sprachmodelle l\u00fcgen oft, wenn sie keine Antwort wissen.</li> <li>Sprachmodelle lassen sich leicht dazu zu \u00fcberreden zu l\u00fcgen, nur um dem Nutzer zuzustimmen.</li> <li>Sprachmodelle machen Fehler.</li> <li>Sprachmodelle werden schlechter. Das kann man teilweise schon ein einem einzigen l\u00e4ngeren Gespr\u00e4ch beobachten. Aufgaben, die es zu Beginn noch perfekt durchf\u00fchren konnte, k\u00f6nnen sp\u00e4ter Fehler aufweisen.</li> </ul>"},{"location":"content/ki/umgang/#gute-anwendungsfalle","title":"Gute Anwendungsf\u00e4lle","text":"<ul> <li>Funktion und Bibliotheken finden, die einem das Leben vereinfachen.</li> <li>Fehler im Code finden.</li> <li>Fehlermeldungen verstehen.</li> </ul>"},{"location":"content/ki/umgang/#tipps-bei-der-nutzung","title":"Tipps bei der Nutzung","text":"<ul> <li>Beschreibe deine Anforderungen genau.</li> <li>Fange mit einer einfachen Variante deines Problems an.</li> <li>Tausche regelm\u00e4\u00dfig die \"Mach das f\u00fcr mich\"-Mentalit\u00e4t gegen eine \"Ich will mit Beispielen verstehen\"-Mentalit\u00e4t aus.</li> <li>Unterst\u00fctze, indem du selbst nach Fehlerquellen suchst.</li> <li>Frag gerne nach, ob es noch andere oder bessere L\u00f6sungswege gibt. Oft windet das Modell welche.</li> </ul> Lasst uns forschen <p>Lade die folgende Datei mit Verkaufszahlen herunter (das Passwort erh\u00e4lst du vom Trainer).</p> <p>Wir wollen nun ein Sprachmodell nutzen, um mit ihm diesen Datensatz zu erforschen.</p> <p>Dokumente herunterladen</p>"},{"location":"content/loops/loops/","title":"Codewiederholung","text":"<p># Codewiederholung</p> Video <p> </p> <p>Mit den <code>if</code>-Bl\u00f6cken haben wir kennengelernt, wie man einen Codeblock nur unter bestimmten Bedingungen durchf\u00fchrt.</p> <p>Wir wollen nun die <code>while</code>-Bl\u00f6cke anschauen. Diese sind so \u00e4hnlich wie <code>if</code>-Bl\u00f6cke, den auch sie pr\u00fcfen eine Bedingung und f\u00fchren den einger\u00fcckten Code nur aus, wenn die Bedinung <code>True</code> ist. ABER: Bei <code>while</code> wird nach jeder Durchf\u00fchrung des einger\u00fcckten Codes, ob die Bedingung immernoch erf\u00fcllt ist! Und wenn ja, dann wird der einger\u00fcckte Codeblock NOCH MAL durchgef\u00fchrt. Und das immerwieder!</p> <pre><code>zahl = 1 # (1)!\nwhile zahl &lt; 100:  # (2)!\n    print(zahl)  # (3)!\n    zahl = zahl * 2  # (4)!\nprint(f'Finaler Wert: {zahl}.') # (5)!\n</code></pre> <ol> <li>Die Variable <code>zahl</code> wird mit dem Wert <code>1</code> angelegt.</li> <li>Es wird gepr\u00fcft, ob der Wert in <code>zahl</code> kleiner als <code>100</code> ist. Wenn ja, werden die n\u00e4chsten beiden Zeilen ausgef\u00fchrt. Wenn nein, so wird direkt zu Zeile 5 gesprungen.</li> <li>Auf der Konsole wird der aktuelle Wert von <code>zahl</code> ausgegeben.</li> <li>Der Wert von <code>zahl</code> wird verdopplt und dies in <code>zahl</code> gespeichert.    Achtung: Danach geht es in Zeile 2 weiter!</li> <li>Abschlie\u00dfend wird der finale Wert von <code>zahl</code> ausgegeben.</li> </ol> <pre><code>stateDiagram-v2\n    classDef yourState font-style:italic,font-weight:bold,fill:white\n\n    B:Bedingung \u00fcberpr\u00fcfen\n    I:Code *im* einger\u00fcckten&lt;br/&gt;Block ausf\u00fchren\n    F:Code *nach* einger\u00fccktem&lt;br/&gt;Block ausf\u00fchren\n    [*] --&gt; B:::yourState\n    B --&gt; I : True\n    I --&gt; B : Springe zur\u00fcck\n    B --&gt; F : False</code></pre> <p>Code im Debugger</p> <p> </p> <p>Endlosschleifen abbrechen</p> <p>Sollten Sie in eine Endlosschleife geraten, k\u00f6nnen Sie ins Terminal klicken und die Ausf\u00fchrung mit Ctrl + C abbrechen.</p> Schleifen lesen <p>Schau dir den folgenden Code an und vollziehe nach, was passiert, wenn dieser ausgef\u00fchrt wird.</p> <p>Wie oft wird der Rumpf <code>while</code>-Schleife durchlaufen?</p> <p>Wie oft wird die Bedingung gepr\u00fcft?</p> <p>Was erscheint auf der Konsole?</p> <p>Welchen Wert hat <code>a</code> am Ende des Programms?</p> <pre><code>a = 10\nwhile a &gt; 0:\n    print(a)\n    a = a - 3\n</code></pre> <p>Beantworten Sie alle Fragen noch mal aber nun sind die Zeilen 3 und 4 vertauscht!</p> <pre><code>a = 10\nwhile a &gt; 0:\n    a = a - 3\n    print(a)\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Die Schleiferumpf wird insgesamt 3 Mal durchlaufen.</p> <p>Die Bedingung wird 4 Mal gepr\u00fcft.</p> <p>Auf der Konsole erscheint</p> <pre><code>10\n7\n4\n1\n</code></pre> <p><code>a</code> hat am Ende des Programms den Wert <code>-2</code></p> <p>Wenn man die Zeilen 3 und 4 vertauscht \u00e4ndert sich nur die Konsolenausgabe. Alles andere bleibt gleich.</p> <pre><code>7\n4\n1\n-2\n</code></pre> Variable Durchlaufzahl <p>Ersetzen Sie die <code>...</code> mit den verschiedenen Operatoren <code>+</code>, <code>-</code>, <code>*</code> und <code>/</code>.</p> <p>Was kannst du beobachten? Wie oft wird die Schleife den Rumpf durchlaufen?</p> <p>Ersetze in der letzten Zeile die <code>...</code>, sodass auf der Konsole ausgegeben wird <code>Die Schleife wurde x-Mal durchlaufen</code>,  wobei <code>x</code> durch die richtige Zahl ersetzt wird.</p> <pre><code>z = 10\ncounter = 0\nwhile z &gt; 0 and z &lt; 20:\n    print(z)\n    z = z ... 2\n    counter = counter + 1\n\nprint(...)\n</code></pre> Tipp <p>Was tut die Variable <code>counter</code>?</p> <p>Manche Schleifen enden nie...</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <p>Die Variable <code>counter</code> z\u00e4hlt mit, wie oft der Schleifenrumpf durchlaufen wurde.</p> <p>die letzte Zeile lautet:</p> <pre><code>print(f\"Die Schleife wurde {counter}-Mal durchlaufen\"\n</code></pre> <code>+</code>:<code>-</code>:<code>*</code>:<code>/</code>: <pre><code>10\n12\n14\n16\n18\nDie Schleife wurde 5-Mal durchlaufen.\n</code></pre> <pre><code>10\n8\n6\n4\n2\nDie Schleife wurde 5-Mal durchlaufen.\n</code></pre> <pre><code>10\nDie Schleife wurde 1-Mal durchlaufen.\n</code></pre> <pre><code>10\n5.0\n2.5\n1.25\n0.625\n0.3125\n0.15625\n0.078125\n0.0390625\n0.01953125\n0.009765625\n0.0048828125\n0.00244140625\n0.001220703125\n0.0006103515625\n0.00030517578125\n0.000152587890625\n...\n5e-323\n2.5e-323\n1e-323\n5e-324\nDie Schleife wurde 1078-mal durchlaufen.\n</code></pre> <p>Die Schleife bricht ab, als die kleinsten <code>float</code>-Zahlen durch <code>2</code> geteilt wurde und <code>0</code> errechnet wurde (was mathematsich nicht korrekt ist). K\u00f6nnte Python Kommazahlen mathematisch korrekt berechnen w\u00fcrden wir hier in eine Endlosschleife geraten.</p> Summe von Eingaben bilden <p>Schreibe ein Programm, dass den Nutzer nach einer Zahl fragt. Das Programm hat intern in einer Variablen namens <code>summe</code> die Summe  aller bisher abgefragten Zahlen bilden und ausgeben.</p> <p>Die Konsolenausgabe soll also etwa so aussehen:</p> <pre><code>Bisherige Summe: 0\nGib eine Zahl ein: 3\nBisherige Summe: 3\nGib eine Zahl ein: 10\nBisherige Summe: 13\nGib eine Zahl ein: -20\nBisherige Summe: -7\nGib eine Zahl ein: \n</code></pre> Tipp Tipps ohne CodeCodevorlage mit Schleife <ul> <li>Lege dir zun\u00e4chst eine Variable <code>summe</code> an, in der du die Summenden zusammenz\u00e4hlen wirst. Was ist ein sinnvoller Startwert?</li> <li>Um eine Schleife dauerhaft f\u00fcr immer zu durchlaufen kann als Bedingung <code>True</code> genutzt werden.</li> <li>Mit <code>int(input(\"Gib eine Zahl ein: \"))</code> kann man den Nutzer um eine Zahl bitten.</li> <li>Addiere die Eingabe zu <code>summe</code> und speichere diese. </li> </ul> <pre><code>summe = ...\nwhile ...: \n    print(f\"Bisherige Summe: {summe}\")\n    eingabe = ...\n    summe = ...\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>summe = 0\nwhile True:\n    print(f\"Bisherige Summe: {summe}\")\n    eingabe = int(input(\"Gib eine Zahl ein: \"))\n    summe = summe + eingabe\n</code></pre> Bl\u00f6cke in Bl\u00f6cken <p>Gegeben Sei der folgende Code:</p> <pre><code>kunden = 0\nwhile not kunden == 19:\n    print(kunden)\n    kunden = kunden + 5\n\n    if kunden &gt;= 12:\n        kunden = kunden - 7\n</code></pre> <p>Erkl\u00e4ren Sie in ihren Worten, was hier passiert und schreiben Sie die Konsolenausgabe auf.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <ul> <li>In jedem Schleifendurchlauf soll <code>kunden</code> um <code>5</code> wachsen.</li> <li>Wenn <code>kunden</code> dann gr\u00f6\u00dfer als <code>12</code> ist, sollen <code>7</code> abgezogen werden.</li> <li>Wenn <code>kunden</code>gleich <code>19</code> ist, soll die Schleife beenden.</li> </ul> <p>Konsolenausgabe</p> <pre><code>0\n5\n10\n8\n6\n11\n9\n7\n5\n...\n</code></pre> <p>Da es ab der <code>5</code> wieder von Vorne losgeht, gilt niemals <code>kunden == 19</code> und somit bricht die Schleife niemals ab.</p> Spielerwechsel <p>Gegeben Sei der folgende Code:</p> <pre><code>jetziger_spieler = \"Hans\"\nn\u00e4chster_spieler = \"Clara\"\n\nwhile True:\n\n    ...\n\n    print(jetziger_spieler)\n</code></pre> <p>Ziel ist es den Code so zu erweitern, dass immer abwechselnd die Namen der beiden Spieler ausgegeben werden.</p> <p>Erwartete Ausgabe</p> <pre><code>Clara\nHans\nClara\nHans\nClara\nHans\n...\n</code></pre> Tipp <p>Errinnern Sie sich, wie man zwei Variablen miteinander vertauscht. Dazu gab es eine \u00dcbungsaufgabe namens Variableninhalte tauschen.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>jetziger_spieler = \"Hans\"\nn\u00e4chster_spieler = \"Clara\"\n\nwhile True:\n\n    zwischenspeicher = jetziger_spieler\n    jetziger_spieler = n\u00e4chster_spieler\n    n\u00e4chster_spieler = zwischenspeicher\n\n    print(jetziger_spieler)\n</code></pre>"},{"location":"content/oop/34.5%20%C3%9Cbung-OOP/","title":"34.5 \u00dcbung OOP","text":""},{"location":"content/oop/34.5%20%C3%9Cbung-OOP/#1-assignment","title":"1. Assignment","text":"<p>Build a quiz game with the OOP paradigma. The user is asked a question and he chooses between \"true\" or \"false\".  If the question is correct, we give him one point.  If the question was wrong, ask him the next question. You need a\u00a0<code>main</code>,\u00a0<code>question_model</code>,\u00a0<code>quiz_brain</code>\u00a0and a\u00a0<code>data</code>\u00a0file!</p> <pre><code>The `data.py` file:\n</code></pre> <p><code>python question_data = [ {\"text\": \"A slug's blood is green.\", \"answer\": \"True\"}, {\"text\": \"The loudest animal is the African Elephant.\", \"answer\": \"False\"}, {\"text\": \"Approximately one quarter of human bones are in the feet.\", \"answer\": \"True\"}, {\"text\": \"The total surface area of a human lungs is the size of a football pitch.\", \"answer\": \"True\"}, {\"text\": \"In West Virginia, USA, if you accidentally hit an animal with your car, you are free to take it home to eat.\", \"answer\": \"True\"}, {\"text\": \"In London, UK, if you happen to die in the House of Parliament, you are entitled to a state funeral.\", \"answer\": \"False\"}, {\"text\": \"It is illegal to pee in the Ocean in Portugal.\", \"answer\": \"True\"}, {\"text\": \"You can lead a cow down stairs but not up stairs.\", \"answer\": \"False\"}, {\"text\": \"Google was originally called 'Backrub'.\", \"answer\": \"True\"}, {\"text\": \"Buzz Aldrin's mother's maiden name was 'Moon'.\", \"answer\": \"True\"}, {\"text\": \"No piece of square dry paper can be folded in half more than 7 times.\", \"answer\": \"False\"}, {\"text\": \"A few ounces of chocolate can to kill a small dog.\", \"answer\": \"True\"} ]</code></p> <p>The most logic should be inside the\u00a0<code>quiz_brain</code>\u00a0file. The output should look like this: <pre><code>C:\\Users\\olexa\\PycharmProjects\\pythonProject\\venv\\Scripts\\python.exe C:/Users/olexa/PycharmProjects/pythonProject/main.py\nQ.1: A slug's blood is green. (True/False): true\nYou got it right!\nThe correct answer was: True.\nYour current score is: 1/1\n\n\nQ.2: The loudest animal is the African Elephant. (True/False): true\nThat's wrong!\nThe correct answer was: False.\nYour current score is: 1/2\n.\n.\n.\n.\n.\nQ.11: No piece of square dry paper can be folded in half more than 7 times. (True/False): false\nYou got it right!\nThe correct answer was: False.\nYour current score is: 1/11\n\n\nQ.12: A few ounces of chocolate can to kill a small dog. (True/False): false\nThat's wrong!\nThe correct answer was: True.\nYour current score is: 1/12\n\n\nYou have completed the quiz\nYour final score was: 1/12\n\nProcess finished with exit code 0\n</code></pre></p> <p>Solution:</p> <p>The <code>main.py</code> file: <pre><code>from question_model import Question\nfrom data import question_data\nfrom quiz_brain import QuizBrain\n\n# 2. In this list we will save objects from the class \"Question\"\nquestion_bank = []\n# 2. Write a \"for\" loop to iterate over the \"question_data\".\nfor question in question_data:\n    # 3. Create a \"Question\" object from each entry in \"question_data\"\n    question_text = question[\"text\"]\n    question_answer = question[\"answer\"]\n    # 3. Now we create the object\n    new_question = Question(question_text, question_answer)\n    # 4. Append each \"Question\" object to the \"question_bank\"\n    question_bank.append(new_question)\n\nquiz = QuizBrain(question_bank)\n\n# 11. Use a while loop to show the next question until the end\nwhile quiz.still_has_questions():\n    quiz.next_question()\n# 16. Tell the user at the end that he completed the quiz and display the final score\nprint(\"You have completed the quiz\")\nprint(f\"Your final score was: {quiz.score}/{quiz.question_number}\")\n</code></pre></p> <p>The <code>question_model.py</code> file: <pre><code># 1. Create a \"Question\" class with an constructor with two attributes \"text\" and \"answer\"\nclass Question:\n    def __init__(self, q_text, q_answer):\n        self.text = q_text\n        self.answer = q_answer\n</code></pre></p> <p>The <code>quiz_brain.py</code> file: <pre><code># 5. Use the \"quiz_brain\" file to asking the questions, checking of the answer was correct\n#    and checking if it's the end of the quiz\n# 6. Create a class \"QuizBrain\"\nclass QuizBrain:\n    # 6. Write a constructor which initialise the question_number to 0 and\n    # the question_list to an input\n    def __init__(self, q_list):\n        self.question_number = 0\n        self.question_list = q_list\n        # 14. Keep track of the user's score, add for this a new attribute \"score\"\n        self.score = 0\n\n    # 7. Create a method \"next_question\" inside the \"QuizBrain\" class.\n    def next_question(self):\n        # 7. The first question from the list begins at 0\n        current_question = self.question_list[self.question_number]\n        # 8. Rise the \"question_number\" by one each time if \"next_question\" is used\n        self.question_number += 1\n        # 7. Use the \"input\" function to show the user the question text and as for the user's answer.\n        user_answer = input(f\"Q.{self.question_number}: {current_question.text} (True/False): \")\n        # 13. Inside \"next_question\" use \"check_answer\"\n        self.check_answer(user_answer, current_question.answer)\n\n    # 9. Create a new method inside the \"quiz_brain\" file called \"still_has_questions\".\n    def still_has_questions(self):\n        # 10. Return a boolean depending on the value of \"question_number\"\n        if self.question_number &lt; len(self.question_list):\n            return True\n        else:\n            return False\n\n    # 12. Create a new method called \"check_answer\" inside the \"quiz_brain\" file\n    def check_answer(self, user_answer, correct_answer):\n        # 12 It will check and display whether answer is correct or not\n        if user_answer.lower() == correct_answer.lower():\n            # 14. Keep track of the user's score, add for this a new attribute \"score\"\n            self.score += 1\n            print(\"You got it right!\")\n        else:\n            print(\"That's wrong!\")\n        # 15. Tell the user after each question the correct answer and the current score\n        print(f\"The correct answer was: {correct_answer}.\")\n        print(f\"Your current score is: {self.score}/{self.question_number}\")\n        print(\"\\n\")\n</code></pre></p> <p>Additional:</p> <p>It is a little boring when we have only one database in our quiz. You could now write your own questions and then add them to the directory. However, an alternative is to use a database. I chose to use the \"OPEN TRIVIA DATABASE\" which provides free \"trivia questions\". This database has over 3000 verified questions to choose from.</p> <p>Go go the website of\u00a0open trivia database\u00a0and take a look to the API (Application Programming Interface). An API makes it possible to exchange data between software and program parts.  </p> <p>Settings which I selected: ![[py42.png]]</p> <p>After a click on \"GENERATE API URL\" you will get at the top of the screen a URL! If you open this URL you will see generated data in the JSON-format (JavaScript Object Notation): <pre><code> {\"response_code\":0,\"results\":[{\"category\":\"History\",\"type\":\"boolean\",\"difficulty\":\"easy\",\"question\":\"The Cold War ended with Joseph Stalin&amp;#039;s death.\",\"correct_answer\":\"False\",\"incorrect_answers\":[\"True\"]},{\"category\":\"Art\",\"type\":\"boolean\",\"difficulty\":\"medium\",\"question\":\"Pablo Picasso is one of the founding fathers of &amp;quot;Cubism.&amp;quot;\",\"correct_answer\":\"True\",\"incorrect_answers\":[\"False\"]},{\"category\":\"Politics\",\"type\":\"boolean\",\"difficulty\":\"easy\",\"question\":\"Denmark has a monarch.\",\"correct_answer\":\"True\",\"incorrect_answers\":[\"False\"]},{\"category\":\"History\",\"type\":\"boolean\",\"difficulty\":\"easy\",\"question\":\"Former United States Presidents John Adams and Thomas Jefferson died within hours of each other.\",\"correct_answer\":\"True\",\"incorrect_answers\":[\"False\"]},{\"category\":\"Science: Computers\",\"type\":\"boolean\",\"difficulty\":\"easy\",\"question\":\"&amp;quot;HTML&amp;quot; stands for Hypertext Markup Language.\",\"correct_answer\":\"True\",\"incorrect_answers\":[\"False\"]},{\"category\":\"General Knowledge\",\"type\":\"boolean\",\"difficulty\":\"medium\",\"question\":\"The French word for &amp;quot;glass&amp;quot; is &amp;quot;glace&amp;quot;.\",\"correct_answer\":\"False\",\"incorrect_answers\":[\"True\"]},{\"category\":\"Entertainment: Music\",\"type\":\"boolean\",\"difficulty\":\"hard\",\"question\":\"The song &amp;quot;Mystery Train&amp;quot; was released by artist &amp;quot;Little Junior&amp;#039;s Blue Flames&amp;quot; in 1953.\",\"correct_answer\":\"True\",\"incorrect_answers\":[\"False\"]},{\"category\":\"History\",\"type\":\"boolean\",\"difficulty\":\"medium\",\"question\":\"Martin Luther King Jr. and Anne Frank were born the same year. \",\"correct_answer\":\"True\",\"incorrect_answers\":[\"False\"]},{\"category\":\"Entertainment: Japanese Anime &amp; Manga\",\"type\":\"boolean\",\"difficulty\":\"hard\",\"question\":\"In the &amp;quot;To Love-Ru&amp;quot; series, Peke is considered a female robot.\",\"correct_answer\":\"True\",\"incorrect_answers\":[\"False\"]},{\"category\":\"Art\",\"type\":\"boolean\",\"difficulty\":\"medium\",\"question\":\"Venus of Willendorf is one of the earliest works of art, depicting the planets Mars and Venus embrace in the heavens at night.\",\"correct_answer\":\"False\",\"incorrect_answers\":[\"True\"]}]}        \n</code></pre></p> <p>Lets copy the data inside our\u00a0<code>data.py</code>\u00a0file and override the last data. After your paste the data, it is really hard to read, so go to\u00a0<code>Code</code>\u00a0and press\u00a0<code>Reformat code</code>\u00a0inside Pycharm IDE. Now it looks like this: <pre><code> question_data = {\"response_code\": 0, \"results\": [{\"category\": \"History\", \"type\": \"boolean\", \"difficulty\": \"easy\",\n                                                  \"question\": \"The Cold War ended with Joseph Stalin&amp;#039;s death.\",\n                                                  \"correct_answer\": \"False\", \"incorrect_answers\": [\"True\"]},\n                                                 {\"category\": \"Art\", \"type\": \"boolean\", \"difficulty\": \"medium\",\n                                                  \"question\": \"Pablo Picasso is one of the founding fathers of &amp;quot;Cubism.&amp;quot;\",\n                                                  \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                                                 {\"category\": \"Politics\", \"type\": \"boolean\", \"difficulty\": \"easy\",\n                                                  \"question\": \"Denmark has a monarch.\", \"correct_answer\": \"True\",\n                                                  \"incorrect_answers\": [\"False\"]},\n                                                 {\"category\": \"History\", \"type\": \"boolean\", \"difficulty\": \"easy\",\n                                                  \"question\": \"Former United States Presidents John Adams and Thomas Jefferson died within hours of each other.\",\n                                                  \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                                                 {\"category\": \"Science: Computers\", \"type\": \"boolean\",\n                                                  \"difficulty\": \"easy\",\n                                                  \"question\": \"&amp;quot;HTML&amp;quot; stands for Hypertext Markup Language.\",\n                                                  \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                                                 {\"category\": \"General Knowledge\", \"type\": \"boolean\",\n                                                  \"difficulty\": \"medium\",\n                                                  \"question\": \"The French word for &amp;quot;glass&amp;quot; is &amp;quot;glace&amp;quot;.\",\n                                                  \"correct_answer\": \"False\", \"incorrect_answers\": [\"True\"]},\n                                                 {\"category\": \"Entertainment: Music\", \"type\": \"boolean\",\n                                                  \"difficulty\": \"hard\",\n                                                  \"question\": \"The song &amp;quot;Mystery Train&amp;quot; was released by artist &amp;quot;Little Junior&amp;#039;s Blue Flames&amp;quot; in 1953.\",\n                                                  \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                                                 {\"category\": \"History\", \"type\": \"boolean\", \"difficulty\": \"medium\",\n                                                  \"question\": \"Martin Luther King Jr. and Anne Frank were born the same year. \",\n                                                  \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                                                 {\"category\": \"Entertainment: Japanese Anime &amp; Manga\",\n                                                  \"type\": \"boolean\", \"difficulty\": \"hard\",\n                                                  \"question\": \"In the &amp;quot;To Love-Ru&amp;quot; series, Peke is considered a female robot.\",\n                                                  \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                                                 {\"category\": \"Art\", \"type\": \"boolean\", \"difficulty\": \"medium\",\n                                                  \"question\": \"Venus of Willendorf is one of the earliest works of art, depicting the planets Mars and Venus embrace in the heavens at night.\",\n                                                  \"correct_answer\": \"False\", \"incorrect_answers\": [\"True\"]}]}\n</code></pre></p> <p>This dictionary has two key value pairs (response_code and results). I fou\u00a0<code>Reformat Code</code>\u00a0again, you will see that\u00a0<code>results</code>\u00a0have 10 dictionarys: <pre><code>question_data = {\"response_code\": 0,\n                 \"results\": [{\"category\": \"History\", \"type\": \"boolean\", \"difficulty\": \"easy\",\n                              \"question\": \"The Cold War ended with Joseph Stalin&amp;#039;s death.\",\n                              \"correct_answer\": \"False\", \"incorrect_answers\": [\"True\"]},\n                             {\"category\": \"Art\", \"type\": \"boolean\", \"difficulty\": \"medium\",\n                              \"question\": \"Pablo Picasso is one of the founding fathers of &amp;quot;Cubism.&amp;quot;\",\n                              \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                             {\"category\": \"Politics\", \"type\": \"boolean\", \"difficulty\": \"easy\",\n                              \"question\": \"Denmark has a monarch.\", \"correct_answer\": \"True\",\n                              \"incorrect_answers\": [\"False\"]},\n                             {\"category\": \"History\", \"type\": \"boolean\", \"difficulty\": \"easy\",\n                              \"question\": \"Former United States Presidents John Adams and Thomas Jefferson died within hours of each other.\",\n                              \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                             {\"category\": \"Science: Computers\", \"type\": \"boolean\",\n                              \"difficulty\": \"easy\",\n                              \"question\": \"&amp;quot;HTML&amp;quot; stands for Hypertext Markup Language.\",\n                              \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                             {\"category\": \"General Knowledge\", \"type\": \"boolean\",\n                              \"difficulty\": \"medium\",\n                              \"question\": \"The French word for &amp;quot;glass&amp;quot; is &amp;quot;glace&amp;quot;.\",\n                              \"correct_answer\": \"False\", \"incorrect_answers\": [\"True\"]},\n                             {\"category\": \"Entertainment: Music\", \"type\": \"boolean\",\n                              \"difficulty\": \"hard\",\n                              \"question\": \"The song &amp;quot;Mystery Train&amp;quot; was released by artist &amp;quot;Little Junior&amp;#039;s Blue Flames&amp;quot; in 1953.\",\n                              \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                             {\"category\": \"History\", \"type\": \"boolean\", \"difficulty\": \"medium\",\n                              \"question\": \"Martin Luther King Jr. and Anne Frank were born the same year. \",\n                              \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                             {\"category\": \"Entertainment: Japanese Anime &amp; Manga\",\n                              \"type\": \"boolean\", \"difficulty\": \"hard\",\n                              \"question\": \"In the &amp;quot;To Love-Ru&amp;quot; series, Peke is considered a female robot.\",\n                              \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n                             {\"category\": \"Art\", \"type\": \"boolean\", \"difficulty\": \"medium\",\n                              \"question\": \"Venus of Willendorf is one of the earliest works of art, depicting the planets Mars and Venus embrace in the heavens at night.\",\n                              \"correct_answer\": \"False\", \"incorrect_answers\": [\"True\"]}]}\n</code></pre></p> <p>How you have to modify the quiz game, to get it work with this database? Firstly modify the\u00a0<code>question_data</code>, just delete the\u00a0<code>results</code>\u00a0and\u00a0<code>response_code</code>, then we have a list of dictionarys. The data have to lool like this: <pre><code>question_data = [\n    {\"category\": \"History\", \"type\": \"boolean\", \"difficulty\": \"easy\",\n     \"question\": \"The Cold War ended with Joseph Stalin&amp;#039;s death.\",\n     \"correct_answer\": \"False\", \"incorrect_answers\": [\"True\"]},\n    {\"category\": \"Art\", \"type\": \"boolean\", \"difficulty\": \"medium\",\n     \"question\": \"Pablo Picasso is one of the founding fathers of &amp;quot;Cubism.&amp;quot;\",\n     \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n    {\"category\": \"Politics\",\n     \"type\": \"boolean\",\n     \"difficulty\": \"easy\",\n     \"question\": \"Denmark has a monarch.\",\n     \"correct_answer\": \"True\",\n     \"incorrect_answers\": [\"False\"]},\n    {\"category\": \"History\", \"type\": \"boolean\", \"difficulty\": \"easy\",\n     \"question\": \"Former United States Presidents John Adams and Thomas Jefferson died within hours of each other.\",\n     \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n    {\"category\": \"Science: Computers\", \"type\": \"boolean\",\n     \"difficulty\": \"easy\",\n     \"question\": \"&amp;quot;HTML&amp;quot; stands for Hypertext Markup Language.\",\n     \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n    {\"category\": \"General Knowledge\", \"type\": \"boolean\",\n     \"difficulty\": \"medium\",\n     \"question\": \"The French word for &amp;quot;glass&amp;quot; is &amp;quot;glace&amp;quot;.\",\n     \"correct_answer\": \"False\", \"incorrect_answers\": [\"True\"]},\n    {\"category\": \"Entertainment: Music\", \"type\": \"boolean\",\n     \"difficulty\": \"hard\",\n     \"question\": \"The song &amp;quot;Mystery Train&amp;quot; was released by artist &amp;quot;Little Junior&amp;#039;s Blue Flames&amp;quot; in 1953.\",\n     \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n    {\"category\": \"History\", \"type\": \"boolean\", \"difficulty\": \"medium\",\n     \"question\": \"Martin Luther King Jr. and Anne Frank were born the same year. \",\n     \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n    {\"category\": \"Entertainment: Japanese Anime &amp; Manga\",\n     \"type\": \"boolean\", \"difficulty\": \"hard\",\n     \"question\": \"In the &amp;quot;To Love-Ru&amp;quot; series, Peke is considered a female robot.\",\n     \"correct_answer\": \"True\", \"incorrect_answers\": [\"False\"]},\n    {\"category\": \"Art\", \"type\": \"boolean\", \"difficulty\": \"medium\",\n     \"question\": \"Venus of Willendorf is one of the earliest works of art, depicting the planets Mars and Venus embrace in the heavens at night.\",\n     \"correct_answer\": \"False\", \"incorrect_answers\": [\"True\"]}\n]\n</code></pre></p> <p>The last step ist just to change in\u00a0<code>main.py</code>\u00a0file the keys inside\u00a0<code>question_text</code>\u00a0to \"question\" and inside\u00a0<code>question_answer</code>\u00a0to \"correct_answer\".</p>"},{"location":"content/oop/34.5%20%C3%9Cbung-OOP/#2-assignment","title":"2. Assignment","text":"<p>Rectangle class:  </p> <ol> <li>Write a Rectangle class in Python language, allowing you to build a rectangle with length and width attributes.</li> <li>Create a Perimeter() method to calculate the perimeter of the rectangle and a Area() method to calculate the area of \u200b\u200bthe rectangle.</li> <li>Create a method display() that display the length, width, perimeter and area of an object created using an instantiation on rectangle class.</li> <li>Create a Parallelepipede child class inheriting from the Rectangle class and with a height attribute and another Volume() method to calculate the volume of the Parallelepiped.</li> </ol> <p>Solution: <pre><code># 1. Create the class\nclass Rectangle:\n    def __init__(self, width, length):\n        self.width = width\n        self.length = length\n\n    # 2. Create perimeter method\n    def perimeter(self):\n        perimeter = 2 * self.width + 2 * self.length\n        return perimeter\n\n    # 2. Create an area method\n    def area(self):\n        area = self.width * self.length\n        return area\n\n    # 3. Create the method display\n    def display(self):\n        print(\n            f\"The length is {self.length} units, the width is {self.width} units, the perimeter is {self.perimeter()} units and the area is {self.area()} square units\")\n\n\n# 4. Create a Parallelepiped child class\nclass Parallelepiped(Rectangle):\n    def __init__(self, length, width, height):\n        self.height = height\n        super().__init__(width, length)\n\n    def volume(self):\n        volume = self.area() * self.height\n        return volume\n\n\n# --------------------------------------------------------- #\n# Main program\n# --------------------------------------------------------- #\n# Create the object\nrectangle = Rectangle(7, 5)\nrectangle.display()\n# Create the object\nmy_parellepiped = Parallelepiped(7, 5, 2)\n# Show the volume\nprint(f\"The volume of the parellepiped is: {my_parellepiped.volume()}\")\n</code></pre></p>"},{"location":"content/oop/34.5%20%C3%9Cbung-OOP/#3-assignment","title":"3. Assignment","text":"<ol> <li>Create a Python class Person with attributes: name and age of type string.</li> <li>Create a display() method that displays the name and age of an object created via the Person class.</li> <li>Create a child class Student which inherits from the Person class and which also has a section attribute.</li> <li>Create a method displayStudent() that displays the name, age and section of an object created via the Student class.</li> <li>Create a student object via an instantiation on the Student class and then test the displayStudent method.</li> </ol> <p>Solution: <pre><code># Super class\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def display(self):\n        print(f\"The name is: {self.name} and the age is: {self.age}.\")\n\n\n# Subclass\nclass Student(Person):\n    def __init__(self, name, age, section):\n        self.section = section\n        super().__init__(name, age)\n\n    def display(self):\n        print(f\"The name is: {self.name} and the age is: {self.age}.\\nStudents section is: {self.section}.\")\n\n\n# -------------------------------- #\n# Main program\n# -------------------------------- #\nperson = Person(\"Alex\", 12)\nperson.display()\n\nstudent = Student(\"peter\", 20, \"engineering\")\nstudent.display()\n</code></pre></p>"},{"location":"content/oop/34.5%20%C3%9Cbung-OOP/#4-assignment","title":"4. Assignment","text":"<ol> <li>Create a Python class called BankAccount which represents a bank account, having as attributes: accountNumber (numeric type), name (name of the account owner as string type), balance.</li> <li>Create a constructor with parameters: accountNumber, name, balance.</li> <li>Create a Deposit() method which manages the deposit actions.</li> <li>Create a Withdrawal() method which manages withdrawals actions.</li> <li>Create an bankFees() method to apply the bank fees with a percentage of 5% of the balance account.</li> <li>Create a display() method to display account details. Give the complete code for the BankAccount class.</li> </ol> <p>Solution:</p> <p>The <code>main.py</code> file: <pre><code>class BankAccount:\n    def __init__(self, accountNumber, name, balance):\n        self.accountNumber = accountNumber\n        self.name = name\n        self.balance = balance\n\n    def deposit(self, deposit):\n        self.balance += deposit\n\n    def withdrawal(self, withdrawal):\n        if self.balance &gt; withdrawal:\n            self.balance -= withdrawal\n        else:\n            print(\"Balance is to small!\")\n\n    def bankFees(self):\n        self.balance = 95 / 100 * self.balance\n\n    def display(self):\n        print(f\"Name: {self.name}, Account Number: {self.accountNumber}, Balance: {self.balance}\")\n\n\n# ---------------------\n# Main program\n# ---------------------\n\nfirst_account = BankAccount(1, \"Alex\", 4000)\nfirst_account.deposit(500)\nfirst_account.display()\nfirst_account.withdrawal(5000)\nfirst_account.withdrawal(1000)\nfirst_account.display()\nfirst_account.bankFees()\nfirst_account.display()\n</code></pre></p>"},{"location":"content/oop/34.5%20%C3%9Cbung-OOP/#5-assignment","title":"5. Assignment","text":"<ol> <li> <p>Define a Circle class allowing to create a circleC (O, r) with center O(a, b) and radius r using the constructor: <pre><code>    def __init__(self, a, b, r):\n        self.a = a\n        self.b = b\n        self.r = r         \n</code></pre></p> </li> <li> <p>Define a <code>Area()</code> method of the class which calculates the area of the circle.</p> </li> <li>Define a <code>Perimeter()</code> method of the class which allows you to calculate the perimeter of the circle.</li> <li>Define a <code>testBelongs()</code> method of the class which allows to test whether a point A(x, y) belongs to the circle C(O, r) or not.</li> </ol> <p>Solution: <pre><code>from math import pi\n\n\nclass Circle:\n    # a and b are the middle point coordinates!\n    def __init__(self, a, b, r):\n        self.a = a\n        self.b = b\n        self.r = r\n\n    def area(self):\n        area = pi * (self.r ** 2)\n        return area\n\n    def perimeter(self):\n        perimeter = 2 * pi * self.r\n        return perimeter\n\n    def circleEquation(self, x, y):\n        # Just the mathematical function of a circle!\n        f = (x - self.a) ** 2 + (y - self.b) ** 2 - self.r ** 2\n        return f\n\n    def testBelongs(self, x, y):\n        if self.circleEquation(x, y) == 0:\n            print(f\"The point ({x}, {y}) belongs to the circle!\")\n        else:\n            print(f\"The point ({x}, {y}) don't belong to the circle!\")\n\n\n# ---------------------------- #\n# Main program\n# ---------------------------- #\nmy_circle = Circle(1, 2, 1)\nprint(my_circle.area())\nprint(my_circle.perimeter())\n# Is the point with the coordinate (x=1, y=1) on the circle which we created?\nmy_circle.testBelongs(1, 1)\n# Is the point with the coordinate (x=5, y=3) on the circle which we created?\nmy_circle.testBelongs(5, 3)\n</code></pre></p>"},{"location":"content/oop/advanced/","title":"Konstruktor und Destruktor","text":"<p>Es gibt zwei spezielle Methoden, die in Verbindung mit einer Klasse definiert werden: - Die Konstruktor Methode wird verwendet, um einem Objekt zu Beginn seiner Lebensdauer Anfangswerte zuzuweisen. - Die Destruktor-Methode wird verwendet, um Aktionen am Ende der Lebensdauer eines Objekts auszul\u00f6sen, z. B. um eine ge\u00f6ffnete Datei zu schlie\u00dfen.</p> <p>Der angegebene Name <code>__init__()</code> spezifiziert die Konstruktor-Methode. Der angegebene Name <code>__del__()</code> spezifiziert die Destruktor-Methode.</p> <p>Konstrukteure werden h\u00e4ufig verwendet. Sie erm\u00f6glichen eine gezieltere Erstellung von Objekten. Destruktoren werden weniger h\u00e4ufig verwendet.</p> <p>Beispiel: <pre><code># Create a class\nclass Vehicle:\n    # Create a constructor method\n    def __init__(self, v_t, m_s, c):\n        self.speed = None\n        self.vehicle_type = v_t\n        self.max_speed = m_s\n        self.color = c\n\n    # Create a destructor method\n    def __del__(self):\n        print(\"Vehicle has arrived! \")\n        print(f\"Object {self.vehicle_type} removed!\")\n\n    # Create a class method\n    def drive_off(self, speed):\n        self.speed = speed\n        print(f\"The vehicle is driving with {self.speed} km/h\")\n\n\n# Create an object of this class\ncar = Vehicle(\"Porsche\", 350, \"Red\")\n# Let's drive this car\ncar.drive_off(10)\n\n# Output is:\n# The vehicle is driving with 10 km/h\n# Vehicle has arrived! \n# Object Porsche removed!\n</code></pre></p> <p>Exersice: Write a Program to create a class by name Students, and initialize attributes like name, age, and grade while creating an object. Write a method to display information about this student! Test your class!</p> <p>Solution: <pre><code># Class\nclass Student:\n    # Constructor\n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n\n    # Method\n    def information(self):\n        print(f\"{self.name} is {self.age} years old and the grade is {self.grade}\")\n\n    # This method checks if the student can drink and buy alcohol\n    def alcohol_allowed(self):\n        if self.age &gt; 18:\n            print(f\"{self.name} can drink!\")\n            return True\n        else:\n            print(f\"{self.name} can not drink!\")\n            return False\n\n\n# Create some students\nstudent_1 = Student(\"Alex\", 17, 3)\nstudent_2 = Student(\"M\u00fcller\", 24, 6)\n# Display information\nstudent_1.information()\n# Check if students can drink alcohol\nstudent_1.alcohol_allowed()\nstudent_2.alcohol_allowed()\n\n# Output is:\n# Alex is 17 years old and the grade is 3\n# Alex can not drink!\n# M\u00fcller can drink!\n</code></pre></p>"},{"location":"content/oop/advanced/#andere-spezielle-methoden","title":"Andere spezielle Methoden","text":"<p>Wie die Methoden <code>__init()__</code> und <code>__del()__</code> gibt es weitere wichtige Methoden im Zusammenhang mit Klassen: -   <code>__str()__</code> -   <code>__repr()__</code></p> <p>Wenn ein Objekt mit der Funktion <code>print()</code> ausgegeben wird, wird die spezielle Methode <code>__str()__</code> aufgerufen, sofern sie definiert ist. Standardm\u00e4\u00dfig wird dabei eine Zeichenkette f\u00fcr die Ausgabe der Eigenschaften zur\u00fcckgegeben.</p> <p>Beispiel: <pre><code>class Person:\n    # Constructor\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    # Special method which will be called if using print() or str() function to an object\n    # This method must return a string value!\n    # The output of the method\" __str__()\" is only used to display the output to the user.\n    def __str__(self):\n        return f'First name: {self.first_name}, Last name: {self.last_name}, Age: {self.age}'\n\n\n# Create an object\nteacher = Person(\"Max\", \"Musterman\", 20)\n# print this object\nprint(teacher)\n</code></pre></p> <p>Man kann Informationen \u00fcber ein Objekt mit der eingebauten Funktion <code>__repr()__</code> erhalten. Man kann das Layout dieser Informationen selbst bestimmen, wenn man die spezielle Methode <code>__repr()__</code> innerhalb der Klassendefinition definiert. Diese Methode wird jedoch in der Praxis nur selten verwendet und soll daher hier nicht weiter behandelt werden. Sie funktioniert genau wie die Methode <code>__strt()__</code>! Sowohl die str- als auch die repr-Funktionen geben eine String-Repr\u00e4sentation des Objekts zur\u00fcck. Die str-String-Repr\u00e4sentation soll menschenfreundlich sein und haupts\u00e4chlich f\u00fcr Protokollierungszwecke verwendet werden, w\u00e4hrend die repr-Repr\u00e4sentation Informationen \u00fcber das Objekt enthalten soll, damit es wieder konstruiert werden kann.</p>"},{"location":"content/oop/advanced/#getter-und-setter","title":"Getter und Setter","text":"<p>Im Vergleich zu anderen Sprachen verwendet Python die Getter- und Setter-Methode, um Logik zum Abrufen und Setzen eines Wertes hinzuzuf\u00fcgen. Um die Getter- und Setter-Eigenschaft zu erreichen, wird bei der Definition der normalen get()- und set()-Methoden keine spezielle Implementierung ber\u00fccksichtigt.</p> <p>Beispiel: <pre><code># Python program showing a use\n# of get() and set() method\nclass Geek:\n    def __init__(self, age=0):\n        self.age = age\n\n    # getter method\n    def get_age(self):\n        return self.age\n\n    # setter method\n    def set_age(self, x):\n        self.age = x\n\n# Create an object\nraj = Geek()\n# Use setter method\nraj.set_age(25)\n# Use getter method\nraj_age = raj.get_age()\nprint(raj_age)\n\n# Output is:\n# 25\n</code></pre></p> <p>Grunds\u00e4tzlich besteht der Hauptzweck der Verwendung von Gettern und Settern in objektorientierten Programmen darin, die Datenkapselung zu gew\u00e4hrleisten (Verbergen von Daten oder Informationen vor dem Zugriff von au\u00dfen). Im obigen Code fungieren <code>get_age()</code> und <code>set_age()</code> als normale Funktionen und spielen nicht die Rolle von Gettern und Settern.</p>"},{"location":"content/oop/advanced/#vererbung","title":"Vererbung","text":"<p>Eine Klasse kann ihre Attribute und Methoden an eine andere Klasse vererben. Dieser Mechanismus wird h\u00e4ufig genutzt. Durch die Vererbung entsteht eine Hierarchie von Klassen, die die Darstellung von Objekten mit teilweise \u00fcbereinstimmenden Merkmalen erm\u00f6glicht.</p> <p>Beispiel dieser Hierarchie:</p> <p></p> <p>Wir implementieren das obige Beispiel als Code: <pre><code># Create the class \"Konto\" (Superclass)\nclass Account:\n\n    # Constructor\n    def __init__(self, owner, account_number, account_balance):\n        # Attributes\n        self.owner = owner\n        self.account_number = account_number\n        self.account_balance = account_balance\n\n    # Methods\n    def do_deposit(self, amount):\n        print(f\"You deposit {amount} EUR!\")\n        self.account_balance += amount\n\n    def do_payout(self, amount):\n        print(f\"You payout {amount} EUR!\")\n        self.account_balance -= amount\n\n    def show_information(self):\n        print(f\"Owner: {self.owner}\"\n              f\"Account number: {self.account_number}\"\n              f\"Account balance: {self.account_balance}\")\n\n\n# Child class\nclass Checking_account(Account):\n    def __init__(self, interest, owner, account_number, account_balance):\n        # The super() function is used in the child class with\n        # multiple inheritance to access the function of the next parent class or superclass.\n        super().__init__(owner, account_number, account_balance)\n        self.interest = interest\n\n    def bank_transfer(self, amount):\n        self.account_balance -= amount\n\n\n# Child class\nclass Savings_account(Account):\n    def __init__(self, interest_rate, owner, account_number, account_balance):\n        # The super() function is used in the child class with\n        # multiple inheritance to access the function of the next parent class or superclass.\n        super().__init__(owner, account_number, account_balance)\n        self.interest_rate = interest_rate\n\n\n# ---------------------------------------------------------------------------------------- #\n# Main program\n# Create object\nmy_account = Account(\"Alex\", 42, 25000)\n# Show my balance\nprint(my_account.account_balance)\n# Lets do a deposit\nmy_account.do_deposit(5000)\n# Show my balance\nprint(my_account.account_balance)\n# Lets do a payout\nmy_account.do_payout(10000)\n# Show my balance\nprint(my_account.account_balance)\n# Create a checking account\nmy_checking_account = Checking_account(2, \"Alex\", 42, 25000)\n# Show balance of my checking account\nprint(my_checking_account.account_balance)\n# Let's do a deposit to my checking account\nmy_checking_account.do_deposit(5000)\n# Show balance of my checking account\nprint(my_checking_account.account_balance)\n# Show balance of my account\nprint(my_account.account_balance)\n</code></pre></p>"},{"location":"content/oop/examples/","title":"Turtle libary","text":"<p>Eine Bibliothek ist ein Sammelbegriff f\u00fcr einen wieder verwendbaren Teil des Codes. Normalerweise enth\u00e4lt eine Python-Bibliothek eine Sammlung verwandter Module und Pakete. Tats\u00e4chlich wird dieser Begriff oft austauschbar mit \"Python-Paket\" verwendet, da Pakete auch Module und andere Pakete (Unterpakete) enthalten k\u00f6nnen. Es wird jedoch oft angenommen, dass ein Paket eine Sammlung von Modulen ist, w\u00e4hrend eine Bibliothek eine Sammlung von Paketen ist.</p> <p>Um das Konzept der OOP zu \u00fcben, werden wir zun\u00e4chst mit der Bibliothek \"turtle\" arbeiten.</p> <p>Durch die Verwendung von <code>import turtle</code> k\u00f6nnen wir diese Bibliothek nutzen. Dann k\u00f6nnen Sie auf die Klasse <code>Turtle</code> zugreifen, die in dieser Bibliothek definiert wurde.</p> <p>![[py36.png]]</p> <p>Wir k\u00f6nnen ein Objekt dieser Klasse erstellen und es in einer Variablen speichern. Ich werde meine Schildkr\u00f6te (Variable/Objekt) bob nennen: <pre><code>import turtle\n\nbob = turtle.Turtle()\n# If we use \"print()\" on our object, we will see where our object is stored inside the computer memory\nprint(bob)\n\n# Output is:\n# &lt;turtle.Turtle object at 0x000001F0556B6080&gt;\n</code></pre></p> <p>Jetzt k\u00f6nnen wir viele verschiedene und interessante Dinge mit diesem Objekt tun. Eine der anderen interessanten Klassen in der \"turtle\"-Bibliothek ist die \"Screen\"-Klasse. Sie erm\u00f6glicht es, unser Objekt in einem Fenster darzustellen: <pre><code>import turtle\n\nbob = turtle.Turtle()\n# Creat a \"Screen\" object:\nmy_screen = turtle.Screen()\n# Use one of the Screen class attributes (this is the height of the screen, if you print it you will see 300 as default value)\nmy_screen.canvheight\n# Let's use another attribute of the class Screen (we will see the screen until we press a key)\nmy_screen.exitonclick()\n</code></pre></p> <p>In der Mitte des Bildschirms siehst du die Schildkr\u00f6te \"bob\".</p> <p>![[py37.png]]</p> <p>Aber die Form der Schildkr\u00f6te ist eigentlich ein Pfeil, \u00e4ndern wir es zu einer Schildkr\u00f6te durch ein Attribut der Klasse Turtle: <pre><code>import turtle\n\nbob = turtle.Turtle()\n# Change the shape of \"bob\"\nbob.shape(\"turtle\")\n# We can also change the color of bob\nbob.color(\"green\")\n# Creat a \"Screen\" object:\nmy_screen = turtle.Screen()\n# Let's use another attribute of the class Screen (we will see the screen until we press a key)\nmy_screen.exitonclick()\n</code></pre></p> <p>![[py38.png]]</p> <p>Nat\u00fcrlich muss man nicht alle diese Klassen und Attribute auswendig kennen. Man kann all dies in der \"Turtle graphics libary documentation\" nachlesen.</p>"},{"location":"content/oop/examples/#exercises-turtle-modul","title":"Exercises - turtle Modul","text":"<ol> <li>Create your own turtle and draw a rectangle with a height of 150 and width of 200.</li> </ol> <p>Solution: <pre><code>import turtle\n\nbob = turtle.Turtle()\n# Change the shape of \"bob\"\nbob.shape(\"turtle\")\nbob.color(\"green\")\n# Move turtle forward\nbob.forward(150)\n# Turn him 90 degrees left direction\nbob.left(90)\n# Move turtle forward\nbob.forward(200)\nbob.left(90)\nbob.forward(150)\nbob.left(90)\nbob.forward(200)\n\n# Creat a \"Screen\" object:\nmy_screen = turtle.Screen()\n# Let's use another attribute of the class Screen (we will see the screen until we press a key)\nmy_screen.exitonclick()\n</code></pre></p> <ol> <li>Draw the following house with your turtle!</li> </ol> <p>![[py39.png]]</p> <p>Solution: <pre><code>import turtle\nbob = turtle.Turtle()\n# Set window size\nturtle.setup(500, 500)\n# Change the shape of \"bob\"\nbob.shape(\"turtle\")\nbob.color(\"green\")\nbob.fd(80)\nbob.lt(90)\nbob.fd(80)\nbob.lt(30)\nbob.fd(80)\nbob.lt(120)\nbob.fd(80)\nbob.lt(120)\nbob.fd(80)\nbob.rt(90)\nbob.fd(80)\nbob.rt(90)\nbob.fd(20)\nbob.rt(90)\nbob.fd(40)\nbob.lt(90)\nbob.fd(40)\nbob.lt(90)\nbob.fd(40)\nbob.rt(90)\nbob.fd(20)\nbob.rt(90)\nbob.fd(80)\n# Creat a \"Screen\" object:\nmy_screen = turtle.Screen()\n# Let's use another attribute of the class Screen (we will see the screen until we press a key)\nmy_screen.exitonclick()\n</code></pre></p>"},{"location":"content/oop/examples/#prettytable","title":"Prettytable","text":"<p>Eine weitere n\u00fctzliche Bibliothek zum \u00dcben von OOP ist die \"prettytable\"-Bibliothek. Mit ihr kann man schnell einfache Tabellen in der Konsole erstellen. Im Vergleich zur Bibliothek <code>turtle</code> muss man sie zuerst installieren, da sie nicht zum Standard geh\u00f6rt. Man kann sie innerhalb der Pycharm IDE installieren: Gehen Sie zu File &gt; Settings &gt; Project: &gt; Python Interpreter &gt; dr\u00fccken Sie das \"+\" Symbol &gt; suchen Sie \"prettytabble\" &gt; installieren</p> <p>Wie jedes Mal, wenn man eine Bibliothek benutzen m\u00f6chte, ist der beste Freund die Dokumentation \u00fcber prettytable!</p> <p>Beispiel: <pre><code>  # import this libary\nimport prettytable\n# Create a object\nmy_table = prettytable.PrettyTable()\n# Add data\nmy_table.add_column(\"Pokemon Name\", [\"Pikachu\", \"Squirtle\", \"Charmander\"])\nmy_table.add_column(\"Type\", [\"Electric\", \"Water\", \"Fire\"])\n# Display the table\nprint(my_table)\n# Change properties\nmy_table.align = \"l\"\nprint(my_table)  \n</code></pre></p>"},{"location":"content/oop/examples/#exercises-prettytable-modul","title":"Exercises - prettytable Modul","text":"<ol> <li>Create with \"prettytable\" a simple to-do list! The user can select a day and enter a to-do. Then he can select to continue for a new entry or exit the to-do list.</li> </ol> <p>Solution: <pre><code># Example using prettytable\nimport prettytable\n# Inside this dictionary we will store the to-dos\nto_dos = {\n    \"monday\": [],\n    \"tuesday\": [],\n    \"wednesday\": [],\n    \"thursday\": [],\n    \"friday\": [],\n    \"saturday\": [],\n    \"sunday\": []\n  }\nto_do_on = True\nwhile to_do_on:\n    # Variable which will be filled by the user\n    day = \"place holder\"\n    valid_days = [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    # Loop until the user enter the valid day\n    while True:\n        if day.lower() in valid_days:\n            break\n        # Display all days which the user can select\n        print(\"------------------------\\nWelcome to your to-do list!\\n------------------------\")\n        day = input(\"\"\n                    \"\\t1-Monday\\n\"\n                    \"\\t2-Tuesday\\n\"\n                    \"\\t3-Wednesday\\n\"\n                    \"\\t4-Thursday\\n\"\n                    \"\\t5-Friday\\n\"\n                    \"\\t6-Saturday\\n\"\n                    \"\\t7-Sunday\\n\"\n                    \"------------------------\\n\"\n                    \"Select a day: \")\n    # Now we search inside the dictionary the selected day and enter a to-do\n    to_do = input(\"Enter a to-do: \")\n    to_dos[day].append(to_do)\n    # Create an object of the class \"PrettyTable\"\n    table = prettytable.PrettyTable()\n    # Create the captions\n    table.field_names = [\"Day\", \"To-Do\"]\n    # Create all rows with the days\n    table.add_rows(\n        [\n            [\"Monday\", to_dos[\"monday\"]],\n            [\"Tuesday\", to_dos[\"tuesday\"]],\n            [\"Wednesday\", to_dos[\"wednesday\"]],\n            [\"Thursday\", to_dos[\"thursday\"]],\n            [\"Friday\", to_dos[\"friday\"]],\n            [\"Saturday\", to_dos[\"saturday\"]],\n            [\"Sunday\", to_dos[\"sunday\"]]\n        ]\n    )\n    # Display the table\n    print(table)\n    # Ask the user if he likes to exit\n    while True:\n        valid_input = [\"yes\", \"no\"]\n        exit_to_do = input(\"You like to exit the to-do list? (Yes/No): \")\n        if exit_to_do in valid_input:\n            if exit_to_do.lower() == \"yes\":\n                # Set this variable to False for breaking the main while loop\n                to_do_on = False\n        break\n</code></pre></p> <ol> <li>The table shows the recorded values of a free fall experiment.</li> </ol> <p>![[py40.png]]</p> <p>Display the following table using prettytable and complete the empty cells. You need this formulas:</p> \\[  Mittelwert=\\frac{Messung1 + Messung2 + Messung3} {3} \\] \\[  Geschwindigkeit=9,81 \\cdot Mittelwert \\] <p>Solution: <pre><code># Import everything from this libary\nfrom prettytable import *\n# Create dictionary with data\ndata_table = {\n    \"Nr.\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Fallstrecke\": [0, 0.115, 0.245, 0.285, 0.38, 0.49, 0.59, 0.67, 0.76, 0.835],\n    \"Messung 1\": [0, 0.1568, 0.2072, 0.3404, 0.2811, 0.3173, 0.3488, 0.3705, 0.3937, 0.4183],\n    \"Messung 2\": [0, 0.1561, 0.2075, 0.2427, 0.2846, 0.3172, 0.3477, 0.3703, 0.3941, 0.4176],\n    \"Messung 3\": [0, 0.1566, 0.2578, 0.2403, 0.2814, 0.3172, 0.3483, 0.3693, 0.3946, 0.4116],\n    \"Mittelwert\": [],\n    \"Geschwindigkeit\": []\n}\n\n# Calculate the first value\nfor index in data_table[\"Nr.\"]:\n    # Calculating the \"Mittelwert\"\n        messung_1 = data_table[\"Messung 1\"][index - 1]\n        messung_2 = data_table[\"Messung 2\"][index - 1]\n        messung_3 = data_table[\"Messung 3\"][index - 1]\n        # Do not forget to round\n        mittelwert = round((messung_1 + messung_2 + messung_3) / 3, 4)\n        data_table[\"Mittelwert\"].append(mittelwert)\n    # Calculating the \"Geschwindigkeit\"\n        geschwindigkeit = round(9.81 * mittelwert, 2)\n        data_table[\"Geschwindigkeit\"].append(geschwindigkeit)\n\n\n# Create object\nmy_table = PrettyTable()\n# Fill table with data\nmy_table.add_column(\"Nr.\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nmy_table.add_column(\"Fallstrecke in m\", data_table[\"Fallstrecke\"])\nmy_table.add_column(\"Messung 1 in s\", data_table[\"Messung 1\"])\nmy_table.add_column(\"Messung 2 in s\", data_table[\"Messung 2\"])\nmy_table.add_column(\"Messung 3 in s\", data_table[\"Messung 3\"])\nmy_table.add_column(\"Mittelwert in s\", data_table[\"Mittelwert\"])\nmy_table.add_column(\"Geschwindigkeit in m/s\", data_table[\"Geschwindigkeit\"])\n# Display table\nprint(my_table)\n\n# Save this table as txt file! (You wil find the file inside the project directory)\n# More about this later...\nwith open('file', 'w') as w:\n    w.write(str(my_table))\n</code></pre></p>"},{"location":"content/oop/examples/#math-modul-mathematische-funktionen","title":"Math-Modul (Mathematische Funktionen)","text":"<p>Dieses Modul erm\u00f6glicht den Zugriff auf die im C-Standard definierten mathematischen Funktionen. Bei der Arbeit an finanziellen oder wissenschaftlichen Projekten ist es manchmal notwendig, mathematische Berechnungen in das Projekt zu integrieren. Python bietet das mathematische Modul, um solche Berechnungen durchzuf\u00fchren. Durch die Verwendung dieses Moduls muss man Methoden, Attribute, Klassen und Objekte verwenden, perfekt um OOP zu \u00fcben. Nicht vergessen die Dokumentation zum Modul zu lesen!</p> <p>Einige Beispiele zur Nutzung des <code>math</code> Modules: <pre><code># Examples using the \"math\" modul\n# ---------------------------------------- #\n# import the modul\nimport math\n# ---------------------------------------- #\n# 1. Example\n# You must all be familiar with pi. Pi is represented as either 22/7 or 3.14.\npi = math.pi\nprint(pi)\n# You can use pi to calculate the area of a circle\n# Define the radius of the circle\nr = 5\ncircle_area = math.pi * r ** 2\nprint(circle_area)\n# ---------------------------------------- #\n# 2. Example\n# Even the circle number tau is included (Ratios of circumference and radius)\ncircle_number = math.tau\nprint(circle_number)\n# ---------------------------------------- #\n# 3. Example\n# Using infinity numbers in python\nprint(math.inf)\nprint(-math.inf)\n# Divide a number by infinite number\nprint(1 / math.inf)\n# ---------------------------------------- #\n# 4. Example\n# Faculty of a number\na = 5\nprint(math.factorial(a))\n# ---------------------------------------- #\n# 5. Example\n# Power functions (German: Potenzfunktionen)\nexponentiation_numbers = [0, 5, -2, math.pi]\nprint(math.exp((exponentiation_numbers[0])))\nprint(math.exp((exponentiation_numbers[1])))\nprint(math.exp((exponentiation_numbers[2])))\nprint(math.exp((exponentiation_numbers[3])))\n# ---------------------------------------- #\n# 6. Example\n# Square root\nprint(math.sqrt(9))\n# ---------------------------------------- #\n# 7. Example\n# Trigonometric functions\nprint(math.sin(math.pi / 2))\nprint(math.sin(90))\n# ---------------------------------------- #\n# 8. Example\n# Convert degrees in radians\ndegree = 90\nradians = math.pi\nprint(math.degrees(radians))\nprint(math.radians(degree))  \n\n# Output is:\n# 3.141592653589793\n# 78.53981633974483\n# 6.283185307179586\n# inf\n# -inf\n# 0.0\n# 120\n# 1.0\n# 148.4131591025766\n# 0.1353352832366127\n# 23.140692632779267\n# 3.0\n# 1.0\n# 0.8939966636005579\n# 180.0\n# 1.5707963267948966\n</code></pre></p>"},{"location":"content/oop/examples/#exercises-math-modul","title":"Exercises - math Modul","text":"<ol> <li>Write a program that calculates the hypotenuse of a right triangle.  Divide the program into input, processing and output:<ul> <li>In the input part, read the length of the two cathets</li> <li>Use the function math.sqrt() for the calculation</li> <li>Output the result to the screen</li> </ul> </li> </ol> <p>Solution: <pre><code># import the modul\nimport math\n# -------------------------------------------------- #\n# Function\ndef calc_hypetenuse(cathet_1, cathet_2):\n    hypotenuse = math.sqrt((cathet_1 ** 2) + (cathet_2 ** 2))\n    return hypotenuse\n# -------------------------------------------------- #\n# Main program\n# Input part\ntry:\n    cathete_1 = float(input(\"Input the first cathet: \"))\n    cathete_2 = float(input(\"Input the second cathet: \"))\nexcept:\n    print(\"Wrong input!\")\n# Processing part\nhypotenuse = round(calc_hypetenuse(cathete_1, cathete_2), 2)\n# Output part\nprint(f\"The hypotenuse is: {hypotenuse}\")\n</code></pre></p> <ol> <li>Write a program to plot functions with the \"turtle\" libary and the \"math\" module. Draw a parable and a linear function!</li> </ol> <p>Solution: <pre><code># Import modules\nimport turtle\nimport prettytable\n# -------------------------------------------------- #\n# Create a window\nturtle.getscreen()\n# Create a object from the \"Turtle()\" class\nt = turtle.Turtle()\n# Variable to \"zoom\" later\nscale = 10\n# -------------------------------------------------- #\n# Generate a table for x square with x = -20 to +20\nmy_table = prettytable.PrettyTable()\nmy_table.field_names = [\"x\", \"x^2\"]\nfor x in range(-20, 21, 1):\n    x_square = x ** 2\n    my_table.add_row([x, x_square])\nprint(my_table)\n# -------------------------------------------------- #\n# Draw the axes\n# penup() will lift the turtle off the \u201cdigital canvas\u201d and if you move the turtle in penup state it won\u2019t draw.\nt.penup()\n# Move turtle to an absolute position\nt.goto(-400, 0)\n# Put the turtle back in the \"canvas\" to draw\nt.pendown()\n# Lets draw\nt.goto(400, 0)\nt.penup()\nt.goto(0, -400)\nt.pendown()\nt.goto(0, 400)\nt.penup()\nt.home()\n# -------------------------------------------------- #\n# Prepare the turtle\nt.pensize(2)\n# Location of the first coordinates (-20;400)\n# You can try without the scale variable\nt.goto(-20 * scale, 400)\n# -------------------------------------------------- #\n# Draw the curve\nfor x in range(-20, 21, 1):\n    x_square = x ** 2\n    t.dot(10, \"RED\")\n    # You can try without the scale variable\n    t.goto(x * scale, x_square)\n# -------------------------------------------------- #\n# Bring the turtle back\nt.penup()\nt.home()\n# -------------------------------------------------- #\n# Lets draw f(x) = 2*x\nt.penup()\nt.goto(-20 * scale, -40)\nt.pendown()\nt.pencolor(\"GREEN\")\nfor x in range(-20, 21, 1):\n    x_2 = x * 2\n    t.goto(x * scale, x_2)\n# -------------------------------------------------- #\n# Bring the turtle back\nt.penup()\nt.home()\n# -------------------------------------------------- #\nturtle.exitonclick()\n</code></pre></p> <ol> <li>Draw the sinus function by using the tuertle and math moduls.</li> </ol> <p>Solution: <pre><code># Import modules\nimport math\nimport turtle\nimport prettytable\n# -------------------------------------------------- #\n# Create a window\nturtle.getscreen()\n# Create an object from the \"Turtle()\" class\nt = turtle.Turtle()\n# Variable to \"zoom\" later\nscale = 100\n# -------------------------------------------------- #\n# Draw the axis\nt.backward(180)\nt.forward(360)\nt.stamp()\nt.backward(180)\nt.left(90)\nt.forward(100)\nt.stamp()\nt.backward(200)\nt.forward(100)\nt.right(90)\nt.backward(180)\n# Draw the curve\nfor i in range(-180, 181):\n    t.color(\"RED\")\n    t.goto(i, math.sin(math.radians(i)) * scale)\n\nturtle.exitonclick()\n</code></pre></p>"},{"location":"content/oop/methods_classes_objects/","title":"Methoden, Klassen und Objekte","text":"<p>Am Beispiel des Stifts werden wir lernen, wie man Klassen, Objekte und Methoden erstellt.</p> <pre><code># Define a class with the \"class\" keyword\nclass Pen:\n    # Let's create some attributes which the pen will have (We are using \"None\" to assign \"no value\"\n    outside_color = None\n    writing_color = None\n\n    # Create some methods (what can the pen do?). The definition is the same as functions.\n    # Methods have always minimum one parameter, the object itself \"keyword self\"\n    def write(self):\n        print(\"I am writing!\")\n\n    def refill(self):\n        print(\"I refill the pen!\")\n\n    # Inside the f-string we have to use the \"self\" keyword to call the object \"itself\"\n    def about_pen(self):\n        print(f\"My outside color is {self.outside_color} and my writing color is {self.writing_color}! \")\n\n\n# Let's use our class inside the main program\n\n# Firstly we create two objects of the class \"pen\", this process is called \"create instance of class\"\nmy_pen = pen()\nworkers_pen = pen()\n# Let's set the values of the attributes with the \"dot notation\"\nmy_pen.outside_color = \"red\"\nmy_pen.writing_color = \"blue\"\nworkers_pen.outside_color = \"yellow\"\nworkers_pen.writing_color = \"black\"\n# Let's do something with the pens by using the methods\nmy_pen.write()\nworkers_pen.refill()\n# Display the information about the pen with the \"about_pen\" method\nmy_pen.about_pen()\nworkers_pen.about_pen()\n\n# Output is:\n# I am writing!\n# I refill the pen!\n# My outside color is red and my writing color is blue! \n# My outside color is yellow and my writing color is black!  \n</code></pre> <p>Folgendes sollte beachtet werden: - Eine Klasse ist im Allgemeinen eine Gruppe von Dingen, Lebewesen oder Konzepten, die gemeinsame Merkmale oder Eigenschaften haben. - In der OOP spezifiziert eine Klasse eine Reihe von Objekten mit denselben Attributen und Methoden. - Die Klasse verf\u00fcgt \u00fcber einen Mechanismus zum Erstellen von Objekten. Sie ist lediglich die Konstruktionsvorlage f\u00fcr alle neu ben\u00f6tigten Objekte, w\u00e4hrend die Objekte im Programmsystem \"leben\" und angesprochen werden k\u00f6nnen. - Zwischen verschiedenen Klassen oder ihren Objekten k\u00f6nnen verschiedene Beziehungen hergestellt werden, um Beziehungen wie in der Realit\u00e4t darzustellen.</p> <p>Wenn Sie sich erinnern, hatten wir bereits Methoden auf Objekte angewendet. Damals wussten wir allerdings noch nicht, was genau eine Methode oder ein Objekt ist. Wir hatten die Methode <code>append()</code> mit der Punktschreibweise f\u00fcr die Datenstruktur \"list\" verwendet. Diese Methode erm\u00f6glichte es uns, einen Eintrag am Ende der Liste hinzuzuf\u00fcgen.</p> <p>Beispiel: <pre><code># Create a list\nmy_list = [\"Red\", \"Blue\", \"Yellow\"]\n# Display the list\nprint(my_list)\n# Add a entry at the end of this list\nmy_list.append(\"Black\")\n# Display the list\nprint(my_list)\n\n# Output is:\n# ['Red', 'Blue', 'Yellow']\n# ['Red', 'Blue', 'Yellow', 'Black']\n</code></pre></p> <p>Exercise:</p> <p>Write a class called \"Cat\". The class has three attributes: \"name\", \" race\" and \"age\". The \"age\" of a new \"cat\" object should be \"0\" at the beginning of its lifetime. Write three methods: - The first one is called \"doMiau()\". When the method is executed, the text \"meow\" is output. - The second method you call \"riseAge()\". This method increases the value of the \"age\" attribute by 1. - The third method is called \"displayDetails()\", it displays name, race and age meaningfully as text.</p> <p>Solution: <pre><code># Create the class\nclass Cat:\n    # Attributes\n    name = None\n    race = None\n    age = 0\n\n    # Methods\n    def doMiau(self):\n        print(\"meow\")\n\n    def riseAge(self):\n        self.age += 1\n\n    def displayDetails(self):\n        print(f\"The name of the cat is {self.name}, the cat is {self.age} years old and the race is an {self.race}!\")\n\n\n# Main program\nmy_cat = Cat()\n# Show me the age of my cate\nprint(f\"My cat is {my_cat.age} years old\")\n# Lets rise the age of my cate\nmy_cat.riseAge()\n# My cat get a name\nmy_cat.name = \"Thanos\"\n# Define the race of the cat\nmy_cat.race = \"American Shorthair\"\n# Show me all details about my cat\nmy_cat.displayDetails()\n\n# Output is:\n# My cat is 0 years old\n# The name of the cat is Thanos, the cat is 1 years old and the race is an American Shorthair!\n</code></pre></p>"},{"location":"content/oop/oop/","title":"Einf\u00fchrung","text":"<p>In der Softwareentwicklung ist die Objektorientierung (kurz: OO) eine Sichtweise komplexer Systeme, bei der ein System durch die Interaktion kooperierender Objekte beschrieben wird. Der Begriff Objekt ist nicht sehr eindeutig, wichtig an einem Objekt ist nur, dass es bestimmte Attribute (Eigenschaften) und Methoden hat, die ihm zugeordnet sind, und dass es in der Lage ist, Nachrichten von anderen Objekten zu empfangen oder an sie zu senden. Die Objektorientierung wird meist im Rahmen der objektorientierten Programmierung eingesetzt, um die Komplexit\u00e4t der entstehenden Programme zu reduzieren.</p> <p>Die objektorientierte Programmierung (OOP) ist ein g\u00e4ngiges Paradigma, das heute in fast allen Sprachen zur Programmierung verwendet wird. Und es ist dasjenige, auf dem heutzutage fast jedes gr\u00f6\u00dfere Softwareprojekt basiert; mal mehr, mal weniger. Bei der objektorientierten Programmierung wird der Code in \"Objekte\" aufgeteilt. Das Gegenteil ist die prozedurale Programmierung, bei der eine Sequenz von Code St\u00fcck f\u00fcr St\u00fcck abgearbeitet wird.</p> <p>Da die Objektorientierung dem menschlichen Denken sehr \u00e4hnlich ist, kann dieser Programmierstil auch von einem menschlichen Programmierer sehr intuitiv verwendet werden. Es ist also ein Konzept, das f\u00fcr Menschen leicht zu verstehen und anzuwenden ist, da es auf unserem nat\u00fcrlichen menschlichen Denken basiert.</p> <p>Ein Objekt ist eine genaue Beschreibung z.B. eines Stiftes. Die Attribute (Eigenschaften) haben einen Wert oder einen festen Zustand. Zum Beispiel hat unser Stift die Au\u00dfenfarbe wei\u00df und die Schreibfarbe schwarz. Die Klasse hingegen ist eine Verallgemeinerung aller Stiftobjekte. Sie beschreibt, welche Eigenschaften ein Stift haben kann, ohne ihnen einen Wert zuzuweisen. Nur das Objekt repr\u00e4sentiert das Ding Stift, das wir mit all seinen Eigenschaften vor uns haben.</p> <p></p> <p>Ein weiteres Beispiel ist die Klasse \"Mensch\". Schon vor der Geburt wissen wir, welche Eigenschaften (z.B. Augenfarbe, Gr\u00f6\u00dfe, Geschlecht) und Funktionen (z.B. Sprechen) ein Mensch sp\u00e4ter haben wird, aber wir wissen nicht, welchen Wert sie haben. Eine einzelne Person entspricht dann einem Objekt der Klasse \"Mensch\" (auch wenn der Begriff Objekt in diesem Zusammenhang vielleicht etwas unpassend ist), dessen Eigenschaften bei der Erstellung festgelegt werden (z.B. Augenfarbe=braun).</p> <p>In der objektorientierten Programmierung geh\u00f6rt jedes Objekt zu einer Klasse. Diese hat die Attribute (Eigenschaften) und die Methoden (Interaktionen) dieser Klasse. In unserer Klasse \"Stift\" k\u00f6nnte eine Methode \"schreiben\" hei\u00dfen. Methoden sind nichts anderes als Funktionen, die nur von einem bestimmten Objekt ausgef\u00fchrt werden k\u00f6nnen. Ein Objekt ist also nur eine M\u00f6glichkeit, einige Variablen und Funktionen in einem \"Ding\" zu kombinieren.</p>"},{"location":"content/packages/moduls/","title":"Module und Pakete","text":"<p>In Python erm\u00f6glichen Module und Pakete die Organisation von Code in wiederverwendbare Einheiten, um die Lesbarkeit zu verbessern und die Codeverwaltung zu optimieren.</p>"},{"location":"content/packages/moduls/#module","title":"Module","text":"Video <p>Ein Modul in Python ist im Grunde genommen eine <code>.py</code>-Datei mit Python-Code. In dieser Datei k\u00f6nnen Funktionen, Variablen und Klassen definiert werden, die in anderen Python-Dateien wiederverwendet werden k\u00f6nnen. Es gibt</p> <p>Angenommen, du erstellst eine Datei/Modul namens <code>greetings.py</code>:</p> <pre><code># greetings.py\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n</code></pre> <p>Und im selben Ordner eine andere Datei namens <code>main.py</code>. Wir k\u00f6nnen das Modul <code>greetings.py</code> und die darin enthaltene Methode nun wie folgt verwenden:</p> <pre><code># main.py\n\nimport greetings\n\nprint(greetings.greet(\"Alice\"))\n</code></pre> <p>Du kannst auch Alias f\u00fcr Module verwenden, um den Code kompakter zu gestalten:</p> <pre><code># main.py\n\nimport greetings as gr\n\nprint(gr.greet(\"Bob\"))\n</code></pre> <p>Wir k\u00f6nnen auch nur die einzelne Funktion zu importieren</p> <pre><code># main.py\n\nfrom greetings import greet\n\nprint(greet(\"Bob\"))\n</code></pre> <p>Oder alle Funktionen, die es in einem Modul gibt:</p> <pre><code># main.py\n\nfrom greetings import *\n\nprint(greet(\"Bob\"))\n</code></pre> <p>Es ist jedoch ratsam, selektiv zu importieren, um potenzielle Namenskonflikte zu vermeiden.</p> Zuf\u00e4lle gibts... <p>Erstelle eine Datei namens <code>my_random.py</code>. Erstelle in dieser eine Funktion <code>random_squares</code>, die eine Zahl <code>n</code> als Parameter erwartet. Sie gibt dann eine zuf\u00e4llige Quadratzahl zwischen <code>1</code> und <code>n * n</code> zur\u00fcck.</p> <p>Beim Aufruf <code>random_squares(5)</code> k\u00f6nnten also <code>1</code>, <code>4</code>, <code>9</code>, <code>16</code> oder <code>25</code> zur\u00fcckgegeben werden.</p> <p>Importiere dazu eine passende Funktion aus dem Modul <code>random</code>.</p> <p>Erstelle jetzt eine zweite Datei <code>main.py</code> und importiere deine <code>random_squares</code> Funktion aus <code>my_random.py</code>. Nutze ein <code>print()</code> um deine Methode zu testen.</p> L\u00f6sung <pre><code>from random import randint\n\n\ndef random_squares(n):\n    return randint(1, n) ** 2\n</code></pre> <pre><code>from my_random import random_squares\n\nprint(random_squares(5))\n</code></pre> Abzocke ausdenken <p>Erstelle eine neue Datei namens <code>casino_games.py</code>. Erstelle darin eine Funktion <code>bet_under_squares(my_bet, faktor)</code>. Die Funktion erwartet zwei Integer, <code>my_bet</code> und <code>faktor</code>. Der <code>faktor</code> soll hier die Risikobereitschaft des Spielers darstellen um h\u00f6hre Gewinne zu bekommen.</p> <p>In der Funktion soll eine quadratische Zufallszahl zwischen <code>1</code> und <code>faktor * faktor</code> gew\u00fcrfelt werden. Importiere und nutze dazu die Funktion <code>random_squares</code></p> <p>Um den sp\u00e4teren Spielern unseres Casino-Games das Geld aus der Tasche zu ziehen m\u00fcssen wir jetzt die Gewinnbedingung setzen. Wenn die quadratische Zufallszahl kleiner oder gleich <code>my_bet</code> ist, soll <code>faktor * my_bet</code> returned werden, andernfalls <code>0</code>.</p> <p>Der Spieler verliert also alles, falls die Zufallszahl kleiner als sein gebot ist (was mit h\u00f6herem Risiko (<code>faktor</code>) exponentiell wahrscheinlicher wird).</p> L\u00f6sung <pre><code>def bet_under_squares(my_bet, faktor):\n  random_square = random_squares(faktor)\n  print(f\"Randomly roled:{random_square}\")\n  return 0 if my_bet &lt; random_square else faktor * my_bet\n</code></pre> Sicherheit muss sein <p>Erstelle eine weitere Funktion <code>input_int_in_between(prompt, minimum, maximum)</code>  in wieder einem neuen Modul <code>secure_input</code>.</p> <p>In der Funktion wird ein <code>input</code> als Integer vom Nutzer abgefragt, der zwischen <code>minimum</code> und <code>maximum</code> liegt. Dabei wird der \u00fcbergebene <code>prompt</code> auf dem Bildschirm angezeigt. Dieser Input wird von der Funktion als Integer zur\u00fcckgegeben.</p> <p>Wenn die Eingabe ung\u00fcltig ist, soll (z.B. mithilfe von Exceptionhandling) erneut um eine g\u00fcltige Eingabe gebeten werden.</p> L\u00f6sung <pre><code>def input_int_in_between(prompt, minimum, maximum):\n  user_input = 0\n  while True:\n      try:\n          user_input = int(input(prompt))\n      except ValueError:\n          print(f\"Eingabe ist nicht vom Typ int\")\n\n      if minimum &lt;= user_input &lt;= maximum:\n          return user_input\n      else:\n          print(f\"Eingabe ist nicht g\u00fcltig.\")\n</code></pre> Tische bereit machen <p>F\u00fcge dem Modul <code>casino_game</code> eine neue Methode <code>play_game(rounds, money)</code> hinzu. Diese Methode dient dazu, dass mehrere Runden (<code>rounds</code>) gespielt werden kann. Hier wird dann mehrfach <code>bet_under_square</code> ausgef\u00fchrt.</p> <p>Diese Methode <code>play_game</code> bittet den Nutzer um einen Einsatz (der maximal die H\u00f6he seines Geldes <code>money</code> betragen darf).</p> <p>Dann fragt <code>play_game</code> und um einen vom Nutzer gew\u00e4hlten Faktor. Mit diesem Einsatz und Faktor wird die <code>bet_under_square</code> Methode ausgef\u00fchrt und das Ergebnis mit zum momentanen Geld hinzugef\u00fcgt.</p> <p><code>rounds</code> soll defaultm\u00e4\u00dfig auf 5 gesetzt sein. <code>money</code> soll defaultm\u00e4\u00dfig auf 10 gesetzt sein.</p> L\u00f6sung <pre><code>from secure_input import input_int_in_between\nfrom my_random import random_squares\n\ndef play_game(rounds=5, money=10):\n    for i in range(rounds):\n        print(f\"Round {i}. Money={money}\")\n        bet = input_int_in_between(\"Wie viel Geld willst du setzen?\", 0, money)\n        money -= bet\n        faktor = input_int_in_between(\"Welchen Faktor willst du?\", 1, 10 ** 100)\n        money += bet_under_squares(bet, faktor)\n        if not money:\n            break\n    else:\n        print(f\"Du hast {money} gewonnen\")\n        return\n\n    print(\"Leider alles verzockt\")\n</code></pre>"},{"location":"content/packages/packages/","title":"Module und Pakete","text":"<p>In Python erm\u00f6glichen Module und Pakete die Organisation von Code in wiederverwendbare Einheiten, um die Lesbarkeit zu verbessern und die Codeverwaltung zu optimieren.</p>"},{"location":"content/packages/packages/#pakete","title":"Pakete","text":"<p>Packages (deutsch: \"Pakete\") sind Verzeichnisse, die Module und m\u00f6glicherweise Unterpakete enthalten.</p>"},{"location":"content/packages/packages/#wofur-braucht-man-pakete","title":"Wof\u00fcr braucht man Pakete?","text":"<p>Set the stage for PyPi!</p> <p>PyPI ist ein Online-Repository f\u00fcr \u00f6ffentliche Python-Pakete. Entwickler k\u00f6nnen Pakete ver\u00f6ffentlichen, die jeder installieren und verwenden kann. F\u00fcr jedes Paket gibt es hier eine Installationsanleitung, eine Beschreibung, Versionshinweise und Informationen zu Abh\u00e4ngigkeiten.</p>"},{"location":"content/packages/packages/#zusatz-erkunde-pypi","title":"Zusatz: Erkunde PyPI","text":"<p>Besuche PyPi undschau dich um, suche nach einem beliebten Paket, zum Beispiel <code>requests</code>.</p>"},{"location":"content/packages/packages/#pakete-selber-packen","title":"Pakete selber packen","text":"<p>Ein Package enth\u00e4lt immer eine <code>__init__.py</code>. Diese zeigt an, dass es sich bei dem Ordner um ein Python Package handelt.</p> <pre><code>my_package/\n|-- __init__.py\n|-- module1.py\n|-- module2.py\n|-- subpackage/\n|   |-- __init__.py\n|   |-- module3.py\n</code></pre> T\u00fcren auf in unserem Casino <p>Unsere Casino-module aus Module sollen jetzt in ein eigenes erstes Paket umgewandelt werden. Hierzu erstellen wir einen Ordner <code>my_casino</code> und f\u00fcge alle bisher erstellten Dateien darin ein.</p> <p>Zus\u00e4tzlich erstellen wir eine Datei <code>__init__.py</code> ohne Inhalt.</p> <p>Die Ordnerstruktur sieht danach wie folgt aus:</p> <pre><code>my_casino/\n|-- __init__.py\n|-- casino_games.py\n|-- my_random.py\n|-- secure_input.py\n</code></pre> <p>In den Modulen (Files) wirst du die imports umbenennen m\u00fcssen.</p> <pre><code>from my_casino.secure_input import input_int_in_between\nfrom my_casino.my_random import random_squares\n</code></pre> <p>\u00d6ffne nun eine Pythonkonsole und f\u00fchre die folgenden Befehle aus:</p> <pre><code>&gt;&gt;&gt; from my_casino.casino_games import play_game\n&gt;&gt;&gt; play_game()\n</code></pre> <p>Auf gehts!\ud83e\udd11\ud83d\udcb0</p> L\u00f6sung <pre><code>from my_casino.secure_input import input_int_in_between\nfrom my_casino.my_random import random_squares\n\n\ndef bet_under_squares(my_bet, faktor):\n    random_square = random_squares(faktor)\n    print(f\"Randomly roled:{random_square}\")\n    return 0 if my_bet &lt; random_square else faktor * my_bet\n\n\ndef play_game(rounds=5, money=10):\n    for i in range(rounds):\n        print(f\"Round {i}. Money={money}\")\n        bet = input_int_in_between(\"Wie viel Geld willst du setzen?\", 0, money)\n        money -= bet\n        faktor = input_int_in_between(\"Welchen Faktor willst du?\", 1, 10 ** 100)\n        money += bet_under_squares(bet, faktor)\n        if not money:\n            break\n    else:\n        print(f\"Du hast {money} gewonnen\")\n        return\n\n    print(\"Leider alles verzockt\")\n</code></pre>"},{"location":"content/packages/packages/#zusatz-noch-mal-auf-englisch","title":"Zusatz: Noch mal auf Englisch \ud83d\udcfa","text":"<p>Das folgende Video von NeuralNine  fasst die Inhalte dieses Kapitels zusammen und vertieft sie. Schau dir das Video an und stell mit deinem Tutor sicher, dass du alle Inhalte verstehst.</p> Video <p> </p> <p>Auch 2MinutesPy hat ein sch\u00f6nes Video zu <code>__init__.py</code>:</p> Video <p> </p>"},{"location":"content/packages/packages/#was-ist-name-main","title":"Was ist Name == Main?","text":"Video <p>Wenn wir die folgende Datei <code>greetings.py</code> ausf\u00fchren</p> <pre><code># greetings.py\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\ngreet(\"Gustav\")\n</code></pre> <p>so erhalten wir auf der Konsole folgenden Output:</p> <pre><code>\"Hello, Gustav\"\n</code></pre> <p>Wenn wir diese Datei jedoch importieren, so wird die Methode <code>greet(\"Gustav\")</code> auch ausgef\u00fchrt:</p> <pre><code>from greetings.py import greet\n\ngreet(\"Hanna\")\n</code></pre> <p>Konsolenausgabe</p> <pre><code>\"Hello, Gustav\"\n\"Hello, Hanna\"\n</code></pre> <p>Genau hierf\u00fcr gibt es die Bedingung <code>if __name__ == \"__main__\":</code>. Sie erm\u00f6glicht es, Code in einem Modul auszuf\u00fchren, wenn es direkt ausgef\u00fchrt wird, aber nicht, wenn es in einem anderen Skript importiert wird. </p> <p>Die Variable <code>__name__</code> ist eine besondere Variable in Python, die, je nachdem, wie ein Python-Skript verwendet wird, einen unterschiedlichen Wert annehmen kann. Es gibt zwei Hauptkontexte, in denen ein Python-Skript ausgef\u00fchrt werden kann: entweder als Hauptprogramm oder als Modul, das in ein anderes Skript importiert wird.</p> <ol> <li>Wenn das Skript direkt ausgef\u00fchrt wird, setzt Python die Variable name auf den Wert \"main\".</li> <li>Wird das Skript jedoch importiert und in einem anderen Skript verwendet, wird name auf den Namen des Skripts (genauer gesagt: auf den Namen des Moduls) gesetzt.</li> </ol> <p>Diese Unterscheidung ist besonders n\u00fctzlich, um zu bestimmen, welcher Code ausgef\u00fchrt werden soll, je nachdem, ob das Skript direkt gestartet oder als Modul importiert wird</p> <pre><code># greetings.py\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nif __name__ == \"__main__\":\n    print(greet(\"Gustav\"))\n</code></pre> <p>F\u00fchren wir die Datei <code>greetings.py</code> aus, erhalten wir weiterhin: <pre><code>\"Hello, Gustav\"\n</code></pre></p> <p>Wenn wir <code>greetings.py</code> aber nun importieren ... <pre><code>from greetings.py import greet\n\ngreet(\"Hanna\")\n</code></pre></p> <p>erhalten wir auch die gew\u00fcnschte Konsolenausgabe:</p> <pre><code>\"Hello, Hanna\"\n</code></pre>"},{"location":"content/pandas/add_and_remove_data/","title":"Daten entfernen & hinzuf\u00fcgen","text":"<p>Eine typische Aufgabe bei der Arbeit mit <code>DataFrames</code> ist es neue Daten hinzuzuf\u00fcgen um das <code>DataFrame</code> zu erweitern, oder auch bestimmte Daten entfernen.</p>"},{"location":"content/pandas/add_and_remove_data/#spalten-entfernen-dropping-columns","title":"Spalten entfernen (dropping columns)","text":"<p>Manchmal m\u00f6chte man bestimmte Spalten entfernen. Dazu verwendet man die Methode <code>drop()</code>. Innerhalb der Muss man durch den Parameter <code>axis</code> festlegen ob entweder eine Reihe <code>axis=0</code> oder eine Spalte <code>axis=1</code> angesprochen werden soll</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Drop one column\nprint(df.drop(labels=\"Discount\", axis=1))\n</code></pre></p> <p>Wenn man jetzt jedoch durch <code>print(df)</code> das <code>DataFrame</code> ausgibt, sieht man keine \u00c4nderung. Damit die \u00c4nderung auf das aktuelle <code>DataFrame</code> vorgenommen wird, muss man den <code>inplace=True</code> Parameter verwenden</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Drop one column and save the change\ndf.drop(labels=\"Discount\", axis=1, inplace=True)  \nprint(df)\n</code></pre></p> <p>H\u00e4ufig m\u00f6chte man \u00c4nderungen am <code>DataFrame</code> vornehmen und dabei soll diese \u00c4nderung gespeichert werden. Hierzu muss man  den Parameter <code>inplace</code> verwenden, er aktualisiert das <code>DataFrame</code>.</p>"},{"location":"content/pandas/add_and_remove_data/#zeilen-entfernen-dropping-rows","title":"Zeilen entfernen (dropping rows)","text":"<p>\u00c4hnlich wie bei der Entfernung von Spalten kann man auch Zeilen entfernen. Mit dem unterschied dass man nun den Parameter <code>axis</code> nicht angeben muss, da er standartm\u00e4\u00dfig auf 0 gesetzt ist. Dem Parameter <code>labels</code> muss man den Index, welcher die Zeile repr\u00e4sentiert, \u00fcbergeben. Der Index kann dabei ein Integer sein oder auch ein keyword.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df) \n# Drop two rows\ndf.drop(labels=[2, 6], axis=0, inplace=True)  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/add_and_remove_data/#spalte-erstellen","title":"Spalte erstellen","text":"<p>Man kann beliebig viele Spalten zu dem aktuellen <code>DataFrame</code> hinzuf\u00fcgen und die Werte aus anderen Spalten ausrechnen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Create a new column and calculate the values df[\"Total cost\"] = 1250 + df[\"Fee\"]  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/add_and_remove_data/#zeile-erstellen","title":"Zeile erstellen","text":"<p>Durch die Nutzung der <code>loc</code> Methode kann man eine Zeile am Ende des <code>DataFrames</code> einsetzen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Create a list with data, which should be appended to df  \nrow_to_add = [\"C++\", 21000, \"33days\", None]  \n# Append list to df  \ndf.loc[len(df)] = row_to_add  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/add_and_remove_data/#werte-andern-mit-at","title":"Werte \u00e4ndern mit \"at\"","text":"<p>Durch die <code>at</code> Methode kann man durch Angabe des Index und des Spaltennamens auf einen Wert zugreifen und ihn \u00e4ndern.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \ndf.at[5, \"Fee\"] = 35000  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/add_and_remove_data/#werte-andern-mit-iat","title":"Werte \u00e4ndern mit \"iat\"","text":"<p>\u00c4hnlich wie bei der <code>at</code> Methode kann man im <code>DataFrame</code> einen Wert \u00e4ndern mit dem unterschied dann man nur Integer verwendet um die Position des Wertes anzugeben. Die erste Zahl gibt die Zeile an und die zweite Zahl die Spalte.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \ndf.iat[3, 2] = \"53days\"  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/clean_dataframes/","title":"DataFrames bereinigen","text":"<p>Um die Qualit\u00e4t eines <code>DataFrames</code> sicherzustellen muss man einige Punkte beachten: - Was macht man mit nicht vorhandenen Werten? - Sind Duplikate vorhanden?</p>"},{"location":"content/pandas/clean_dataframes/#nicht-vorhandene-werte-in-zeilen-entfernen","title":"Nicht vorhandene Werte in Zeilen entfernen","text":"<p>H\u00e4ufig hat man innerhalb des <code>DataFrames</code> Werte, welche nicht vorhanden sind bzw. Null sind. Das Ziel ist es dann Zeilen welche keinen Wert haben zu  entfernen (dropp rows).</p> <p>Die Methode <code>isnull()</code> gibt ein <code>DataFrame</code> zur\u00fcck, wo alle Werte welche nicht vorhanden sind mit <code>True</code> ersetzt werden und alle Werte die vorhanden  sind mit <code>False</code>.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nfiltered = df.isnull()  \nprint(filtered)\n</code></pre></p> <p>Es w\u00e4re jedoch interessanter zu sehen wie viele Werte nicht Vorhanden bzw. Null sind. Man m\u00fcsste also alle <code>True</code> Werte lesen. Dazu verwendet man die Methode <code>sum()</code>: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nfiltered = df.isnull()  \nprint(filtered.sum())\n</code></pre></p> <p>Um jetzt das <code>DataFrame</code> zu updaten, damit die nicht vorhanden Werte entfernt sind (dropp missing values), nutzt man die <code>dropna()</code> Methode. Innerhalb der <code>dropna()</code> Methode wird ein Parameter angegeben, welcher Aussagt welche Werte gel\u00f6scht werden sollen. In unserem Fall alles was <code>True</code> ist, weil die nicht vorhanden Werte mit <code>True</code> gekennzeichnet wurden: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", None],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \nprint(\"----------------\")  \ndf.dropna(inplace=True)  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/clean_dataframes/#duplikate-entfernen","title":"Duplikate entfernen","text":"<p>H\u00e4ufig m\u00f6chte man Duplikate innerhalb einer Spalte entfernen: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", None],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \ndf.drop_duplicates(subset=\"Courses\", inplace=True)  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/export_dataframes/","title":"Export von DataFrames","text":"<p>Es kann vorkommen dass man sein <code>DataFrame</code> in einer separaten Datei ausgeben m\u00f6chte, um sie wo anders weiter zu verwenden. Dazu gibt es einige M\u00f6glichkeiten.</p>"},{"location":"content/pandas/export_dataframes/#output-to-csv","title":"Output to CSV","text":"<p>Mann kann ein DataFrame als eine CSV-Datei exportieren: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Replace True with 1 and False with 0 inside the Chrun Binary column  \ndf[\"Churn Binary\"] = df[\"Churn\"].apply(lambda x: 1 if x==True else 0)  \n# Export DataFrame as CSV\ndf.to_csv(\"output.csv\")\n</code></pre></p>"},{"location":"content/pandas/export_dataframes/#output-to-json","title":"Output to JSON","text":"<p>Mann kann ein DataFrame als eine JSON-Datei exportieren: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Replace True with 1 and False with 0 inside the Chrun Binary column  \ndf[\"Churn Binary\"] = df[\"Churn\"].apply(lambda x: 1 if x==True else 0)  \n# Export DataFrame as CSV\ndf.to_json(\"output.csv\")\n</code></pre></p>"},{"location":"content/pandas/export_dataframes/#output-to-html","title":"Output to HTML","text":"<p>Mann kann ein DataFrame als eine html-Datei exportieren: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Replace True with 1 and False with 0 inside the Chrun Binary column  \ndf[\"Churn Binary\"] = df[\"Churn\"].apply(lambda x: 1 if x==True else 0)  \n# Export DataFrame as CSV\ndf.to_html(\"output.csv\")\n</code></pre></p>"},{"location":"content/pandas/filter_dataframes/","title":"Filtern von DataFrames","text":"<p>Oft m\u00f6chte man ein <code>DataFrame</code> nach bestimmten Bedingungen filtern, dies ist sehr einfach und l\u00e4sst viel Spielraum. Dazu verwendet man die booleschen Operationen, um seine Aufgaben zum Filtern, zu bewerkstelligen.</p> <p>Bei den Beispielen wird eine  Datensammlung \u00fcber Avocados aus dem Jahre 2018 verwendet, hier findet man die dazugeh\u00f6rige CSV-Datei: Avocado Daten</p>"},{"location":"content/pandas/filter_dataframes/#filtern-mit-isin","title":"Filtern mit isin()","text":"<p>Durch die Methode <code>isin()</code> kann man Daten Filtern, indem man der Methode eine Liste \u00fcbergibt, welche Werte enth\u00e4lt, die gefiltert werden sollen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nfiltered = df[\"type\"].isin([\"conventional\"])  \nprint(df[filteres].to_string())\n</code></pre></p> <p>Das w\u00e4re die Alternative ohne die Nutzung von <code>isin()</code>: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nfiltered = df[\"type\"] == \"conventional\"  \nprint(df[filtered])\n</code></pre></p> <p>Als erstes erstellt man eine Variable wo nur <code>boolsche</code> Werte drine sind. Anschlie\u00dfend setzt man diese Wahrheitswerte in das <code>DataFrame</code> ein um die Werte mit <code>False</code> auszublenden.</p>"},{"location":"content/pandas/merge_dataframes/","title":"DataFrames zusammenf\u00fcgen","text":"<p>In der Praxis kann es schnell passieren dass die Daten \u00fcber mehrere <code>DataFrames</code> verteilt sind weil sich z.B. die Daten in unterschiedlichen CSV-Dateien befinden. Dann hat man h\u00e4ufig die Aufgabe die <code>DataFrames</code> zusammen zu f\u00fcgen.</p>"},{"location":"content/pandas/merge_dataframes/#zusammenfugen-mit-merge","title":"Zusammenf\u00fcgen mit merge()","text":"<p>Mit der Methode <code>merge()</code> lassen sich zwei DataFrames vereinigen zu einem neuen DataFrame.</p> <p>Dazu m\u00fcssen folgende Parameter beachtet werden:</p> <ul> <li><code>left</code>: Hier wird das DataFrame angegeben,  welches als Ausgangspunkt dient f\u00fcr eine Vereinigung</li> <li><code>right</code>: Hier wird das DataFrame angegeben, welches mit dem anderen DataFrame zu vereinigen ist</li> <li> <p><code>on</code>: Anhand welcher Spalte soll die Verschmelzung durchgef\u00fchrt werden</p> <p>Beispiel: <pre><code>import pandas as pd\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\n\nstudent_df = pd.DataFrame({  \n    \"Roll No\": [500, 501, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    'Gender':  [\"Female\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\"],  \n    'Age': [17, 18, 17, 16, 18, 16]  \n})  \n\ngrades_df = pd.DataFrame({  \n    \"Roll No\": [501, 502, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    \"Grades\": [\"A\", \"B+\", \"A-\", \"A\", \"B\", \"A+\"]  \n})  \n\nprint(student_df)  \nprint(grades_df)  \n\ndf_merged = pd.merge(left=student_df, right=grades_df, on=\"Name\")  \nprint(df_merged)\n</code></pre></p> </li> </ul> <p>Im obigen Beispiel wird das \"linke\" <code>DataFrame</code> herangenommen und die Spalte \"Roll No\" wird in \"Roll No_x\" unbenannt weil sie in beiden DataFrames vorkommt.  Es soll ja \u00fcber die Spalte Name zusammengef\u00fcgt werden, deswegen wird von beiden DataFrames die Spalte \"Name\" verglichen und falls die Werte in beiden Spalten vorhanden sind werden sie \u00fcbernommen. Die Spalte \"Gender\" und \"Age\" wird einfach \u00fcbernommen weil sie nicht im rechten DataFrame vorkommt. Im rechten DataFrame wird die Spalte \"Roll No\" mit dem Suffix \"y\" versehen weil sie in beiden <code>DataFrames</code> vorkommt und bekommt die neue Bezeichnung \"Roll No_y\". Anschlie\u00dfend wird sie in das neue DataFrame \u00fcbernommen. Ebenfalls wird die Spalte \"Grades\" einfach \u00fcbernommen weil sie nicht im linken DataFrame vorkommt.</p> <p>Es ist auch m\u00f6glich den Parameter <code>on</code> nicht zu definieren, also <code>on=None</code> zu setzen. Wenn dass der Fall ist wird die Schnittmenge jeder Spalte gebildet. Dies geschieht folgenderma\u00dfen: Die Zeilen 1 bis 5 kommen sowohl im linken als auch rechten DataFrame vor, dabei Stimmen die Werte aus den Spalten \"Roll No\", \"Name\" und \"Gender\" \u00fcberein. Die nicht vorhandenen Spalten \"Age\" und \"Grades\" werden \u00fcbernommen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\nstudent_df = pd.DataFrame({  \n    \"Roll No\": [500, 501, 503, 504, 505, 506, 507],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\", \"Paul\"],  \n    'Gender':  [\"Female\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Male\"],  \n    'Age': [17, 18, 17, 16, 18, 16, 15]  \n})  \n\ngrades_df = pd.DataFrame({  \n    \"Roll No\": [501, 502, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    \"Grades\": [\"A\", \"B+\", \"A-\", \"A\", \"B\", \"A+\"]  \n})  \n\nprint(student_df)  \nprint(grades_df)  \n\ndf_merged = pd.merge(left=student_df, right=grades_df, on=None)  \nprint(df_merged)\n</code></pre></p> <ul> <li><code>how</code>: Hier wird die Art der Vereinigung angegeben (Angabe nicht notwendig). Man unterscheidet zwischen:<ul> <li>left</li> <li>right</li> <li>inner</li> <li>outer</li> </ul> </li> </ul> <p>Die folgende Grafik erkl\u00e4rt die unterschiedlichen Vereinigungen. Dabei sind mit gr\u00fcner Farbe die Werte der einzelnen Spalten gemeint: </p> <p>Folgende Grafiken k\u00f6nnen zum Verst\u00e4ndnis beitragen:  </p> <p>Beispiel: <pre><code>import pandas as pd  \n\nstudent_df = pd.DataFrame({  \n    \"Roll No\": [500, 501, 503, 504, 505, 506, 507],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\", \"Paul\"],  \n    'Gender':  [\"Female\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Male\"],  \n    'Age': [17, 18, 17, 16, 18, 16, 15]  \n})  \n\ngrades_df = pd.DataFrame({  \n    \"Roll No\": [501, 502, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    \"Grades\": [\"A\", \"B+\", \"A-\", \"A\", \"B\", \"A+\"]  \n})  \n\nprint(student_df)  \nprint(grades_df)  \n\ndf_merged = pd.merge(left=student_df, right=grades_df, on=None, how=\"outer\")  \nprint(df_merged)\n</code></pre></p> <p>Hier wurde <code>on=\"outer\"</code> verwendet, wie man in der Grafik sieht wird die Vereinigungsmenge der beiden DataFrames gebildet. In dem neuen DataFrame kommen also alle Werte vom linken und rechten DataFrame vor.</p> <ul> <li><code>suffixes</code>: Wir hatten bereits gesehen wie ein Suffix zu Spaltennamen hinzugef\u00fcgt wird (\"Roll No_x\" und \"Roll No_y\"). Mit diesem Parameter k\u00f6nnen wir einen individuellen Suffix erstellen.</li> </ul> <p>Beispiel: <pre><code>import pandas as pd  \n\npd.set_option(\"display.max_rows\", None)  \npd.set_option(\"display.max_columns\", None)  \n\nstudent_df = pd.DataFrame({  \n    \"Roll No\": [500, 501, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    'Gender': [\"Female\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\"],  \n    'Age': [17, 18, 17, 16, 18, 16]  \n})  \n\ngrades_df = pd.DataFrame({  \n    \"Roll No\": [501, 502, 503, 504, 505, 506],  \n    'Name': [\"Jennifer\", \"Travis\", \"Bob\", \"Emma\", \"Luna\", \"Anish\"],  \n    \"Grades\": [\"A\", \"B+\", \"A-\", \"A\", \"B\", \"A+\"]  \n})  \n\nprint(student_df)  \nprint(grades_df)  \n\ndf_merged = pd.merge(left=student_df, right=grades_df, on=\"Name\", suffixes=(\" left_table\", \" right_table\"))  \nprint(df_merged)\n</code></pre></p>"},{"location":"content/pandas/merge_dataframes/#zusammenfugen-mit-join","title":"Zusammenf\u00fcgen mit join()","text":"<p><code>join()</code>\u00a0verkn\u00fcpft Daten nicht aufgrund von Spalten, sondern ausschlie\u00dflich am Index.</p> <p>Beispiel: <pre><code>import pandas as pd  \ndf = pd.DataFrame({'Name' : [\"Peter\", \"Karla\", \"Anne\", \"Nino\", \"Andrzej\"],  \n                   'Geschlecht': ['M','W','W','M','M'],  \n                   'Alter': [34, 53, 16, 22, 61],  \n                   'Nationalit\u00e4t': [\"deutsch\", \"schweizerisch\", \"deutsch\", \"italienisch\", \"polnisch\"],  \n                   'Gehalt': [3400, 4000, 0, 3000, 2300]},  \n                  index = ['ID-123', 'ID-462', 'ID-111', 'ID-997', 'ID-707'])  \n\n\nwohnort = pd.DataFrame({'Wohnort': ['Paderborn', 'Kassel', 'Berlin', 'Aachen', 'Bremen'],  \n                           'ID': ['ID-462', 'ID-111', 'ID-123', 'ID-997', 'ID-707']})  \n\nprint(df)  \nprint()  \nprint(wohnort)  \n\nwohnort_with_id_as_index = wohnort.set_index('ID')  \ndf_joinded = df.join(wohnort_with_id_as_index)  \nprint()  \nprint(df_joinded)\n</code></pre></p>"},{"location":"content/pandas/merge_dataframes/#zusammenfugen-mit-concat","title":"Zusammenf\u00fcgen mit concat()","text":"<p>Mit <code>concat()</code> hat man die M\u00f6glichkeit mehr als drei DataFrame mit einander zu vereinigen.</p> <p>Beispiel: <pre><code>import pandas as pd  \ndf = pd.DataFrame({'Name' : [\"Peter\", \"Karla\", \"Anne\", \"Nino\", \"Andrzej\"],  \n                   'Geschlecht': ['M','W','W','M','M'],  \n                   'Alter': [34, 53, 16, 22, 61],  \n                   'Nationalit\u00e4t': [\"deutsch\", \"schweizerisch\", \"deutsch\", \"italienisch\", \"polnisch\"],  \n                   'Gehalt': [3400, 4000, 0, 3000, 2300]},  \n                  index = ['ID-123', 'ID-462', 'ID-111', 'ID-997', 'ID-707'])  \n\n\nwohnort = pd.DataFrame({'Wohnort': ['Paderborn', 'Kassel', 'Berlin', 'Aachen', 'Bremen'],  \n                           'ID': ['ID-462', 'ID-111', 'ID-123', 'ID-997', 'ID-707']})  \n\nberuf = pd.DataFrame({'Beruf': ['Schreiner','Maler','DataScientist','Makler','Banker']},  \n                     index = ['ID-123', 'ID-462', 'ID-111', 'ID-997', 'ID-707'])  \n\nwohnort_with_id_as_index = wohnort.set_index('ID')  \n\nconcated_df = pd.concat([df, wohnort_with_id_as_index, beruf], axis=1, sort=False)  \n\nprint(concated_df)\n</code></pre></p>"},{"location":"content/pandas/pandas/","title":"Einf\u00fchrung","text":"<p>In R sind DataFrames ein direkter Bestandteil der Sprache. In Python gibt es keine eingebaute Datenstruktur, die einem DataFrame entspricht. Jedoch gibt es die Bibliothek <code>pandas</code>, die eine Datenstruktur namens <code>DataFrame</code> bereitstellt, die \u00e4hnlich zu einem DataFrame in R ist.</p>"},{"location":"content/pandas/pandas/#was-ist-pandas","title":"Was ist Pandas?","text":"<p>Pandas ist eine Open-Source-Bibliothek, die in Python geschrieben wurde und die Datenmanipulation und -analyse erleichtert. Die Bibliothek basiert dabei auf Numpy, welches eine weitere Bibliothek ist, die in Python f\u00fcr numerische Berechnungen verwendet wird.</p>"},{"location":"content/pandas/pandas/#erste-schritte-mit-pandas","title":"Erste Schritte mit Pandas","text":"<p>Wir k\u00f6nnen Pandas beispielsweise verwenden, um Daten aus einer CSV-Datei zu lesen und in einem DataFrame zu speichern. In Pandas werden zwei neue Datenstrukturen eingef\u00fchrt: <code>DataFrames</code> und <code>Series</code>. Am Anfang werden wir uns mit der Datenstruktur <code>dataframes</code> auch mit <code>df</code> abgek\u00fcrzt, vertraut machen.</p> <p>Bevor man mit der Pandas-Bibliothek arbeiten kann, muss man sie importieren. Da es sich nicht um eine eingebaute Bibliothek handelt, muss man sie zun\u00e4chst installieren. Nicht vergessen die Dokumentation zu dieser Bibliothek zu lesen!</p> <p>Note</p> <p>Die nachfolgenden Datens\u00e4tze k\u00f6nnen hier heruntergeladen werden.</p> <p>Erste Schritte: <pre><code>import pandas\n\nurl = \"https://raw.githubusercontent.com/laxmimerit/All-CSV-ML-Data-Files-Download/master/bigmac.csv\"\ndata = pd.read_csv(url, sep=\",\", encoding=\"utf-8\")\n\nprint(data)\n\ncountries = data[\"Country\"]\nprint(\"# ------------------------------------ #\")\nprint(countries)\n</code></pre></p> <p>In Pandas haben wir zwei wichtige Datentypen:</p> <ul> <li>dataframe, es ist \u00e4quivalent zur Tabelle wie im ersten Beispiel.</li> <li>series, es ist eine Spalte wie eine Liste</li> </ul> <p>Wenn man diese beiden Datentypen versteht, dann ist man auf einem guten Weg, diese Bibliothek zu verstehen! Zu Beginn des Lernens von Pandas sollte man sich die zwei Klassen \"DataFrame\" und \"Series\" genauer ansehen (Dokumentation).</p> <p>Berechnen wir als erstes mittel der <code>pandas</code> Bibliothek den durchschnittlichen Preis eines Big Macs in den verschiedenen L\u00e4ndern:</p> <pre><code>...\naverage_price = data[\"Price in US Dollars\"].mean()\nprint(average_price)\n</code></pre> H\u00f6chsten Preis finden <p>Finden Sie den h\u00f6chsten Preis f\u00fcr einen BicMac ```</p> L\u00f6sung <p><code>{ .python .pytutor_button } df[\"Price in US Dollars\"].max()</code></p> <p>Manchmal m\u00f6chte man einfach nur eine Zeile der Tabelle erhalten: <pre><code>row_day = data[data[\"Country\"] == \"Germany\"]\nprint(row_day)\n</code></pre></p> <p>Oder man m\u00f6chte die Reihe mit dem h\u00f6chsten Preis finden: <pre><code>max_price = data[\"Price in US Dollars\"].max()\n\nrow_max_price = data[data[\"Price in US Dollars\"] == max_price]\nprint(row_max_price)\n</code></pre></p> <p>Wir k\u00f6nnen auch eine neue Spalte erstellen, in der die Preise in \u20ac umgerechnet stehen:</p> <pre><code>...\ndata[\"Price in EUR\"] = data[\"Price in US Dollars\"] * 1.09\n</code></pre> <p>Man kann auch einen <code>dataframe</code> von Grund auf neu erstellen: <pre><code>import pandas\n# You have given data:\ndata_dict = {\n    \"students\": [\"Amy\", \"James\", \"Angela\"],\n    \"scores\": [76, 56, 65]\n}\n# We have to create a data frame from this dictionary\ndata = pandas.DataFrame(data_dict)\nprint(data)\n# We can even convert our data frame to a csv\ndata.to_csv(\"new_data.csv\")\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/","title":"Lesen von DataFrames","text":"<p>Sehr h\u00e4ufig m\u00f6chte man nicht das ganze <code>DataFrame</code> lesen, sondern nur bestimmte Teile wie z.B. Spalten, Reihen, die ersten oder letzten f\u00fcnf Werte und so weiter.</p> <p>Bei den Beispielen wird eine  Datensammlung \u00fcber Avocados aus dem Jahre 2018 verwendet, hier findet man die dazugeh\u00f6rige CSV-Datei: Avocado Daten</p>"},{"location":"content/pandas/read_dataframes/#dataframe-anzeigenausgeben","title":"DataFrame anzeigen/ausgeben","text":"<p>Mit der bereits bekannten Funktion <code>print()</code> l\u00e4sst sich ein <code>DataFrame</code> ausgeben:</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df)\n</code></pre></p> <p>Wenn man eine IDE wie Pycharm verwendet, kann es sein dass die gesamten Daten in der Konsole nicht ausgegeben werden. Die Ursache daf\u00fcr liegt in einem zu gro\u00dfen <code>DataFrame</code>, weswegen in der Konsole kein Platz f\u00fcr die Anzeige vorhanden ist. </p> <p>Um die Ausgabe zu erm\u00f6glichen verwendet man h\u00e4ufig die Methode <code>to_string()</code>, um das <code>DataFrame</code> in den Datentyp String zu konvertieren. Dadurch kann man manchmal das gesamte <code>DataFrame</code> in der Konsole darstellen:</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \n# Convert DataFrame in string  \ndf_as_string = df.to_string()  \n# Display the converted DataFrame  \nprint(df_as_string)  \n# Display the type of the convertet DataFrame  \nprint(type(df_as_string))\n</code></pre></p> <p>Falls man Jupyter Notebook verwendet, kann man durch die folgenden Einstellungen das gesamte <code>DataFrame</code> ausgeben lassen:</p> <pre><code>pd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\",\u00a0None)\n</code></pre>"},{"location":"content/pandas/read_dataframes/#die-ersten-funf-zeilen-ausgeben","title":"Die ersten f\u00fcnf Zeilen ausgeben","text":"<p>Unter der Nutzung der <code>head()</code> Methode zusammen mit der <code>print()</code> Funktion, lassen sich die ersten f\u00fcnf Zeilen ausgeben.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Read first five rows  \nprint(df.head())  \n# Read first ten rows  \nprint(df.head(10))\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#die-letzten-funf-zeilen-ausgeben","title":"Die letzten f\u00fcnf Zeilen ausgeben","text":"<p>Genau wie die <code>head()</code> Methode funktioniert auch die <code>tail()</code> Methode nur eben mit den letzten f\u00fcnf Zeilen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n#  bottom five forws  \nprint(df.tail())\n#  bottom ten forws  \nprint(df.tail(10))\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#spaltennamen-ausgeben","title":"Spaltennamen ausgeben","text":"<p>H\u00e4ufig sind die <code>DataFrames</code> so gro\u00df das man nicht alle Spalten sieht wenn man <code>print()</code>, <code>head()</code> oder <code>tail()</code> verwendet. Deswegen ist es praktisch, wenn man nur die Spaltennamen ausgibt, um sich einen \u00dcberblick zu verschaffen.</p> <p>Dazu ben\u00f6tigt man das Attribut <code>columns</code>.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Read the column names  \nprint(df.columns)\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#datentyp-ausgeben","title":"Datentyp ausgeben","text":"<p>Man kann auch den Datentyp auslesen lassen, indem man das Attribut <code>dtypes</code> verwendet. Dadurch wird eine <code>Serie</code> zur\u00fcckgegeben.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Read the datatypes of the dataframe  \nprint(df.dtypes)\n</code></pre></p> <p>In Pandas werden folgende Datentypen unterschieden:</p> Pandas dtype Python type Usage object str or mixed Text or mixed numeric and non-numeric values int64 int Integer numbers float64 float Floating point numbers bool bool True/False values datetime64 NA Date and time values timedelta[ns] NA Differences between two datetimes category NA Finite list of text values"},{"location":"content/pandas/read_dataframes/#spaltespalten-ausgeben","title":"Spalte/Spalten ausgeben","text":"<p>Man kann sich eine Spalte ausgeben lassen, indem man in eckigen Klammern den Spaltennamen angibt.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Access specific column  \nprint(df[\"State\"])\n</code></pre></p> <p>Eine weitere M\u00f6glichkeit bietet der Punktoperator. Den selben Effekt wie im obigen Beispiel k\u00f6nnen wir erzielen indem wir nach dem Punktoperator der Spaltennamen angeben. Aber Achtung, bei Leerzeilen ist diese Methode nicht m\u00f6glich.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Access specific column  \nprint(df.State)\n</code></pre></p> <p>Es ist auch m\u00f6glich mehrere Spalten zu lesen. Dazu wird einfach eine Liste mit den Spaltennamen der rechteckigen Klammer eines <code>DataFrames</code> \u00fcbergeben.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Create a list of column names, which we like to access  \nlist_of_column_names = [\"State\", \"Area code\", \"Churn\"]  \n# Access multiple column  \nprint(df[list_of_column_names])\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#unterschied-zwischen-einfachen-und-doppelten-eckigen-klammern","title":"Unterschied zwischen einfachen und doppelten eckigen Klammern","text":"<p>Beim Lesen einer Spalte kann man sowohl einfache als auch doppelte eckige Klammern verwendet. Der entscheidende Unterschied liegt im Datentype. Bei den einfachen eckigen Klammern handelt es sich um eine zur\u00fcckgegebene <code>Serie</code> und bei den doppelten eckigen Klammern um ein <code>DataFrame</code>.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Create a list of column names, which we like to access  \nlist_of_column_names = [\"State\", \"Area code\", \"Churn\"]  \n# Single square brackets  \nsingle_square_brackets = df[\"State\"]  \n# Double square brackets  \ndouble_square_brackets = df[[\"State\"]]  \n# Types  \nprint(type(single_square_brackets))  \nprint(type(double_square_brackets))\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#zeilezeilen-ausgeben","title":"Zeile/Zeilen ausgeben","text":"<p>Durch die Nutzung des Slice Operators (Doppelpunkt), kann man sowohl auf eine als auch auf mehrere Zeilen zugreifen. Als R\u00fcckgabe erh\u00e4lt man eine <code>DataFrame</code> welches eine oder mehrere Zeilen enth\u00e4lt.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Display the 3rd row  \nprint(df[3:4])  \n# Display the 4 until 7 row  \nprint(df[4:8])\n</code></pre></p> <p>Eine weit verbreitete M\u00f6glichkeit effektiv auf Zeilen zuzugreifen ist die Nutzung der beiden Methoden <code>iloc</code> und <code>loc</code> (indexing by integers/keywords).</p> <p>Diese Methoden erm\u00f6glichen durch Indizierung den Zugriff auf Zeilen.  Dabei unterscheidet man bei den Indizes zwischen numerischen Werten (integers) und Schl\u00fcsselw\u00f6rtern (keywords).</p>"},{"location":"content/pandas/read_dataframes/#zugriff-durch-iloc-integers","title":"Zugriff durch iloc (integers)","text":"<p>Die Voraussetzung f\u00fcr die Nutzung der <code>iloc</code> Methode ist das vorhanden sein einer nummerischen Indizierung, welche standartm\u00e4\u00dfig eingestellt ist. Als R\u00fcckgabe erh\u00e4lt man eine <code>Series</code>, welche alle Informationen zu der jeweiligen Zeile liefert.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Display the 3rd row  \nprint(df.iloc[3])\n</code></pre></p> <p>Manchmal m\u00f6chte man nicht nur eine bestimmte Zeile \u00fcber den Index ansprechen, sondern auch eine Spalte. Dazu wird ein zweiter Parameter \u00fcbergeben.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Display the value of 3rd row and 1th column  \nprint(df.iloc[3,1])\n</code></pre></p> <p>Man kann auch den <code>slice</code> Operator verwenden um einen bestimmten Bereich anzusprechen (Intervalle).</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Using slice operator to get a range of rows  \nprint(df.iloc[0:3])\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#zugriff-durch-loc-keywords","title":"zugriff durch loc (keywords)","text":"<p>Im Vergleich zu der <code>iloc</code> Methode verwendet man hier anstelle <code>int</code> Indizes bestimmte Schl\u00fcsselw\u00f6rter (keywords) um bestimmte Zeilen auszulesen.</p> <p>Um Jedoch mit der <code>loc</code> Methode arbeiten zu k\u00f6nnen, muss man zuallererst die standartm\u00e4\u00dfige Indizierung mit <code>int</code> Werten \u00e4ndern. Erst dann kann man jede einzelne Zeile ansprechen indem man die keywords der <code>loc</code> Methode \u00fcbergibt.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Set the column \"region\" as the new index \n# \"inplace\" parameter will update current DataFrame \"df\"  \ndf.set_index(\"region\", inplace=True)  \nprint(df)\n</code></pre></p> <p>Nachdem die Index Spalte aus keywords besteht, kann man die Spalten ansprechen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Change index of DataFrame  \ndf.set_index(\"region\", inplace=True)  \n# Display Columns with \"region\" index equal \"WestTexNewMexico\"  \nprint(df.loc[\"WestTexNewMexico\"])\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#informationen-zum-dataframe","title":"Informationen zum DataFrame","text":"<p>Die Methode <code>info()</code> gibt eine kurze Zusammenfassung \u00fcber das jeweilige DataFrame zur\u00fcck. Bei den Informationen handelt es sich um Anzahl der Spalten, Spaltennamen, Spalten Datentypen, Speichernutzung und noch mehr.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Display information about the DataFrame  \nprint(df.info())\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#einzigartige-werte-einer-spalte-unique-values","title":"Einzigartige Werte einer Spalte (unique values)","text":"<p>Mithilfe der Methode <code>unique()</code> kann man eindeutige Werte einer Spalte finden. Sie gibt also jeden Wert der in einer spalte vorkommt einmalig aus, egal ob der jeweilige Wert mehrmals in der entsprechenden Spalte vorkommt. Als Ausgabe erh\u00e4lt man ein Array mit den eindeutigen Werten.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ndata_finance = {  \n   \"name\": [\"William\", \"Emma\", \"Sofia\", \"Markus\", \"Edward\"],  \n    \"region\": [\"East\", \"North\", \"East\", \"South\", \"West\"],  \n    \"sales\": [50000, 52000, 90000, 34000, 42000],  \n    \"expense\": [42000, 43000, 400000, 44000, 38000]  \n}  \n# Create a DataFrame  \ndf = pd.DataFrame(data=data_finance)  \n# Find unique values inside the \"region\" column  \nprint(df[\"region\"].unique())\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#for-schleife-anwenden-loop-a-dataframe","title":"for-Schleife anwenden (loop a DataFrame)","text":"<p>Mit der <code>iterrows()</code> Methode ist es m\u00f6glich jede Zeile eines <code>DataFrames</code> anzusprechen. Die Methode gibt den Index der Zeile und die gesamten Daten der Zeile als\u00a0<code>Series</code>\u00a0zur\u00fcck.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\nexam_data = {  \n    'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n    'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n    'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n    'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \n\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(df)  \n\nfor index, row in df.iterrows():  \n    print(index)  \n    print(row)\n</code></pre></p> <p>Wenn M\u00f6glich sollte man die Nutzung der for-Schleife vermeiden da bei gro\u00dfen Datenmengen die Laufzeit stark zu leiden hat.</p>"},{"location":"content/pandas/read_dataframes/#anzahl-der-spalten-und-zeilen","title":"Anzahl der Spalten und Zeilen","text":"<p>Mit dem Attribut <code>shape</code> kann man in einer Tupel-Form <code>(rows,columns)</code> die Anzahl der Zeilen und Spalten abfragen</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \nprint(df.shape)\n</code></pre></p>"},{"location":"content/pandas/read_dataframes/#anzahl-aller-elemente","title":"Anzahl aller Elemente","text":"<p>Mit dem Attribut <code>size</code> kann man die Anzahl alles Elemente im <code>DataFrame</code> abfragen.</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \nprint(df.size)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/","title":"Series & DataFrames","text":""},{"location":"content/pandas/series_dataframes/#erstellen-von-series","title":"Erstellen von Series","text":"<p>Bei einer <code>Series</code> handelt es sich um ein Objekt, welches eine Sequenz aus Werten und einen damit verbundenen Index enth\u00e4lt.</p> <p>Die Datenstruktur <code>Series</code> ist wie eine standartm\u00e4\u00dfige <code>Liste</code> mit dem Unterschied, dass <code>Series</code> nur Werte eines einzelnen Datentyps enthalten k\u00f6nnen.</p> <p>Das einfachste Beispiel f\u00fcr die Erstellung einer <code>Series</code> ist die Nutzung der Klasse <code>Series</code>.  Dazu muss man eine <code>Liste</code> oder z.B. einen <code>numpy-array</code> dem Objekt der Klasse <code>Series</code> \u00fcbergeben: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \n# Create a Series(-Objekt) from a list or array  \ndata_series_list = Series(my_list)  \n# Display Series  \nprint(data_series_list)\n</code></pre></p> <p>Man kann auch ein <code>Dictionary</code> verwenden um eine <code>Series</code> zu erstellen. Dazu muss man einfach das <code>Dictionary</code> dem <code>Series</code>-Objekt \u00fcbergeben. Dabei werden die <code>keys</code> des <code>Dictionary</code> als Indizes verwendet: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# Create a dictionary  \ncity_population = {  \n    \"Berlin\": 3_669_491,  \n                    \"Hamburg\": 1_847_253,  \n                    \"M\u00fcnchen\": 1_484_226,  \n                    \"K\u00f6ln\": 1_087_863,  \n                    \"Frankfurt am Main\": 763_380,  \n                    \"Stuttgart\": 635_911,  \n                    \"D\u00fcsseldorf\": 621_877,  \n                    \"Leipzig\": 593_145,  \n                    \"Dortmund\": 588_250,  \n                    \"Essen\": 582_760,  \n                    \"Bremen\": 567_559,  \n                    \"Dresden\": 556_780,  \n                    \"Hannover\": 536_925,  \n                    \"N\u00fcrnberg\": 518_370  \n                   }  \n# Create a Series from a dictionary  \ndata_series_dict = Series(data=city_population)  \n# Display the Series  \nprint(data_series_dict)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#indexierung-andern","title":"Indexierung \u00e4ndern","text":"<p>Standartm\u00e4\u00dfig wird jeder Datenpunkt \u00fcber einen Index identifiziert. Dabei f\u00e4ngt der Index bei <code>0</code> an und endet bei <code>Anzahl der Elemente - 1</code>. H\u00e4ufig m\u00f6chte man jedoch eine andere Indexierung der Datenpunkte haben, dazu muss man in das <code>Series</code>(-Objekt) den Parameter <code>index</code> \u00fcbergeben: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Display Series  \nprint(data_series_list)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#bestimmte-werte-ausgeben","title":"Bestimmte Werte ausgeben","text":"<p>Durch die Nutzung eckiger Klammern und der Angabe des Index ist die Ausgabe bestimmter einzelner Werte m\u00f6glich: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Display specific value  \nprint(data_series_list[\"f\"])  \n# Other method with same result  \nprint(data_series_list[2])\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#mehrere-werte-ausgeben","title":"Mehrere Werte ausgeben","text":"<p>M\u00f6chte man mehrere Werte aus einer <code>Series</code> ausgeben, dann muss man die dazugeh\u00f6rigen Indizes in einer Liste \u00fcbergeben. Dadurch entstehen doppelte eckige Klammern. Als R\u00fcckgabe erh\u00e4lt man wieder eine <code>Series</code> die man entweder speichern kann, f\u00fcr weitere Verwendungen, oder einfach nur anzeigen: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Display multiple values, Series will be returned  \nprint(data_series_list[[\"l\", \"j\", \"d\"]])\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#mathematische-operatoren-anwenden","title":"Mathematische Operatoren anwenden","text":"<p>Man kann auf alle Werte einer <code>Series</code> mathematische bzw. logische Operatoren anwenden: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Using mathematical operators  \nprint(data_series_list * 2)  # Double each value  \nprint(data_series_list % 2)  # Check if values are even  \nprint(data_series_list &lt; 10)  # Check which values are less than 10\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#series-filtern","title":"Series filtern","text":"<p>Oft hat man nur Interesse an einer Teilmenge der <code>Series</code>. Manchmal m\u00f6chte man nur Werte gr\u00f6\u00dfer als einen bestimmten Wert haben oder nur ganze Werte und so weiter. Dazu muss man logische Operatoren verwenden um eine <code>Series</code> mit booleschen Werten zu erhalten. Anschlie\u00dfend werden die booleschen Werte in die <code>Series</code> eingesetzt: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Filtering values  \ngreater_than_8_bool = data_series_list &gt; 8  # Firstly create boolean values  \nprint(greater_than_8_bool)  \ngreater_than_8 = data_series_list[greater_than_8_bool]  # Then insert boolean values inside Series  \nprint(greater_than_8)\n</code></pre></p> <p>Weiteres Beispiel: <pre><code>import pandas as pd  \nfrom pandas import Series  \n# A list or array  \nmy_list = [2, 4, 6, 8, 10, 12, 14, 16, 18]  \nmy_index = [\"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]  \n# Create a Series from a list or array  \ndata_series_list = Series(data=my_list, index=my_index)  \n# Filtering values  \n# We will get a Series with only 4 and 8  \ndata_series_list_equal = (data_series_list == 4) | (data_series_list == 8)  # Here we get boolean values  \nprint(data_series_list_equal)  \nprint(data_series_list[data_series_list_equal])  # Display only 4 and 8\n</code></pre></p> <p>Die wohl interessanteste Datenstruktur ist ein <code>DataFrame</code>, denn damit wird man am h\u00e4ufigsten arbeiten. Es handelt sich dabei um eine tabellarische Auftragung zugeh\u00f6riger Daten. Klassischerweise stehen in den Reihen der Tabelle die Einzelmessungen und in den Spalten die festgehaltenen Werte einer Messung.</p> <p>Die Erstellung eines <code>DataFrames</code> kann auf viele Arten erfolgen. Am h\u00e4ufigsten liegt eine Datei wie z.B. eine CSV-Datei vor, welche die zu untersuchenden Daten beinhaltet. Aber auch die Erstellung eines <code>DataFrames</code> aus einem <code>Dictionary</code> oder einer Datenbank ist m\u00f6glich.</p> <p>Bei den Beispielen wird eine  Datensammlung \u00fcber Avocados aus dem Jahre 2018 verwendet, hier findet man die dazugeh\u00f6rige CSV-Datei: Avocado Daten</p>"},{"location":"content/pandas/series_dataframes/#erstellen-aus-einer-csv-datei","title":"Erstellen aus einer CSV-Datei","text":"<p>Dazu wird die Methode <code>read_csv</code> verwendet.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#erstellen-aus-einer-dictionary","title":"Erstellen aus einer Dictionary","text":"<p>Es kann auch mal vorkommen, dass man eine kleine Menge an Daten als ein <code>DataFrame</code> haben m\u00f6chte. Dazu kann man h\u00e4ufig ein eigenes <code>Dictionary</code> erstellen und anschlie\u00dfend daraus ein `DataFrame erstellen.</p> <p>Dabei geht man davon aus dass: - die <code>keys</code> des <code>Dictionary</code> die Spaltennamen sind, - die <code>values</code> des <code>Dictionary</code> die Daten sind, welche als Liste gespeichert sind.</p> <p>Beispiel: <pre><code>import pandas as pd  \n# This Dictionary is given  \ntempdict = {  \n    \"col1\": [1, 2, 3],  \n    \"col2\": [4, 5, 6],  \n    \"col3\": [7, 8, 9]  \n}  \n# Create a dataframe from this dictionary  \ndictdf = pd.DataFrame.from_dict(tempdict)  \nprint(dictdf)\n</code></pre></p>"},{"location":"content/pandas/series_dataframes/#entfernen-eines-dataframe","title":"Entfernen eines DataFrame","text":"<p>Durch das Schl\u00fcsselwort <code>del</code> kann man ein DataFrame l\u00f6schen: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"data_file.csv\")  \n# Replace True with 1 and False with 0 inside the Chrun Binary column  \ndf[\"Churn Binary\"] = df[\"Churn\"].apply(lambda x: 1 if x==True else 0)  \n# Delete the DataFrame\ndel df\n</code></pre></p>"},{"location":"content/pandas/statistic_dataframes/","title":"Statistik mit DataFrames","text":"<p>Die Berechnung statistischer Gr\u00f6\u00dfen ist eine h\u00e4ufige Aufgabe bei der Arbeit mit <code>pandas</code>. Schlie\u00dflich wird <code>pandas</code> in der Daten Analyse und im Data Science Bereich verwendet. Daher sollte man einige grundlegende statistische Funktionalit\u00e4ten von <code>DataFrames</code> kennen.</p> <p>Bei den Beispielen wird eine  Datensammlung \u00fcber Avocados aus dem Jahre 2018 verwendet, hier findet man die dazugeh\u00f6rige CSV-Datei: Avocado Daten</p>"},{"location":"content/pandas/statistic_dataframes/#statistik-des-dataframes-ausgeben","title":"Statistik des DataFrames ausgeben","text":"<p>Um die Daten besser zu verstehen, werden einige Funktionalit\u00e4ten bereitgestellt, um auf statistische Gr\u00f6\u00dfen zugreifen zu k\u00f6nnen. Die Methode <code>describe()</code> erstellt eine Zusammenfassung einiger wichtiger statistischer Gr\u00f6\u00dfen.</p> <p>Jedoch wird diese Methoden nur auf den Datentyp <code>int</code> oder <code>float</code> angewendet: <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Summary statistics of data  \nprint(df.describe())\n</code></pre></p> <p>Manchmal m\u00f6chte man eine Zusammenfassende Statistik nicht nur von <code>float</code>  und <code>int</code> Datentypen haben, sondern auch von Objekten. Um <code>describe()</code> auf Objekte anzuwenden muss man einen Parameter angeben. Wenn man den Parameter <code>include=\"object\"</code> verwendet werden die Datentypen <code>int</code> und <code>float</code> ausgeschlossen.</p> <pre><code>import pandas as pd  \n# Import data from csv-file inside a dataframe  \ndf = pd.read_csv(\"avocado_data.csv\")  \n# Summary statistics of data (non int and float values)  \nprint(df.describe(include=\"object\").to_string())    \n</code></pre>"},{"location":"content/pandas/useful_functions/","title":"N\u00fctzliche Funktionen","text":"<p>Hier werden einige h\u00e4ufig verwendeten Funktionalit\u00e4ten aufgetragen. Bei der Arbeit mit <code>DataFrames</code> kommen sie h\u00e4ufig zum Einsatz um ein gegebenes Problem zu l\u00f6sen.</p>"},{"location":"content/pandas/useful_functions/#daten-gruppieren","title":"Daten gruppieren","text":"<p>Mit der Methode <code>groupby()</code> kann man die Daten anhand einiger Kriterien in gruppen aufgeteilt werden und auch Funktionen auf diese Gruppen angewendet werden</p> <p>Beispiel: <pre><code>import pandas as pd  \n\ntechnologies = {  \n\n    'Courses': [\"Spark\", \"PySpark\", \"Hadoop\", \"Python\", \"Pandas\", \"Hadoop\", \"Spark\", \"Python\", \"NA\"],  \n    'Fee': [22000, 25000, 23000, 24000, 26000, 25000, 25000, 22000, 1500],  \n    'Duration': ['30days', '50days', '55days', '40days', '60days', '35days', '30days', '50days', '40days'],  \n    'Discount': [1000, 2300, 1000, 1200, 2500, None, 1400, 1600, 0]  \n}  \n# Create DataFrame  \ndf = pd.DataFrame(data=technologies)  \nprint(df)  \n# Group DataFrame by \"Courses and calculate sum on \"Fee\" and \"Discount\" columns  \ndf = df.groupby([\"Courses\"]).sum()  \nprint(df)  \n# Display type of grouped DataFrame  \nprint(type(df))\n</code></pre></p>"},{"location":"content/pandas/useful_functions/#dataframe-sortieren","title":"DataFrame sortieren","text":"<p>Mit der Methode <code>sort_values()</code> l\u00e4sst sich eine DataFrame sortieren.</p> <p>Zum Beispiel das Sortieren einer Spalte: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nprint(df.head().sort_values(\"Account length\"))\n</code></pre></p> <p>Wenn man innerhalb der Methode <code>sort_values()</code> das Argument <code>ascending=False</code> setzt, werden die Daten in die andere Richtung sortiert: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nprint(df.head().sort_values(\"Account length\", ascending=False))\n</code></pre></p> <p>Es ist auch m\u00f6glich mehrere Spalten auf einmal zu sortieren. Dazu muss man der Methode <code>sort_values()</code> eine Liste mit den zu sortierenden Spalten \u00fcbergeben: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nprint(df.head().sort_values([\"Account length\", \"Customer service calls\"], ascending=False))\n</code></pre></p> <p>Auch die \u00dcbergabe des Arguments <code>ascending</code> kann durch eine Liste erfolgen, damit jede Spalte unterschiedlich sortiert wird: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"avocado_data.csv\")  \nprint(df.head().to_string())  \nprint(df.head().sort_values([\"Account length\", \"Customer service calls\"], ascending=[False, True]))\n</code></pre></p>"},{"location":"content/pandas/useful_functions/#nutzung-der-apply-methode","title":"Nutzung der \"apply\" Methode","text":"<p>Man kann anstelle einer \"for\"-Loop auch die <code>apply()</code> Methode verwenden: <pre><code>import pandas as pd  \n\nexam_data = {  \n    'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n    'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n    'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n    'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \n\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \ndf[\"Name UpperCase\"] = df[\"name\"].apply(str.upper)  \n\nprint(df)\n</code></pre></p> <p>Hier wird als erstes eine neue Spalte mit den Namen <code>Name UpperCase</code> erstellt. Anschlie\u00dfend wird in jeder Zeile dieser Spalte der Name aus der \"name\"-Spalte gespeichert, jedoch unter der Anwendung der <code>upper</code> Methode.</p>"},{"location":"content/pandas/useful_functions/#funktionen-auf-spaltenzeilen-anwenden","title":"Funktionen auf Spalten/Zeilen anwenden","text":"<p>Mittels der Methode <code>agg</code> kann man benutzerdefinierte- oder built-in Funktionen auf Spalten oder Zeilen anwenden. Am h\u00e4ufigsten erstellt man eine eigene Funktion und m\u00f6chte sie auf eine Zeile anwenden: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"data_file.csv\")  \nprint(df.head(50).to_string())  \n\n\ndef average_account_length(column):  \n    return column.sum() / column.count()  \n\n\naverage_account_length = df[\"Account length\"].agg(average_account_length)  \nprint(f\"The average account legth is: {average_account_length}\")\n</code></pre></p> <p>Es ist auch m\u00f6glich die erstellte Funktion auf mehrere Spalten anzuwenden: <pre><code>import pandas as pd  \n\ndf = pd.read_csv(\"data_file.csv\")  \nprint(df.head(50).to_string())  \n\n\ndef average_calculation(column):  \n    return column.sum() / column.count()  \n\n\naverage_accLength_and_totalDayMinutes = (df[[\"Account length\", \"Total day minutes\"]].agg(average_calculation))  \nprint(f\"The average account length is: {average_accLength_and_totalDayMinutes[0]} and the average total day minutes are: {average_accLength_and_totalDayMinutes[1]}\")\n</code></pre></p> <p>Das Anwenden mehrerer Funktion ist auch m\u00f6glich. Dazu muss man der Methode <code>agg()</code> eine Liste mit Funktionen \u00fcbergeben: <pre><code>import pandas as pd  \nimport numpy as np  \n\ndf = pd.read_csv(\"data_file.csv\")  \nprint(df.head(50).to_string())  \n\n\ndef average_calculation(column):  \n    return column.sum() / column.count()  \n\n\naverageAndmedian_accLength_and_totalDayMinutes = (df[[\"Account length\", \"Total day minutes\"]].agg([average_calculation, np.median]))  \nprint(averageAndmedian_accLength_and_totalDayMinutes)\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/","title":"1 \u00a0Assignment","text":"<p>Write a Pandas program to get the the data inside a DataFrame.</p> <p>Sample data:  <pre><code>{'X':[78,85,96,80,86], 'Y':[84,94,89,83,86],'Z':[86,97,96,72,83]}\n</code></pre></p> <p>Expected Outout: <pre><code>X Y Z  \n0 78 84 86  \n1 85 94 97  \n2 96 89 96  \n3 80 83 72  \n4 86 86 83\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution","title":"Solution","text":"<pre><code>import pandas as pd  \nsample_data = {'X':[78,85,96,80,86], 'Y':[84,94,89,83,86],'Z':[86,97,96,72,83]}  \ndf = pd.DataFrame(sample_data)  \nprint(df)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#2-assignment","title":"2 \u00a0Assignment","text":"<p>Write a Pandas program to create and display a DataFrame from a specified dictionary data which has the index labels.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample Python list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Outout: <pre><code>attempts name qualify score  \na 1 Anastasia yes 12.5  \nb 3 Dima no 9.0  \n.... i 2 Kevin no 8.0  \nj 1 Jonas yes 19.0\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_1","title":"Solution","text":"<pre><code>import pandas as pd  \nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \n\nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(df)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#3-assignment","title":"3 \u00a0Assignment","text":"<p>Write a Pandas program to display a summary of the basic information about a specified DataFrame and its data.</p> <p>Sample Python dictionary: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>Summary of the basic information about this DataFrame and its data:\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 10 entries, a to j\nData columns (total 4 columns):\nattempts    10 non-null int64\nname        10 non-null object\nqualify     10 non-null object\nscore       8 non-null float64\ndtypes: float64(1), int64(1), object(2)\nmemory usage: 400.0+ bytes\nNone\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_2","title":"Solution","text":"<pre><code>import pandas as pd  \nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(\"Summary of the basic information about this DataFrame and its data:\")  \nprint(df.info())\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#4-assignment","title":"4 \u00a0Assignment","text":"<p>Write a Pandas program to get the first 3 rows of a given DataFrame.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>First three rows of the data frame:                                    \n   attempts       name qualify  score                                  \na         1  Anastasia     yes   12.5                                  \nb         3       Dima      no    9.0                                  \nc         2  Katherine     yes   16.5\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_3","title":"Solution","text":"<pre><code>import pandas as pd  \nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(\"First three rows of the data frame:\")  \nprint(df.head(3))\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#5-assignment","title":"5 \u00a0Assignment","text":"<p>Write a Pandas program to select the 'name' and 'score' columns from the following DataFrame.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>Select specific columns:                                               \n        name  score                                                    \na  Anastasia   12.5                                                    \nb       Dima    9.0                                                    \nc  Katherine   16.5                                                    \nd      James    NaN                                                    \ne      Emily    9.0                                                    \nf    Michael   20.0                                                    \ng    Matthew   14.5                                                    \nh      Laura    NaN                                                    \ni      Kevin    8.0                                                    \nj      Jonas   19.0\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_4","title":"Solution","text":"<pre><code>import pandas as pd  \nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(\"Select specific columns: \")  \nprint(df[[\"name\", \"score\"]])\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#6-assignment","title":"6 \u00a0Assignment","text":"<p>Write a Pandas program to select the specified columns and rows from a given data frame. Select 'name' and 'score' columns in rows 1, 3, 5, 6 from the following data frame.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>Select specific columns and rows:\n   score qualify\nb    9.0      no\nd    NaN      no\nf   20.0     yes\ng   14.5     yes\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_5","title":"Solution","text":"<pre><code>import pandas as pd  \n\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \nprint(df.iloc[[1, 3, 5, 6], [1, 3]])\n</code></pre>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#7-assignment","title":"7 \u00a0Assignment","text":"<p>Write a Pandas program to select the rows where the number of attempts in the examination is greater than 2.</p> <p>Sample Python dictionary data: <pre><code>exam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}\n</code></pre></p> <p>Sample list labels: <pre><code>labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n</code></pre></p> <p>Expected Output: <pre><code>Select specific columns:                                               \nNumber of attempts in the examination is greater than 2:\n      name  score  attempts qualify\nb     Dima    9.0         3      no\nd    James    NaN         3      no\nf  Michael   20.0         3     yes\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbung%20Pandas-DataFrame/#solution_6","title":"Solution","text":"<pre><code>import pandas as pd  \n\nexam_data = {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],  \n'score': [12.5, 9, 16.5, \"nan\", 9, 20, 14.5, \"nan\", 8, 19],  \n'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],  \n'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}  \nlabels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']  \n\ndf = pd.DataFrame(exam_data, index=labels)  \ndf = df[df[\"attempts\"] &gt; 2]  \nprint(df)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/","title":"\u00dcbungen Series Datenstruktur","text":"<p>F\u00fcr einige Aufgaben ist es notwendig selbstst\u00e4ndig die n\u00f6tigen Funktionen, Methoden, Attribute durch Internet Recherche heraus zu finden!</p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgaben","title":"Aufgaben","text":""},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#1-aufgabe","title":"1. Aufgabe","text":"<p>Write a Pandas program to create and display a one-dimensional array-like object containing an array of data using Pandas module.</p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#2-aufgabe","title":"2. Aufgabe","text":"<p>Write a Pandas program to convert a Panda module Series to Python list and it's type.</p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#3-aufgabe","title":"3. Aufgabe","text":"<p>Write a Pandas program to add, subtract, multiple and divide two Pandas Series.\u00a0 Sample Series: <code>[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]</code></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#4-aufgabe","title":"4. Aufgabe","text":"<p>Write a Pandas program to compare the elements of the two Pandas Series. Sample Series: <code>[2, 4, 6, 8, 10], [1, 3, 5, 7, 10]</code></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#5-aufgabe","title":"5. Aufgabe","text":"<p>Write a Pandas program to convert a dictionary to a Pandas series. <pre><code>Original dictionary:  \n{'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 800}  \nConverted series:  \na 100  \nb 200  \nc 300  \nd 400  \ne 800  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#6-aufgabe","title":"6. Aufgabe","text":"<p>Write a Pandas program to convert a NumPy array to a Pandas series.\u00a0 <pre><code>NumPy array:  \n[10 20 30 40 50]  \nConverted Pandas series:  \n0 10  \n1 20  \n2 30  \n3 40  \n4 50  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#7-aufgabe","title":"7. Aufgabe","text":"<p>Write a Pandas program to change the data type of given a column or a Series. <pre><code>Original Data Series:  \n0 100  \n1 200  \n2 python  \n3 300.12  \n4 400  \ndtype: object  \nChange the said data type to numeric:  \n0 100.00  \n1 200.00  \n2 NaN  \n3 300.12  \n4 400.00  \ndtype: float64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#8-aufgabe","title":"8. Aufgabe","text":"<p>Write a Pandas program to convert the first column of a DataFrame as a Series. <pre><code>Original DataFrame:  \ncol1 col2 col3  \n0 1 4 7  \n1 2 5 5  \n2 3 6 8  \n3 4 9 12  \n4 7 5 1  \n5 11 0 11  \n1st column as a Series:  \n0 1  \n1 2  \n2 3  \n3 4  \n4 7  \n5 11  \nName: col1, dtype: int64  \n&lt;class 'pandas.core.series.Series'&gt;\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#9-aufgabe","title":"9. Aufgabe","text":"<p>Write a Pandas program to convert a given Series to an array. <pre><code>Sample Output:  \nOriginal Data Series:  \n0 100  \n1 200  \n2 python  \n3 300.12  \n4 400  \ndtype: object  \nSeries to an array  \n['100' '200' 'python' '300.12' '400']\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#10-aufgabe","title":"10. Aufgabe","text":"<p>Write a Pandas program to convert Series of lists to one Series.\u00a0 <pre><code>Sample Output:  \nOriginal Series of list  \n0 [Red, Green, White]  \n1 [Red, Black]  \n2 [Yellow]  \ndtype: object  \nOne Series  \n0 Red  \n1 Green  \n2 White  \n3 Red  \n4 Black  \n5 Yellow  \ndtype: object\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#11-aufgabe","title":"11. Aufgabe","text":"<p>Write a Pandas program to sort a given Series. <pre><code>Sample Output:  \nOriginal Data Series: \n0 '100'\n1 '200'\n2 'python' \n3 '300.12'  \n4 '400'  \ndtype: object  \n0 100  \n1 200  \n3 300.12  \n4 400  \n2 python  \ndtype: object\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#12-aufgabe","title":"12. Aufgabe","text":"<p>Write a Pandas program to add some data to an existing Series.\u00a0 <pre><code>Sample Output:  \nOriginal Data Series:  \n0 \"100\"  \n1 \"200\"  \n2 \"python\"  \n3 \"300.12\"  \n4 \"400\"  \ndtype: object  \nData Series after adding some data:  \n0 \"100\"  \n1 \"200\"  \n2 \"python\"  \n3 \"300.12\"  \n4 \"400\"   \n5 \"500\"  \n6 \"php\"  \ndtype: object\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#13-aufgabe","title":"13. Aufgabe","text":"<p>Write a Pandas program to create a subset of a given series based on value and condition.\u00a0 <pre><code>Sample Output:  \nOriginal Data Series:  \n0 0  \n1 1  \n2 2  \n3 3  \n4 4  \n5 5  \n6 6  \n7 7  \n8 8  \n9 9  \n10 10  \ndtype: int64  \nSubset of the above Data Series:  \n0 0  \n1 1  \n2 2  \n3 3  \n4 4  \n5 5  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#14-aufgabe","title":"14. Aufgabe","text":"<p>Write a Pandas program to change the order of index of a given series. <pre><code>Sample Output:  \nOriginal Data Series:  \nA 1  \nB 2  \nC 3  \nD 4  \nE 5  \ndtype: int64  \nData Series after changing the order of index:  \nE 2  \nD 1  \nC 3  \nB 4  \nA 5  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#15-aufgabe","title":"15. Aufgabe","text":"<p>Write a Pandas program to create the mean and standard deviation of the data of a given Series. <pre><code>Sample Output:  \nOriginal Data Series:  \n0 1  \n1 2  \n2 3  \n3 4  \n4 5  \n5 6  \n6 7  \n7 8  \n8 9  \n9 5  \n10 3  \ndtype: int64  \nMean of the said Data Series:  \n4.818181818181818  \nStandard deviation of the said Data Series:  \n2.522624895547565\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#16-aufgabe","title":"16. Aufgabe","text":"<p>Write a Pandas program to get the items of a given series not present in another given series. <pre><code>Sample Output:  \nOriginal Series:  \nsr1:  \n0 1  \n1 2  \n2 3  \n3 4  \n4 5  \ndtype: int64  \nsr2:  \n0 2  \n1 4  \n2 6  \n3 8  \n4 10  \ndtype: int64  \nItems of sr1 not present in sr2:  \n0 1  \n2 3  \n4 5  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#17-aufgabe","title":"17. Aufgabe","text":"<p>Write a Pandas program to get the items which are not common of two given series. <pre><code>Sample Output:  \nOriginal Series:  \nsr1:  \n0 1  \n1 2  \n2 3  \n3 4  \n4 5  \ndtype: int64  \nsr2:  \n0 2  \n1 4  \n2 6  \n3 8  \n4 10  \ndtype: int64  \nItems of a given series not present in another given series:  \n0 1  \n2 3  \n4 5  \n5 6  \n6 8  \n7 10  \ndtype: int64\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#18-aufgabe","title":"18. Aufgabe","text":"<p>Write a Pandas program to compute the minimum, 25th percentile, median, 75th, and maximum of a given series. <pre><code>Sample Output:  \nOriginal Series:  \n0 3.000938  \n1 11.370722  \n2 14.612143  \n3 8.990256  \n4 13.925283  \n5 12.056875  \n.... \n17 14.118931  \n18 8.247458  \n19 5.526727  \ndtype: float64  \nMinimum, 25th percentile, median, 75th, and maximum of a given series:  \n[3.00093811 8.09463867 10.23353705 12.21537733 14.61214321]\n</code></pre></p>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#losungen","title":"L\u00f6sungen","text":""},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#1-aufgabe_1","title":"1. Aufgabe","text":"<pre><code>import pandas as pd  \n\narray = [1, 2, 3, 4, 5, 6, 7]  \nserries = pd.Series(array)  \nprint(serries)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#2-aufgabe_1","title":"2. Aufgabe","text":"<pre><code>import pandas as pd  \n\n# Create an array or list  \narray = [1, 2, 3, 4, 5, 6, 7]  \nserries = pd.Series(array)  \n# Convert back to a list  \nback_to_list = serries.to_list()  \n# Check the type  \nprint(type(back_to_list))\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#3-aufgabe_1","title":"3. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \n\nseries_1 = Series([2, 4, 6, 8, 10])  \nseries_2 = Series([1, 3, 5, 7, 9])  \n\ndef add_series(series_1, series_2):  \n    return series_1 + series_2  \n\n\ndef multiply_series(series_1, series_2):  \n    return series_1 * series_2  \n\n\ndef subtract_series(series_1, series_2):  \n    return series_1 - series_2  \n\n\ndef divide_series(series_1, series_2):  \n    return series_1 / series_2  \n\n# ---------- MAIN ---------- #  \nseries_sum = add_series(series_1, series_2)  \nprint(series_sum)  \nseries_multiply = multiply_series(series_1, series_2)  \nprint(series_multiply)  \ndifference_series = subtract_series(series_1, series_2)  \nprint(difference_series)  \ndivision_series = divide_series(series_1, series_2)  \nprint(division_series)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#4-aufgabe_1","title":"4. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \n\nseries_1 = Series([2, 4, 6, 8, 10])  \nseries_2 = Series([1, 3, 5, 7, 9])  \n\nprint(f\"series_1 greater than series_2:\\n{series_1 &gt; series_2}\")  \nprint(f\"series_1 less than series_2:\\n{series_1 &lt; series_2}\")  \nprint(f\"series_1 equal series_2:\\n{series_1 == series_2}\")\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#5-aufgabe_1","title":"5. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \n\ndict_data = {  \n    'a': 100,  \n    'b': 200,  \n    'c': 300,  \n    'd': 400,  \n    'e': 800  \n}  \n\nseries_dict = Series(data=dict_data)  \nprint(series_dict)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#6-aufgabe_1","title":"6. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \nimport numpy as np  \n\nnp_array = np.array([10, 20, 30, 40, 50])  \n\nseries_dict = Series(data=np_array)  \nprint(series_dict)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-7","title":"Aufgabe 7","text":"<pre><code>import pandas as pd  \nfrom pandas import Series  \n\ndata_Series = Series([100, 200, \"python\", 300.12, 400])  \n\ndata_Series_converted = pd.to_numeric(data_Series, errors=\"coerce\")  \nprint(data_Series_converted)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#8-aufgabe_1","title":"8. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \ndict_for_df = {  \n    \"col1\": [1, 2, 3, 4, 7, 11],  \n    \"col2\": [4, 5, 6, 9, 5, 0],  \n    \"col3\": [7, 5, 8, 12, 1, 11]  \n}  \ndf = DataFrame(data=dict_for_df)  \ncolumn_as_series = Series(dict_for_df[\"col1\"])  \nprint(column_as_series)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#9-aufgabe_1","title":"9. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \nimport numpy as np  \n\noriginal_data_series = Series([100, 200, \"python\", 300.12, 400])  \n# without \".values.tolist()\" you will get only a \"str\" datatype  \nseries_as_array = np.array(original_data_series.values.tolist())  \nprint(series_as_array)  \n# For test:  \nprint(type(series_as_array))  \nprint(type(series_as_array[2]))\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-10","title":"Aufgabe 10","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries_of_lists = Series(  \n    [  \n    [\"Red\", \"Green\", \"White\"], [\"Red\", \"Black\"], [\"Yellow\"]  \n    ]  \n)  \nprint(series_of_lists)  \n# Extract each element to a list  \nlist_of_elemnts = []  \nfor list in series_of_lists:  \n    list_of_elemnts.extend(list)  \n\nprint(\"-----\")  \nprint(list_of_elemnts)  \n# Convert list to Series  \nfinal_series = Series(list_of_elemnts)  \nprint(final_series)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-11","title":"Aufgabe 11","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([\"100\", \"200\", \"python\", \"300.12\", \"400\"])  \nprint(series)  \nseries_sorted = series.sort_values()  \nprint(series_sorted)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-12","title":"Aufgabe 12","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([\"100\", \"200\", \"python\", \"300.12\", \"400\"])  \nprint(series)  \nseries_added = pd.concat([series, Series([\"500\", \"php\"])], ignore_index=True)  \nprint(series_added)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#aufgabe-13","title":"Aufgabe 13","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  \nseries_condition = series &lt;= 5  \nprint(series_condition)  \nseries_filtered = series[series_condition]  \nprint(series_filtered)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#14-aufgabe_1","title":"14. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([1, 2, 3, 4, 5], index=[\"A\", \"B\", \"C\", \"D\", \"E\"])  \nseries.sort_index(ascending=False, inplace=True)  \nprint(series)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#15-aufgabe_1","title":"15. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries = Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 3])  \nprint(f\"The mean is: {series.mean()}\")  \nprint(f\"The standart deviation is: {series.std()}\")\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#16-aufgabe_1","title":"16. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\nseries_1 = Series([1, 2, 3, 4, 5])  \nseries_2 = Series([2, 4, 6, 8, 10])  \nprint(\"Items of series_1 not present in series_2:\")  \nfilter_values = series_1.isin(series_2)  \n# Change True to False and False to True  \nfiltered_values = ~filter_values  \nprint(series_1[filtered_values])\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#17-aufgabe_1","title":"17. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \n\ns_1 = Series([1, 2, 3, 4, 5])  \ns_2 = Series([2, 4, 6, 8, 10])  \n\ns1_not_in_s2 = ~s_1.isin(s_2)  \nbool_1 = s1_not_in_s2  \ns2_not_in_s1 = ~s_2.isin(s_1)  \nbool_2 = s2_not_in_s1  \n\nfiltered = pd.concat([s_1[bool_1], s_2[bool_2]])  \nprint(filtered)\n</code></pre>"},{"location":"content/pandas/%C3%9Cbungen-Series-Datenstruktur/#18-aufgabe_1","title":"18. Aufgabe","text":"<pre><code>import pandas as pd  \nfrom pandas import Series, DataFrame  \nimport numpy as np  \n# Generate array with float numbers between 1 and 20, 20 times  \nrandom_numbs = np.random.uniform(1, 20, 20)  \ngiven_series = Series(random_numbs)  \nmin_given_series = given_series.min()  \nmax_given_series = given_series.max()  \nprecentile_25 = given_series.quantile(q=0.25)  \nmedian = given_series.quantile(q=0.5)  \nprecentile_75 = given_series.quantile(q=0.75)  \nprint(f\"max value: {max_given_series}\\nmin value: {min_given_series}\\n25th percentile: {precentile_25}\\n75th percentile: {precentile_75}\")\n</code></pre>"},{"location":"content/project/tic_tac_toe/","title":"Projekt: Tic Tac Toe","text":"Video <p>In diesem Abschnitt werden wir unser bisheriges K\u00f6nnen in einem kleinen Projekt zusammenstellen. Wir wollen das Spiel <code>TicTacToe</code> implementieren.</p> <p>(Vereinfachte) Spielregeln:</p> <ul> <li>Es wird ein quadratisches Spielfeld aus 3x3 (also 9) Feldern gezeichnet.</li> <li>Der Erste Spieler tr\u00e4gt ein <code>x</code> in eines der Felder ein.</li> <li>Danach tr\u00e4gt der zweite Spiler ein <code>o</code> in eines der Felder ein.</li> <li>Dies wird abwechselnd so lange durchf\u00fchrt, bis ein drei in einer Zeile, Spalte oder Diagonalen dreimal das gleiche Symbol auftaucht. Der Spieler, der dieses Symbol zeichnet, gewinnt.</li> </ul> <p>Das ganze soll nachher so aussehen:</p> <pre><code> 0 | 1 | 2 \n 3 | 4 | 5\n 6 | 7 | 8\nSpieler x, wo willst du setzen? 0\n x | 1 | 2 \n 3 | 4 | 5\n 6 | 7 | 8\nSpieler o, wo willst du setzen? 1\n x | o | 2 \n 3 | 4 | 5\n 6 | 7 | 8\nSpieler x, wo willst du setzen? 4\n x | o | 2 \n 3 | x | 5\n 6 | 7 | 8\nSpieler o, wo willst du setzen? 2\n x | o | o \n 3 | x | 5\n 6 | 7 | 8\nSpieler x, wo willst du setzen? 8\n x | o | o \n 3 | x | 5\n 6 | 7 | x\nHerzlichen Gl\u00fcckwunsch!\n</code></pre> <p>Wir haben bereits etwas Code vorgegeben. Dieser hat einige L\u00fccken, die wir f\u00fcllen m\u00fcssen.</p> <pre><code>def gameloop(): # (1)!\n    spielbrett = [0, 1, 2, 3, 4, 5, 6, 7, 8] # (14)!\n\n    aktiver_spieler = 'x' # (2)!\n    n\u00e4chster_spieler = 'o' # (3)!\n\n    while not es_gibt_gewinner(spielbrett): # (4)!\n        print(als_quadrat(spielbrett)) # (5)!\n\n        position = int(input(f\"Spieler {aktiver_spieler}, wo willst du setzen? \")) # (6)!\n\n        symbol_schreiben(spielbrett, position, aktiver_spieler) # (7)!\n\n        # Wechsle Spieler\n        ... # (8)!\n\n    print(als_quadrat(spielbrett)) # (9)!\n    print(f\"Herzlichen Gl\u00fcckwunsch!\") \n\n\ndef als_quadrat(spielbrett): # (10)!\n    return ...\n\ndef es_gibt_gewinner(spielbrett): # (11)!\n    return ...\n\ndef symbol_schreiben(spielbrett, position, symbol): # (12)!\n    ...\n\nif __name__ == '__main__': # (13)!\n    gameloop()\n</code></pre> <ol> <li>In der Funktion <code>gameloop</code> wird das gesamte Spiel durchgef\u00fchrt.</li> <li>In <code>aktiver_spieler</code> ist das Symbol des momentan aktiven Spielers gespeichert.</li> <li>In <code>n\u00e4chster_spieler</code> ist das Symbol gespeichert, dass der n\u00e4chste Spieler nutzt.</li> <li>In der Funktion <code>es_gibt_gewinner()</code> soll gepr\u00fcft werden, ob es schon einen Gewinner gibt. Wenn nein, so durchlaufen wir den Schleifenrumpf.</li> <li>Zun\u00e4chst geben wir das Spielfeld als sch\u00f6nes Quadrat (mithilfe der Methode <code>als_quadrat</code>) auf der Konsole aus. An den Zahlen erkennt der Spieler, welche Felder noch frei sind und was er in der Konsole eingeben muss, um in das richtige Feld zu setzen.</li> <li>Der Nutzer erh\u00e4lt die Aufforderung eine Zahl einzugeben, in welches das aktuelle Spielersymbol eingetragen wird. </li> <li>Auf dem Spielbrett wird nun an der vom Spieler gew\u00fcnschten Position das Zeichen gesetzt.</li> <li>Hier m\u00fcssen <code>aktiver_spieler</code> und <code>n\u00e4chster_spieler</code> wechseln.</li> <li>Wenn ein Gewinner gefunden wurde, wird die Schleife nicht l\u00e4nger durchlaufen und eine Gratulation wird angezeigt.</li> <li>Diese Funktion baut aus der Liste <code>[0, 1, ..., 8]</code> einen String mit Zeilenumbr\u00fcchen.</li> <li>Diese Funktion untersucht, ob es bereits einen Gewinner beim Tic Tac Toe spiel gibt. </li> <li>Diese Funktion erm\u00f6glicht ein in einer Liste (dem <code>spielbrett</code>) ein vorgegebenen <code>symbol</code> an einer bestimmten <code>position</code> zu setzen.</li> <li>Diese beiden Codezeilen sorgen daf\u00fcr, dass bei Ausf\u00fchrung der Datei das Programm gestartet wird.</li> <li>Das Spielbrett ist aus sicht des Computers eine Liste mit neun Elementen. Mithilfe der Methode <code>als_quadrat</code>, werden wir dieses Spielbrett sp\u00e4ter auf der Konsole als ein sch\u00f6nes Quadrat ausgeben. Um das Spielfeld beim Programmieren einfacher zu handhaben, ist es hier aber gut, es als eine einfache Liste zu speichern.</li> </ol> <p>Wir m\u00fcssen in diesem Code vier Dinge erg\u00e4nzen:</p> Implementiere <code>als_quadrat</code> <p>Die Liste <code>spielbrett</code> soll auf der Konsole sch\u00f6n dargestellt werden.</p> <p>Beispiele</p> <p>F\u00fcr die Liste <code>[0, 1, 2, 3, 4, 5, 6, 7, 8]</code>: </p> <p><pre><code>0 | 1 | 2\n3 | 4 | 5\n6 | 7 | 8\n</code></pre> F\u00fcr die Liste <code>[\"x\", \"o\", 2, \"x\", 4, 5, 6, 7, \"o\"]</code>: </p> <pre><code>x | o | 2\nx | 4 | 5\n6 | 7 | o\n</code></pre> <p>Diese Darstellung wird in der Funktion <code>als_quadrat</code> erstellt. </p> <p>Mit <code>\\n</code> kann in einem String ein Zeilenumbruch gesetzt werden.</p> <p>Implementieren Sie dies. Hier sind Unittest, mit denen sie \u00fcberpr\u00fcfen k\u00f6nnen, ob ihre Funktion richtig ist:</p> <pre><code>import unittest\n\n\ndef als_quadrat(spielbrett):\n    return ...\n\n\nclass TestAlsQuadrat(unittest.TestCase):\n    def test_als_quadrat_0(self):\n        spielbrett = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        erwartet = \"0 | 1 | 2\\n3 | 4 | 5\\n6 | 7 | 8\"\n        self.assertEqual(als_quadrat(spielbrett), erwartet)\n\n    def test_als_quadrat_1(self):\n        spielbrett = [\"x\", \"o\", 2, \"x\", 4, 5, 6, 7, \"o\"]\n        erwartet = \"x | o | 2\\nx | 4 | 5\\n6 | 7 | o\"\n        self.assertEqual(als_quadrat(spielbrett), erwartet)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> Tipp <p>Schreiben Sie die Tests in eine seperate Datei. Wenn alles funktiniert, kopieren sie die korrekte Implementierung. Das ist zwar nicht die feine englische Art, aber f\u00fcr den moment ok so.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def als_quadrat(spielbrett):\n    return f\"{spielbrett[0]} | {spielbrett[1]} | {spielbrett[2]}\\n{spielbrett[3]} | {spielbrett[4]} | {spielbrett[5]}\\n{spielbrett[6]} | {spielbrett[7]} | {spielbrett[8]}\"\n</code></pre> Implementiere <code>es_gibt_gewinner</code> <p>Die Methode <code>es_gibt_gewinner</code> pr\u00fcft, ob in irgendeiner Zeile, Spalte oder Diagonalen ein Symbol drei mal auftaucht.</p> <p>Hier sind ein Haufen Unittests, mit denen du die Korrektheit deiner Funktion pr\u00fcfen kannst.</p> <pre><code>import unittest\n\n\ndef es_gibt_gewinner(spielbrett):\n  return ...\n\n\nclass TestEsGibtGewinner(unittest.TestCase):\n    def test_es_gibt_gewinner_alles_leer(self):\n        spielbrett = [0, 1, 2,\n                      3, 4, 5,\n                      6, 7, 8]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_erste_zug(self):\n        spielbrett = [0, \"x\", 2,\n                      3, 4, 5,\n                      6, 7, 8]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_zweiter_zug(self):\n        spielbrett = [0, \"x\", 2,\n                      3, \"o\", 5,\n                      6, 7, 8]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_dritter_zug(self):\n        spielbrett = [0, \"x\", 2,\n                      3, \"o\", 5,\n                      6, \"x\", 8]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_zeile_0(self):\n        spielbrett = [\"x\", \"x\", \"x\",\n                      \"o\", \"o\", 5,\n                      6, 7, 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_zeile_1(self):\n        spielbrett = [\"x\", \"x\", \"o\",\n                      \"o\", \"o\", \"o\",\n                      6, 7, 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_zeile_2(self):\n        spielbrett = [0, \"x\", \"o\",\n                      \"x\", \"o\", \"o\",\n                      \"x\", \"x\", \"x\"]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_spalte_0(self):\n        spielbrett = [\"x\", 1, 2,\n                      \"x\", 4, 5,\n                      \"x\", 7, 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_spalte_1(self):\n        spielbrett = [0, \"o\", 2,\n                      3, \"o\", 5,\n                      6, \"o\", 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_spalte_2(self):\n        spielbrett = [0, 1, \"x\",\n                      3, 4, \"x\",\n                      6, 7, \"x\"]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_diagonale_links_nach_rechts(self):\n        spielbrett = [\"x\", 1, 2,\n                      3, \"x\", 5,\n                      6, 7, \"x\"]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_diagonale_rechts_nach_links(self):\n        spielbrett = [0, 1, \"x\",\n                      3, \"x\", 5,\n                      \"x\", 7, 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_unentschieden(self):\n        spielbrett = [\"x\", \"o\", \"x\",\n                      \"x\", \"x\", \"o\",\n                      \"o\", \"x\", \"o\"]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> Tipp <p>\u00dcberlege dir zun\u00e4chst, wie du f\u00fcr die erste Zeile pr\u00fcften kannst, ob alle drei Symbole gleich sind.</p> <p>\u00dcberlege dir dann so eine Pr\u00fcfung f\u00fcr jede Zeile, Spalte und Diagonale.</p> <p>\u00dcberlege dir dann, wie du diese Bedingungen verkn\u00fcpfen kannst.</p> <p>Schreiben Sie die Tests in eine seperate Datei. Wenn alles funktiniert, kopieren sie die korrekte Implementierung. Das ist zwar nicht die feine englische Art, aber f\u00fcr den moment ok so.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def es_gibt_gewinner(spielbrett):\n    return (spielbrett[0] == spielbrett[1] == spielbrett[2]\n            or spielbrett[3] == spielbrett[4] == spielbrett[5]\n            or spielbrett[6] == spielbrett[7] == spielbrett[8]\n            or spielbrett[0] == spielbrett[3] == spielbrett[6]\n            or spielbrett[1] == spielbrett[4] == spielbrett[7]\n            or spielbrett[2] == spielbrett[5] == spielbrett[8]\n            or spielbrett[0] == spielbrett[4] == spielbrett[8]\n            or spielbrett[2] == spielbrett[4] == spielbrett[6])\n</code></pre> Implementiere <code>symbol_schreiben</code> <p>In der Methode <code>symbol_schreiben</code> wird implementiert, wie ein neues Symbol auf das Spielfeld eingetragen wird. Implementieren Sie dies. Hier sind Unittest, mit denen sie \u00fcberpr\u00fcfen k\u00f6nnen, ob ihre Funktion richtig ist:</p> <pre><code>import unittest\n\n\ndef symbol_schreiben(spilbrett, position, symbol):\n    ...\n\n\nclass TestSymbolSchreiben(unittest.TestCase):\n    def test_symbol_schreiben_0(self): # (1)!\n        spielbrett = [0, 1, 2, 3, 4, 5, 6, 7, 8] # (2)!\n        symbol = \"x\" # (3)!\n        position = 4 # (4)!\n        erwartet = [0, 1, 2, 3, \"x\", 5, 6, 7, 8] # (5)!\n        symbol_schreiben(spielbrett, position, symbol) # (6)!\n        self.assertEqual(spielbrett, erwartet) # (7)!\n\n    def test_symbol_schreiben_1(self):\n        spielbrett = [\"x\", \"o\", 2, \"x\", 4, 5, 6, 7, \"o\"]\n        symbol = \"o\"\n        position = 2\n        erwartet = [\"x\", \"o\", \"o\", \"x\", 4, 5, 6, 7, \"o\"]\n        symbol_schreiben(spielbrett, position, symbol)\n        self.assertEqual(spielbrett, erwartet)  \n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <ol> <li>Der erste Test wird definiert.</li> <li>Das \"leere\" Spielfeld wird erstellt.</li> <li>Das Symbol wird festgelegt.</li> <li>Die Position wird festgelegt.</li> <li>Die erwartete L\u00f6sung wird definiert.</li> <li>Die Funktion wird ausgef\u00fchrt.</li> <li>Nun wird gepr\u00fcft, ob die liste <code>spielbrett</code> korrekt ge\u00e4ndert wurde.</li> </ol> Tipp <p>Schreiben Sie die Tests in eine seperate Datei. Wenn alles funktiniert, kopieren sie die korrekte Implementierung. Das ist zwar nicht die feine englische Art, aber f\u00fcr den moment ok so.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def symbol_schreiben(spielbrett, position, symbol):\n    spielbrett[position] = symbol\n</code></pre> Implementiere den Spielerwechsel <p>Nach jedem Zug m\u00fcssen <code>aktiver_spieler</code> und <code>n\u00e4chster_spieler</code> wechseln. Dazu muss der Inhalt der Variablen getauscht werden. F\u00fcgen Sie den Code in die Vorlage ein.</p> Tipp <p>Schauen Sie sich \u00dcbungsaufgabe Variableninhalte tauschen an.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def gameloop():\n    spielbrett = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n    aktiver_spieler = 'x'\n    n\u00e4chster_spieler = 'o'\n    while not es_gibt_gewinner(spielbrett):\n        print(als_quadrat(spielbrett))\n\n        position = int(input(f\"Spieler {aktiver_spieler}, wo willst du setzen? \"))\n\n        symbol_schreiben(spielbrett, position, aktiver_spieler)\n\n        # Wechsle Spieler\n        zwischenspeicher = aktiver_spieler\n        aktiver_spieler = n\u00e4chster_spieler\n        n\u00e4chster_spieler = zwischenspeicher\n\n    print(als_quadrat(spielbrett))\n    print(f\"Herzlichen Gl\u00fcckwunsch!\")\n</code></pre> <p>Wenn wir alles richtig gemacht haben, kann so unsere L\u00f6sung aussehen:</p> Komplette L\u00f6sung <pre><code>import unittest\n\n\ndef gameloop():\n    spielbrett = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n    aktiver_spieler = 'x'\n    n\u00e4chster_spieler = 'o'\n\n    while not es_gibt_gewinner(spielbrett):\n        print(als_quadrat(spielbrett))\n\n        position = int(input(f\"Spieler {aktiver_spieler}, wo willst du setzen? \"))\n\n        symbol_schreiben(spielbrett, position, aktiver_spieler)\n\n        # Wechsle Spieler\n        zwischenspeicher = aktiver_spieler\n        aktiver_spieler = n\u00e4chster_spieler\n        n\u00e4chster_spieler = zwischenspeicher\n\n    print(als_quadrat(spielbrett))\n    print(f\"Herzlichen Gl\u00fcckwunsch!\")\n\n\ndef als_quadrat(spielbrett):\n    return f\"{spielbrett[0]} | {spielbrett[1]} | {spielbrett[2]}\\n{spielbrett[3]} | {spielbrett[4]} | {spielbrett[5]}\\n{spielbrett[6]} | {spielbrett[7]} | {spielbrett[8]}\"\n\n\ndef es_gibt_gewinner(spielbrett):\n    return (spielbrett[0] == spielbrett[1] == spielbrett[2]\n            or spielbrett[3] == spielbrett[4] == spielbrett[5]\n            or spielbrett[6] == spielbrett[7] == spielbrett[8]\n            or spielbrett[0] == spielbrett[3] == spielbrett[6]\n            or spielbrett[1] == spielbrett[4] == spielbrett[7]\n            or spielbrett[2] == spielbrett[5] == spielbrett[8]\n            or spielbrett[0] == spielbrett[4] == spielbrett[8]\n            or spielbrett[2] == spielbrett[4] == spielbrett[6])\n\n\ndef symbol_schreiben(spielbrett, position, symbol):\n    spielbrett[position] = symbol\n\n\nclass TestAlsQuadrat(unittest.TestCase):\n    def test_als_quadrat_0(self):\n        spielbrett = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        erwartet = \"0 | 1 | 2\\n3 | 4 | 5\\n6 | 7 | 8\"\n        self.assertEqual(als_quadrat(spielbrett), erwartet)\n\n    def test_als_quadrat_1(self):\n        spielbrett = [\"x\", \"o\", 2, \"x\", 4, 5, 6, 7, \"o\"]\n        erwartet = \"x | o | 2\\nx | 4 | 5\\n6 | 7 | o\"\n        self.assertEqual(als_quadrat(spielbrett), erwartet)\n\n\nclass TestEsGibtGewinner(unittest.TestCase):\n    def test_es_gibt_gewinner_alles_leer(self):\n        spielbrett = [0, 1, 2,\n                      3, 4, 5,\n                      6, 7, 8]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_erste_zug(self):\n        spielbrett = [0, \"x\", 2,\n                      3, 4, 5,\n                      6, 7, 8]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_zweiter_zug(self):\n        spielbrett = [0, \"x\", 2,\n                      3, \"o\", 5,\n                      6, 7, 8]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_dritter_zug(self):\n        spielbrett = [0, \"x\", 2,\n                      3, \"o\", 5,\n                      6, \"x\", 8]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_zeile_0(self):\n        spielbrett = [\"x\", \"x\", \"x\",\n                      \"o\", \"o\", 5,\n                      6, 7, 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_zeile_1(self):\n        spielbrett = [\"x\", \"x\", \"o\",\n                      \"o\", \"o\", \"o\",\n                      6, 7, 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_zeile_2(self):\n        spielbrett = [0, \"x\", \"o\",\n                      \"x\", \"o\", \"o\",\n                      \"x\", \"x\", \"x\"]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_spalte_0(self):\n        spielbrett = [\"x\", 1, 2,\n                      \"x\", 4, 5,\n                      \"x\", 7, 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_spalte_1(self):\n        spielbrett = [0, \"o\", 2,\n                      3, \"o\", 5,\n                      6, \"o\", 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_spalte_2(self):\n        spielbrett = [0, 1, \"x\",\n                      3, 4, \"x\",\n                      6, 7, \"x\"]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_diagonale_links_nach_rechts(self):\n        spielbrett = [\"x\", 1, 2,\n                      3, \"x\", 5,\n                      6, 7, \"x\"]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_diagonale_rechts_nach_links(self):\n        spielbrett = [0, 1, \"x\",\n                      3, \"x\", 5,\n                      \"x\", 7, 8]\n        self.assertEqual(True, es_gibt_gewinner(spielbrett))\n\n    def test_es_gibt_gewinner_unentschieden(self):\n        spielbrett = [\"x\", \"o\", \"x\",\n                      \"x\", \"x\", \"o\",\n                      \"o\", \"x\", \"o\"]\n        self.assertEqual(False, es_gibt_gewinner(spielbrett))\n\nclass TestSymbolSchreiben(unittest.TestCase):\n    def test_symbol_schreiben_0(self):\n        spielbrett = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n        symbol = \"x\"\n        position = 4\n        erwartet = [0, 1, 2, 3, \"x\", 5, 6, 7, 8]\n        symbol_schreiben(spielbrett, position, symbol)\n        self.assertEqual(spielbrett, erwartet)\n\n    def test_symbol_schreiben_1(self):\n        spielbrett = [\"x\", \"o\", 2, \"x\", 4, 5, 6, 7, \"o\"]\n        symbol = \"o\"\n        position = 2\n        erwartet = [\"x\", \"o\", \"o\", \"x\", 4, 5, 6, 7, \"o\"]\n        symbol_schreiben(spielbrett, position, symbol)\n        self.assertEqual(spielbrett, erwartet)\n\n\nif __name__ == '__main__':\n    # unittest.main() # kommentar entfernen, um Methoden zu testen\n    gameloop()\n</code></pre> Video <p> </p>"},{"location":"content/python_vs_r/python_vs_r/","title":"Python vs. R","text":"<p>Python vs. R</p> <p>Python und R sind zwei der beliebtesten Programmiersprachen f\u00fcr Datenanalyse und maschinelles Lernen. W\u00e4hrend Python eine universelle, einfach zu erlernende Sprache ist, die in vielen Bereichen wie Webentwicklung, Automatisierung und wissenschaftlichem Rechnen verwendet wird, ist R speziell f\u00fcr statistische Analysen und die Visualisierung von Daten konzipiert. </p> <p>Python bietet eine breite Palette von Bibliotheken (z. B. Pandas, NumPy, scikit-learn), die es zu einem Allround-Werkzeug machen, w\u00e4hrend R seine St\u00e4rke in der Berechnung komplexer statistischer Modelle und der Erzeugung hochwertiger Visualisierungen (z. B. mit ggplot2) hat.</p> <p>Gerade die breite Palette an Bibliotheken und die einfache Syntax machen Python zu einer beliebten Wahl f\u00fcr Anf\u00e4nger und erfahrene Entwickler gleicherma\u00dfen. Durch die gro\u00dfen Community werden in Python st\u00e4ndig neue Bibliotheken und Tools entwickelt, die die Arbeit erleichtern. Dies ist einer der Hauptvorteile gegen\u00fcber R.</p> Eigenschaft Python R Einsatzgebiete Universell (Web, Automatisierung, KI) Speziell f\u00fcr Statistik und Analyse Syntax Einfach und einsteigerfreundlich Speziell f\u00fcr statistische Berechnungen optimiert Bibliotheken Pandas, NumPy, scikit-learn ggplot2, dplyr, tidyr Datenvisualisierung Gut mit Matplotlib und Seaborn Hervorragend mit ggplot2 Maschinelles Lernen Stark unterst\u00fctzt durch scikit-learn und TensorFlow Unterst\u00fctzt, aber weniger verbreitet Popularit\u00e4t Sehr weit verbreitet Insbesondere in der Statistik-Community beliebt"},{"location":"content/python_vs_r/python_vs_r/#was-kann-ich-mit-python-machen-und-wie","title":"Was kann ich mit Python machen und wie?","text":"<p>Durch die vielen Bibliotheken kann Python inzwischen in nahezu allen Entwicklungs- und Anwendungsbereichen eingesetzt werden. Hier sind einige Beispiele:</p>"},{"location":"content/python_vs_r/python_vs_r/#webentwicklung","title":"Webentwicklung","text":"<p>Python eignet sich hervorragend f\u00fcr die Webentwicklung. Mit Frameworks wie Django oder Flask k\u00f6nnen Sie schnell und einfach Webanwendungen erstellen.</p>"},{"location":"content/python_vs_r/python_vs_r/#automatisierung","title":"Automatisierung","text":"<p>Python ist perfekt f\u00fcr die Automatisierung von Aufgaben. Mit Python k\u00f6nnen Sie Abl\u00e4ufe automatisieren, die sonst viel Zeit in Anspruch nehmen w\u00fcrden.</p>"},{"location":"content/python_vs_r/python_vs_r/#datenanalyse","title":"Datenanalyse","text":"<p>Python ist eine der beliebtesten Programmiersprachen f\u00fcr die Datenanalyse. Mit Bibliotheken wie Pandas und NumPy k\u00f6nnen Sie Daten analysieren und visualisieren.</p>"},{"location":"content/python_vs_r/python_vs_r/#kunstliche-intelligenz","title":"K\u00fcnstliche Intelligenz","text":"<p>Python ist die Sprache der Wahl f\u00fcr KI und maschinelles Lernen. Mit Bibliotheken wie TensorFlow und scikit-learn k\u00f6nnen Sie komplexe Modelle erstellen und trainieren.</p>"},{"location":"content/python_vs_r/python_vs_r/#wissenschaftliches-rechnen","title":"Wissenschaftliches Rechnen","text":"<p>Python ist eine der beliebtesten Sprachen f\u00fcr wissenschaftliches Rechnen. Mit Bibliotheken wie NumPy und SciPy k\u00f6nnen Sie komplexe mathematische Berechnungen durchf\u00fchren.</p>"},{"location":"content/python_vs_r/python_vs_r/#spieleentwicklung","title":"Spieleentwicklung","text":"<p>Python ist eine gro\u00dfartige Sprache f\u00fcr die Spieleentwicklung. Mit Bibliotheken wie Pygame k\u00f6nnen Sie Spiele erstellen und Spa\u00df haben.</p> <p>Eine ausf\u00fchrliche Auflistung zu Anwendungen und der Beschreibung findet ihr hier.</p> <p>Python ist jedoch nicht f\u00fcr jeden der Bereiche die erste Wahl. Beispielsweise sollte f\u00fcr die Entwicklung von mobilen Apps eher auf Java, Kotlin oder eine Cross-Plattform Sprache zur\u00fcckgegriffen werden.</p> <p>Weitere Informationen zum Unterschied zwischen Python und R findet ihr hier.</p>"},{"location":"content/python_vs_r/python_vs_r/#syntax","title":"Syntax","text":"<p>Python und R unterscheiden sich in ihrer Syntax, insbesondere in der Art und Weise, wie sie grundlegende Operationen und Strukturen handhaben. So werden beispielsweise Code-Bl\u00f6cke wie Schleifen oder Funktionen in Python durch Einr\u00fcckungen strukturiert, w\u00e4hrend in R geschweifte Klammern <code>{}</code> f\u00fcr die Abgrenzung verwendet werden.</p> <p>Ein weiterer wesentlicher Unterschied ist die Handhabung von Variablenzuweisungen. In Python erfolgt die Zuweisung mit dem einfachen Gleichheitszeichen <code>=</code>, w\u00e4hrend R sowohl <code>=</code> als auch <code>&lt;-</code> verwendet, wobei letzteres traditionell bevorzugt wird. In R sieht man h\u00e4ufig <code>x &lt;- 5</code>, w\u00e4hrend der gleiche Ausdruck in Python als <code>x = 5</code> geschrieben w\u00fcrde.</p> <p>Listen und Arrays unterscheiden sich ebenfalls. In Python gibt es native Listenstrukturen, die mit eckigen Klammern <code>[]</code> definiert werden, z. B. <code>my_list = [1, 2, 3]</code>. In R hingegen gibt es verschiedene Strukturen wie Vektoren und Datenframes, und Vektoren werden mit der Funktion <code>c()</code> erstellt, z. B. <code>my_vector &lt;- c(1, 2, 3)</code>.</p> <p>Ein weiterer markanter Unterschied liegt in der Verwendung von Funktionen. In Python werden Funktionen mit <code>def</code> definiert, gefolgt vom Funktionsnamen und der Parameterliste in runden Klammern, z. B. <code>def my_function(x):</code>. In R hingegen werden Funktionen mit dem Schl\u00fcsselwort <code>function</code> definiert, z. B. <code>my_function &lt;- function(x) {}</code>.</p> <p>In Python beginnt die Indexierung standardm\u00e4\u00dfig bei <code>0</code>, was bedeutet, dass das erste Element einer Liste oder eines Arrays die Position <code>0</code> hat. R hingegen verwendet eine 1-basierte Indexierung, sodass das erste Element die Position <code>1</code> hat.</p>"},{"location":"content/regression/regression/","title":"Regression","text":"<p>Hier ist ein neuer Abschnitt, der das Thema Lineare Regression mit <code>scikit-learn</code> behandelt. </p> <p>Die Bibliothek <code>scikit-learn</code> ist eine der bekanntesten Bibliotheken f\u00fcr maschinelles Lernen in Python. Sie bietet eine Vielzahl von Algorithmen, darunter auch die lineare Regression, die wir in diesem Abschnitt verwenden werden. Der gro\u00dfe Vorteil von <code>scikit-learn</code> liegt darin, dass sie viele n\u00fctzliche Funktionen f\u00fcr die Datenvorverarbeitung, Modelltraining und Modellbewertung enth\u00e4lt.</p> <p>In diesem Abschnitt f\u00fchren wir Schritt f\u00fcr Schritt eine einfache lineare Regression durch und nutzen dabei die Funktionen von <code>scikit-learn</code>.</p>"},{"location":"content/regression/regression/#datensatz-vorbereiten","title":"Datensatz vorbereiten","text":"<p>Zuerst erstellen wir einen einfachen Datensatz, der die Beziehung zwischen einer unabh\u00e4ngigen Variable \\(x\\) und einer abh\u00e4ngigen Variable \\(y\\) darstellt. Unser Ziel ist es, die lineare Beziehung zwischen diesen Variablen zu modellieren.</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\n\n# Beispiel-Datensatz\nx = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape(-1, 1)\ny = np.array([2, 4, 5, 4, 6, 7, 8, 9, 10])\n\n# Daten visualisieren\nplt.scatter(x, y)\nplt.xlabel(\"Unabh\u00e4ngige Variable (x)\")\nplt.ylabel(\"Abh\u00e4ngige Variable (y)\")\nplt.title(\"Datenpunkte\")\nplt.show()\n</code></pre> <p>In diesem Beispiel besteht unser Datensatz aus \\(x\\)- und \\(y\\)-Werten, die eine lineare Beziehung aufweisen, aber auch einige Variationen und Abweichungen enthalten.</p>"},{"location":"content/regression/regression/#modelltraining-mit-scikit-learn","title":"Modelltraining mit <code>scikit-learn</code>","text":"<p>Als N\u00e4chstes trainieren wir ein Modell der linearen Regression mit <code>scikit-learn</code>. Dazu verwenden wir die Klasse <code>LinearRegression</code>, die das Training und die Vorhersage sehr einfach macht.</p> <pre><code>from sklearn.linear_model import LinearRegression\n\n# Lineares Regressionsmodell erstellen\nmodel = LinearRegression()\n\n# Modell mit unseren Daten trainieren\nmodel.fit(x, y)\n\n# Steigung und Achsenabschnitt ausgeben\nm = model.coef_[0]  # Steigung\nb = model.intercept_  # Achsenabschnitt\nprint(f\"Steigung (m): {m}\")\nprint(f\"Achsenabschnitt (b): {b}\")\n</code></pre> <p>Nach dem Training gibt uns das Modell die Werte f\u00fcr die Steigung \\(m\\) und den Achsenabschnitt \\(b\\) zur\u00fcck. Das sind die Parameter der linearen Gleichung \\( y = m \\cdot x + b \\), die die Beziehung zwischen \\(x\\) und \\(y\\) beschreibt.</p>"},{"location":"content/regression/regression/#vorhersagen-treffen","title":"Vorhersagen treffen","text":"<p>Nachdem wir das Modell trainiert haben, k\u00f6nnen wir nun Vorhersagen treffen. Dazu nutzen wir die Methode <code>predict</code> des Modells, um basierend auf neuen \\(x\\)-Werten die entsprechenden \\(y\\)-Werte zu berechnen.</p> <pre><code># Vorhersagen mit dem trainierten Modell treffen\ny_pred = model.predict(x)\n\n# Originale Datenpunkte und Regressionsgerade plotten\nplt.scatter(x, y, label=\"Datenpunkte\")\nplt.plot(x, y_pred, color='red', label=\"Regressionsgerade\")\nplt.xlabel(\"Unabh\u00e4ngige Variable (x)\")\nplt.ylabel(\"Abh\u00e4ngige Variable (y)\")\nplt.title(\"Lineare Regression\")\nplt.legend()\nplt.show()\n</code></pre> <p>Hier plotten wir die Originaldatenpunkte und die vorhergesagte Regressionsgerade, die unser Modell gelernt hat.</p>"},{"location":"content/regression/regression/#modellbewertung","title":"Modellbewertung","text":"<p>Um die G\u00fcte unseres Modells zu bewerten, verwenden wir den sogenannten Bestimmtheitsma\u00df \\(R^2\\), der beschreibt, wie gut das Modell die Daten erkl\u00e4rt. Ein Wert von \\(R^2 = 1\\) bedeutet eine perfekte Anpassung, w\u00e4hrend ein Wert von \\(R^2 = 0\\) bedeutet, dass das Modell die Daten \u00fcberhaupt nicht erkl\u00e4rt.</p> <pre><code># Modellbewertung\nr_squared = model.score(x, y)\nprint(f\"Bestimmtheitsma\u00df (R^2): {r_squared}\")\n</code></pre> <p>Das <code>score</code>-Method von <code>scikit-learn</code> gibt uns direkt den \\(R^2\\)-Wert, mit dem wir die Qualit\u00e4t unseres Modells bewerten k\u00f6nnen.</p>"},{"location":"content/regression/regression/#komplexere-szenarien","title":"Komplexere Szenarien","text":"<p>In realen Anwendungen arbeitet man oft nicht nur mit einer unabh\u00e4ngigen Variable, sondern mit mehreren. <code>scikit-learn</code> unterst\u00fctzt auch die multiple lineare Regression, bei der mehrere Pr\u00e4diktoren (unabh\u00e4ngige Variablen) verwendet werden, um die Zielvariable vorherzusagen. Der Workflow f\u00fcr eine multiple lineare Regression ist identisch, mit dem Unterschied, dass \\(x\\) jetzt eine Matrix mit mehreren Spalten darstellt.</p> <pre><code># Beispiel mit zwei unabh\u00e4ngigen Variablen (x1 und x2)\nx_multi = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]])\n\n# Modell f\u00fcr multiple lineare Regression erstellen\nmodel_multi = LinearRegression()\n\n# Modell trainieren\nmodel_multi.fit(x_multi, y)\n\n# Steigung und Achsenabschnitt ausgeben\nprint(f\"Steigung (m): {model_multi.coef_}\")\nprint(f\"Achsenabschnitt (b): {model_multi.intercept_}\")\n</code></pre>"},{"location":"content/unit_tests/unit_tests/","title":"Unit Tests","text":"<p>Code ist ein lebendiges Produkt. Das hei\u00dft, einmal geschrieben, bleibt eine Codebasis nie so wie sie ist.  Fehler m\u00fcssen korrigiert oder neue Features hinzugef\u00fcgt werden, die Anwendungsfreundlichkeit soll gesteigert werden oder die Laufzeit durch kl\u00fcgere Algorithmen verbessert werden. Es gibt viele Gr\u00fcnde, warum sich Code des selben Programms im Laufe der Zeit \u00e4ndert, aber wie stellt man sicher, dass bei \u00c4nderungen (gro\u00df oder klein) alles weiterhin funktioniert?</p> <p>Eine Antwort auf diese Frage sind Unittests. Diese werden von den Programmierern parallel (oder vor) dem  eigentlich Code geschrieben und werden Zuk\u00fcnftig immer ausgef\u00fchrt, wenn es eine \u00c4nderung im Code gibt. Diese Unittests \u00fcberpr\u00fcfen dann n\u00e4mlich, ob die einzelnen Bausteine meines Codes (die \"Units\"/Einheiten) immernoch funktionieren, oder ob irgendetwas durch die \u00c4nderungen gest\u00f6rt wurde.</p> <p>In einer Metapher gesprochen. Ein Restaurantbesitzer m\u00f6chte die K\u00fcche renovieren. Er l\u00e4sst von den K\u00f6chen eine lange Liste von Tests erstellen. Z.B. Es gibt Kochl\u00f6ffel; die Herdplatte platte wird hei\u00df, wenn man  daran dreht; der Eisschrank kann eine Temperatur von -17 \u00b0C halten usw. Alle diese Tests funktionieren bisher und das m\u00fcssen sie auch, wenn die neue K\u00fcche eingebaut ist. In der neuen K\u00fcche kommen noch neue Ger\u00e4te hinzu und auch f\u00fcr diese w\u00fcrde man weitere Tests der Liste hinzuf\u00fcgen, um alles f\u00fcr die Zukunft zu sichern.</p> Video <p> </p> <p>Betrachten wird das folgende Beispiel, in dem die Korrektheit der <code>quadrat</code> Funktion getestet wird. Wir sehen hier vier Tests, die pr\u00fcfen, ob </p> <ul> <li><code>quadrat(5) == 25</code>,</li> <li><code>quadrat(0) == 0</code>,</li> <li><code>quadrat(1) == 1</code> und</li> <li><code>quadrat(-5) == 25</code> gelten.</li> </ul> <pre><code>import unittest # (1)!\n\ndef quadrat(zahl): # (2)!\n    return zahl * zahl\n\n\nclass TestQuadrat(unittest.TestCase): # (3)!\n    def test_quadrat_0(self): # (4)!\n        self.assertEqual(quadrat(5), 25) # (5)!\n\n    def test_quadrat_1(self): # (6)!\n        self.assertEqual(quadrat(0), 0)\n\n    def test_quadrat_2(self):\n        self.assertEqual(quadrat(1), 1)\n\n    def test_quadrat_3(self):\n        self.assertEqual(quadrat(-5), 25)\n\nif __name__ == '__main__': # (7)!\n    unittest.main()\n</code></pre> <ol> <li>Wir importieren hier das Modul <code>unittest</code>. Das ist ein Ordner mit Pythoncode, den wir nun verwenden k\u00f6nnen. In diesem sind die Unittests implementiert und wir k\u00f6nnen diese jetzt in unserem Code definieren und ausf\u00fchren.</li> <li>Hier wird die Funktion definiert, die wir testen wollen.</li> <li>Hier wird eine Klasse namens <code>TestQuadrat</code> definiert, welche von <code>unittest.TestCase</code> erbt. Kurz gesagt bedeutet dass, dass wir im nun folgenden einger\u00fcckten Code Methoden definieren k\u00f6nnen, die unsere Unittests sind.</li> <li>Hier wird ein Unittest definiert. Das sieht so \u00e4hnlich aus, wie das Definieren einer Funktion. In die runden Klammern geh\u00f6rt immer der Parameter <code>self</code>, \u00fcber den wir die Art des Tests festlegen werden.Die genaue Bedeutung von <code>self</code> wird erst bei der objektorientierten Programmierung wichtig und kann jetzt erstmal von uns hingenommen werden.</li> <li>Mit <code>self.assertEqual( ... , ... )</code> wird gesagt, dass wir im Test sicherstellen (assert), dass zwei Werte gleich sind. Hier wollen wir wir sicherstellen, dass das Ergebnis von <code>quadrat(5)</code> gleich <code>25</code> ist. </li> <li>Wir definieren hier noch weitere Tests. Wichtig ist, dass deren Namen mit <code>test_</code> beginnen.</li> <li>In diesen zwei Zeilen sorgen wir daf\u00fcr, dass die Tests beim Ausf\u00fchren der Datei gefunden und ausgef\u00fchrt werden. Mehr m\u00fcssen wir hier zu diesem Zeitpunkt nicht verstehen.</li> </ol> <p>Wenn wir dieses Programm ausf\u00fchren erhalten wir die folgende Konsolenausgabe, die uns zeigt,  dass alle Tests erfolgreich waren:</p> <pre><code>Ran 4 tests in 0.012s\n\nOK\n\nProcess finished with exit code 0\n</code></pre> Fehlschlagende Tests <p>F\u00fchren Sie den Code aus dem letzten Beispiel in ihrer IDE aus und versichern Sie sich, dass alle Tests funktionieren.</p> <p>\u00c4ndern Sie dann den Code, indem Sie z.B. den Rumpf der Methode <code>quadrat</code> anpassen, sodass die Tests nicht mehr  funktionieren.</p> Preisberechnung aktualisieren <p>J\u00fcrgen nutzt den folgenden Code, um den Eintritt in seinen Eisenbahnpark zu berechnen:</p> <pre><code>def berechne_preis(alter, mitglied):\n    if mitglied:\n        return 0\n    if alter &lt; 4:\n        return 0\n    if alter &gt; 60:\n        return 0\n    return 2    \n</code></pre> <p>J\u00fcrgen hat auch Tests geschrieben, um sicherzustellen, dass Sein Code funktioniert:</p> <pre><code>import unittest  \n\nclass TestPreise(unittest.TestCase):\n    def test_berechne_preis_mitglied(self):\n        self.assertEqual(berechne_preis(20, True), 0)\n\n    def test_berechne_preis_kinder(self):\n        self.assertEqual(berechne_preis(2, False), 0)\n\n    def test_berechne_preis_retner(self):\n        self.assertEqual(berechne_preis(70, False), 0)\n\n    def test_berechne_preis_normal(self):\n        self.assertEqual(berechne_preis(20, False), 2)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>Alle seine Tests funktionieren.</p> <p>J\u00fcrgen hat nun kennengelernt, wie man Bedingungen mit <code>or</code>, <code>and</code> und <code>not</code> miteinander verkn\u00fcpft und  m\u00f6chte nun seine Funktion etwas schlanker neu Programmieren.</p> <p>Passe die Funktion von J\u00fcrgen an und achte dabei darauf, dass die Tests immernoch funktionieren!</p> Tipp <p>Der folgende Code</p> <pre><code>if bedingung1:\n    return x\nif bedingung2:\n    return x\n</code></pre> <p>kann so zusammengefasst werden:</p> <pre><code>if bedingung1 or bedingung2:\n    return x\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def berechne_preis(alter, mitglied):\n    if mitglied or alter &lt; 4 or alter &gt; 60:\n        return 0\n    return 2    \n</code></pre> Drei Gleich <p>Wir wollen eine Funktion entwickeln, pr\u00fcft, ob in einer Liste die Elemente an dre Positionen gleich sind. Der Methodenkopf sieht wie folgt aus:</p> <pre><code>def drei_gleich(liste, pos0, pos1, pos2):\n    return ...\n</code></pre> <p>Hier haben wir schon einige Tests vorbereitet:</p> <pre><code>import unittest  \n\nclass TestDreiGleich(unittest.TestCase):\n    def test_drei_gleich_0(self):\n        self.assertEqual(drei_gleich([1, 1, 1], 0, 1, 2), True)\n\n    def test_drei_gleich_1(self):\n        self.assertEqual(drei_gleich([1, 2, 1, 3, 1], 0, 2, 4), True)\n\n    def test_drei_gleich_2(self):\n        self.assertEqual(drei_gleich([1, 2, 1, 3, 1], 0, 1, 2), False)\n\n    def test_drei_gleich_3(self):\n        self.assertEqual(drei_gleich([1, 1, 2], 0, 1, 2), False)\n\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>Implementieren Sie die Funktion, sodass alle Tests gr\u00fcn werden.</p> Tipp <ul> <li>Mit der Notation <code>my_list[pos]</code> kann in einer Liste auf das Element an der Stelle <code>pos</code> zugegriffen werden.</li> <li>Mit <code>a == b</code> kann man \u00fcberpr\u00fcfen, ob zwei Elemente gleich sind.</li> <li>Mit <code>a == b == c</code> kann man pr\u00fcfen, ob drei Elemente gleich sind.</li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>def drei_gleich(liste, pos0, pos1, pos2):\n    return liste[pos0] == liste[pos1] == liste[pos2]\n</code></pre>"},{"location":"content/variables/datentypen/","title":"Datentypen","text":"Video <p>Die Daten, die in einer Variable gespeichert sind, haben einen Typ. In Python ist dies wichtig, um zu wissen, was man mit den Daten, eigentlich tun kann. Zahlen zum Beispiel kann man multiplizieren und addieren. Zeichenketten kann man  miteinander zu l\u00e4ngeren Zeichenketten verbinden (1).</p> <ol> <li>Der Fachbegriff f\u00fcr das Verkn\u00fcpfen zweier Zeichenketten zu einem gr\u00f6\u00dferen hei\u00dft \"konkatinieren\".</li> </ol> <p>In Python gibt es eine vielzahl an Datentypen, welche wir beispielsweise hier nachlesen k\u00f6nnen. Wir beschr\u00e4nken uns hier im Skript auf einige der wichtigsten:</p> Datentyp Englisch Deutsch Beispiele <code>int</code> Integer Ganzzahlen <code>0</code>, <code>1</code>, <code>-1</code>, <code>12353</code>, ... <code>float</code> Float Flie\u00dfkommazahlen <code>1.23</code>, <code>0.0001</code>, <code>1234.5</code>, <code>0.0</code>, ... <code>str</code> String Zeichenketten <code>'Hallo'</code>, <code>\"Menschen\"</code>, <code>'''mehrzeilige Strings'''</code>, ... <code>bool</code> Boolean Bin\u00e4re Wahrheitswerte <code>True</code>, <code>False</code> <code>None</code> None Nichts <code>None</code> <code>dict</code> Dictionary W\u00f6rterbuch <code>{'key': 'value'}</code> <p>Die Datentypen legen den Speicherplatz fest, den eine Variable belegt und bestimmen, welche Operationen auf den Variablen m\u00f6glich sind.</p> <p>Dynamische Typisierung</p> <p>Genauso wie in R ist python jedoch eine dynamisch typisierte Sprache. Das bedeutet, dass der Datentyp einer Variable nicht explizit angegeben werden muss, sondern automatisch ermittelt wird und auch nicht endg\u00fcltig festgelegt ist. Der Datentyp einer Variable kann sich also im Laufe des Programms \u00e4ndern.</p> <p>Noch ein paar Zusatzinformationen:</p> IntegerFloatStringBooleanNoneDictionary <p>In Python k\u00f6nnen ganzzahlen beliebig gro\u00df bzw. klein werden. Das ist sehr angenehm, da man mit ihnen also sicher addieren, subtrahieren, multiplizieren und ganz-zahl-dividieren (<code>%</code> bzw <code>//</code>) kann, ohne dass man sich verrechnet, weil man den Raum der Ganzen Zahlen verl\u00e4sst.</p> <p><code>int</code> und <code>float</code> kannst du immer daran unterscheiden, dass bei <code>float</code> ein <code>.</code> in der Darstellung der Zahl ist:</p> <pre><code>a = 1 # a speichert einen int\nb = 1.0 # b speichert einen float\n</code></pre> <p>Es gibt unendlich viele Zahlen mit Stellen nach dem Komma. Und schlimmer noch: zwischen zwei verschiedenen Kommazahlen gibt es immer eine die dazwischen liegt! Da wir au\u00dferdem noch f\u00fcr jede Kommazahl nur den gleichen endlichen Speicherplatz zur Verf\u00fcgung stellen, um sie zu speichern, egal wie gro\u00df sie ist (<code>1</code> zu speichern verbraucht genau so viel Speicher wie <code>1000000</code>), ist das Speichern von Kommazahlen ein echtes Problem.</p> <p>In Python erm\u00f6glicht der Datentyp <code>float</code> das Speichern von Kommazahlen, jedoch nicht perfekt:</p> <ul> <li>Nicht jede Kommazahl ist exakt darstelltbar.</li> <li>Es gibt (aus Sicht von Python) eine gr\u00f6\u00dfte und eine kleinste Flie\u00dfkommazahl</li> <li>Wenn zwei Kommazahlen addiert/multipliziert/... werden, kann es zu rechenfehlern kommen. </li> </ul> <p>Schau dir dieses Beispiel zum letzten Punkt an.</p> <p>Zeichenketten k\u00f6nnen sowohl mit doppelten, als auch mit einfachen Anf\u00fchrungsstrichen geschrieben werden.</p> <p>Der Datentyp Boolean hat genau diese zwei Auspr\u00e4gungen, denn er beschreibt den bin\u00e4ren Wahrheitsgehalt einer Aussage. Etwas stimmt, oder es stimmt nicht, da gibt es kein \"vielleicht\"!</p> <p><code>None</code> ist ein spezieller Datentyp, der nur einen Wert hat: <code>None</code>. Er wird oft verwendet, um zu signalisieren, dass eine Variable noch nicht initialisiert wurde.</p> <pre><code>Ein Dictionary ist eine Sammlung von Schl\u00fcssel-Wert-Paaren. Es ist eine Art W\u00f6rterbuch, in dem f\u00fcr jeden Schl\u00fcssel ein Wert hinterlegt ist. Au\u00dferhalb von Python wird ein Dictionary ofmals auch als JSON bezeichnet.\n</code></pre>"},{"location":"content/variables/nutzereingaben/","title":"Nutzereingaben","text":"Video <p>Mit der <code>print</code> Funktion k\u00f6nnen wir auf der Konsole eine Ausgabe erzeugen.</p> <p>Andererseits kann mit der Funktion <code>input</code> eine Eingabe des Nutzers auf der Konsole erwartet werden. Wenn die Funktion aufgerufen wird, wartet der Code so lange, bis eine Nutzereingabe get\u00e4tigt und mit Enter best\u00e4tigt wurde. Die Eingabe des Nutzers wird dann in einer Variablen gespeichert.</p> <pre><code>print('Sei gegr\u00fc\u00dft!')\nvorname = input('Wie hei\u00dft du?') # (1)!\nprint('Hallo') \nprint(vorname) # (2)!\n</code></pre> <ol> <li>Wenn <code>input</code> aufgerufen wird, sehen wir auf der Kommandozeile den Prompt <code>Wie hei\u00dft du</code>. Das Programm wartet jetzt auf unsere Eingabe. Unsere Eingabe wird dann in der Variablen <code>vorname</code> gespeichert.</li> <li>Hier wird die Eingabe wieder auf der Console ausgegeben.</li> </ol> Nutzereingabe erwarten <p>Ersetzten Sie die <code>...</code> im folgenden Code so, dass es einer Variable <code>vorname</code> der Name des Nutzers gespeichert wird. Danach soll in der Variable <code>alter</code> das Alter des Nutzers gespeichert werden.</p> <pre><code>... = ...('Wie hei\u00dft du?')\n... = ...('Wie alt bist du?')\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>vorname = input('Wie hei\u00dft du?')\nalter = input('Wie alt bist du?')\n</code></pre> Vorsicht beim Einlesen von Zahlen <p> </p> <p>Immer, wenn man Zahlen vom Nutzer einlesen will und mit diesem im Code rechnen m\u00f6chte, so muss man Python ganz explizit sagen, dass hier eine Zahl folgt. Verwenden sie daher folgenden Code:</p> <p>Bei Ganzzahlen nutze <code>int(input(...))</code>:</p> <pre><code>alter = int(input('Wie alt bist du?'))\nprint('In einem Jahr bist du:')\nprint(alter + 1)\n</code></pre> <p>Bei Flie\u00dfkommazahlen nutze <code>float(input(...))</code>:</p> <pre><code>preis = float(input('wie viel kostet das Produkt?))\nprint('Die Mehrwehrsteuer des Produktes betr\u00e4gt:')\nprint(preis * 0.18)\n</code></pre> <p>Note</p> <p>In R gibt es die Funktion <code>readline</code>, um Nutzereingaben zu lesen.</p> <pre><code># R\nalter &lt;- as.integer(readline('Wie alt bist du?'))\nprint(paste('In einem Jahr bist du:', alter + 1))\n</code></pre> Marsgewicht mit Eingabe <p>Bei diesem Programm wird das Gewicht auf dem Mars berechnet.</p> <pre><code>gewicht = 65\nmars_faktor = 0.38\nmars_gewicht = gewicht * mars_faktor\nprint(f'Dein Marsgewicht: {mars_gewicht}') # (1)!\n</code></pre> <ol> <li> <p>Wenn eine Zeichenkette mit <code>f</code> beginnt, so kann man in geschweiften Klammern <code>{...}</code> Variablen einf\u00fcgen. Dadurch werden die Inhalte der Variablen ausgelesen und eingef\u00fcgt. </p> <p>Diese sog. formatierten Strings sind sehr n\u00fctzlich und werden oft verwendet.</p> </li> </ol> <p>\u00c4ndern Sie das Programm, sodass der Nutzer sein eigenes Gewicht angeben kann.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>gewicht = int(input('Was wiegst du?')) # a\nmars_faktor = 0.37\nmars_gewicht = gewicht * mars_faktor\nprint(f'Dein Marsgewicht: {mars_gewicht}')\n</code></pre> BMI berechnen <p>Erstellen Sie das folgenden Programm, dass den BMI einer Person berechnet.</p> <p>Der Nutzer soll seine K\u00f6rpergr\u00f6\u00dfe in Metern angeben (z.B. <code>1.80</code>) und sein Gewicht in kg (z.B. <code>90</code>)</p> <p>Der BMI wird mit folgenden Formel berechnet:</p> \\[ \\text{BMI} = \\frac{\\text{Gewicht in kg}}{(\\text{K\u00f6rpergr\u00f6\u00dfe in m})^2} \\] <p>Geben Sie anschlie\u00dfend den BMI in einer Nachricht aus. (In diesem Beispiel \\(\\approx 27.78\\))</p> Tipp <p>Eine Zahl zu Quadrieren hei\u00dft, sie mit sich selbst zu multiplizieren. Das hei\u00dft du kannst auch folgende Formel verwenden:</p> \\[ \\text{BMI} = \\frac{\\text{Gewicht in kg}}{(\\text{K\u00f6rpergr\u00f6\u00dfe in m}) \\cdot (\\text{K\u00f6rpergr\u00f6\u00dfe in m)}} \\] <p>Um zwei Zahlen in Python miteinander zu dividieren nutzen Sie <code>/</code>. Z.B. <code>a = 7 / 8</code>.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>gewicht = float(input('Wie viel wiegst du in kg?'))\ngr\u00f6\u00dfe = float(input('Wie viel wiegst du in Metern?'))\n\nbmi = gewicht / (gr\u00f6\u00dfe * gr\u00f6\u00dfe)\n\nprint(f\"Dein BMI ist {bmi}\")\n</code></pre>"},{"location":"content/variables/variablen/","title":"Variablen","text":"Einf\u00fchrung in Variablen <p>In Python k\u00f6nnen wir Informationen in Variablen speichern.</p> <p>Man kann sich so eine Variable vorstellen, wie einen beschrifteten Schuhkarton in einem Schrank.  In so einen Schuhkarton kann man zu einem beliebigen Zeitpunkt:</p> <ul> <li>etwas hineintun; </li> <li>anschauen, was drin ist;</li> <li>durch etwas anderes austauschen.</li> </ul> <p>Genauso ist es auch bei Variablen.</p> <p>Schauen wir uns dazu den folgenden Code an:</p> <pre><code>a = 1 # (1)!\nprint(a) # (4)!\n\na = 2 # (2)!\nprint(a) # (5)!\n\na = a + 3 # (3)!\nprint(a) # (6)!\n</code></pre> <ol> <li>In der neuen Variablen <code>a</code> ist initial der Wert <code>1</code> gespeichert.</li> <li>In der Variablen <code>a</code> ist nun der Wert <code>2</code> gespeichert. Die <code>1</code> wird vergessen.</li> <li>Der Wert von <code>a</code> wird zun\u00e4chst ausgelesen und dann 3 dazuaddiert. Das Ergebnis (<code>5</code>) wird dann wieder in <code>a</code> gespeichert.</li> <li>Der Wert der Variablen <code>a</code> wird ausgelesen und in mit der <code>print</code>-Funktion auf der Konsole ausgegeben.</li> <li>Der Wert der Variablen <code>a</code> wird ausgelesen und in mit der <code>print</code>-Funktion auf der Konsole ausgegeben.</li> <li>Der Wert der Variablen <code>a</code> wird ausgelesen und in mit der <code>print</code>-Funktion auf der Konsole ausgegeben.</li> </ol> <p>Wir k\u00f6nnen uns das obige Beispiel nun noch einmal im Debugger ansehen:</p> <p>Code im Debugger</p> <p> </p> <p>'\"Das Gleichheitszeichen <code>=</code> bedeutet nicht \"ist gleich\" sondern \"ist nun\"!</p> <p>Das Gleichheitszeichen <code>=</code> in Python ist der sogenannte Zuordnungsoperator. Er dient dazu, Inhalte in einer Variablen zuzuordnen. Auf der linken Seite des <code>=</code> steht immer die Variable, in die wir etwas speichern wollen und auf der  rechten Seite, was wir in der Variablen speichern wollen.</p> <p>Am besten man lie\u00dft man Zeilen wie <code>a = 2</code> als: \"<code>a</code> hat nun den Wert <code>2</code>.\"</p> <p>Es ist nicht der Gleichheitsoperator, wie wir in aus der Mathematik kennen.</p> <p> </p>"},{"location":"content/variables/variablen/#vergleich-zu-r","title":"Vergleich zu R","text":"<p>In R gibt es ebenfalls Variablen. In R k\u00f6nnen wir diese entweder mit dem <code>&lt;-</code>-Operator oder dem <code>=</code>-Operator erstellen.</p> <pre><code>a &lt;- 1\nprint(a)\n</code></pre> Variablen anlegen <p>Ersetzten Sie die <code>...</code> im folgenden Code so, dass es eine Variable <code>vorname</code> mit dem Wert <code>'Hans'</code> und eine Variable <code>alter</code> mit dem Wert <code>32</code> gibt.</p> <pre><code>... = 'Hans'\n... = 32\n</code></pre> L\u00f6sung <pre><code>vorname = 'Hans'\nalter = 32\n</code></pre> <p>Auch folgende Notation ist m\u00f6glich:</p> <pre><code>vorname, alter = 'Hans', 32\n</code></pre> Variablenbef\u00fcllung voraussagen <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <pre><code>a = 3\nb = 5\n\nprint(a)\nprint(b)\nprint(a+b)\n</code></pre> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>a = 3\nb = 5\n\nprint(a) # 3\nprint(b) # 5\nprint(a+b) # 8\n</code></pre> Variablenbef\u00fcllung voraussagen mit Falle <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <pre><code>preis = 3\nprint(preis)\n\npreis = preis + 4\nprint(preis)\n\nprint(preis + 5)\n\nprint(preis)\n</code></pre> Tipp <p>Der Inhalt einer Variablen wird nur dann neu bef\u00fcllt, wenn auch der Zuordnungsoperator <code>=</code> aufgerufen wird.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>preis = 3\nprint(preis) # 3\n\npreis = preis + 4\nprint(preis) # 7\n\nprint(preis + 5) # 12\n\nprint(preis) # 7\n</code></pre> Variablenbef\u00fcllung voraussagen mit vielen Fallen <p>Sagen Sie voraus, was auf der Konsole ausgegeben wird, wenn das Programm ausgef\u00fchrt wird.</p> <pre><code>a = 3\nb = 2\nc = a + b\nb = a\na = a - b * c\n\nprint(a)\nprint(b)\nprint(c)\n</code></pre> Tipp <ul> <li>Erstellen Sie eine Tabelle, in der Sie f\u00fcr jede Zeile sagen, welchen Wert jede Variable nach dieser Zeile hat:</li> </ul> Code a b c <code>a = 3</code> <code>b = 2</code> <code>c = a+b</code> <code>b = a</code> <code>a = a - b * c</code> <ul> <li> <p><code>b = a</code> bedeutet, dass <code>b</code> nun den Wert von <code>a</code> hat.</p> </li> <li> <p><code>*</code> beschreibt das Multiplizieren.</p> </li> <li> <p>Denken Sie an die Punkt- vor Strichrechnung.</p> </li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> Code a b c <code>a = 3</code> <code>3</code> <code>b = 2</code> <code>3</code> <code>2</code> <code>c = a+b</code> <code>3</code> <code>2</code> <code>5</code> <code>b = a</code> <code>3</code> <code>3</code> <code>5</code> <code>a = a - b * c</code> <code>-12</code> <code>3</code> <code>5</code> <p>Auf der Console erscheint: <pre><code>-12\n3\n5\n</code></pre></p> Variablenbenennung <p>In Python darf ein Variablenname nur aus Buchstaben, Ziffern und Unterstrichen bestehen. Und Sie darf nicht mit einer Ziffer beginnen.</p> <p>Welche der folgenden sind erlaubte Variablennamen?</p> <ul> <li><code>name_1</code></li> <li><code>1name</code></li> <li><code>name!</code></li> <li><code>_alter</code></li> <li><code>Alter</code></li> <li><code>\u20acin$</code></li> <li><code>euro_in_dollar</code></li> <li><code>z</code></li> <li><code>_</code></li> <li><code>__init__</code></li> </ul> L\u00f6sung L\u00f6sungsvideo <p> </p> <ul> <li><code>name_1</code> \u2705</li> <li><code>1name</code> \u274c</li> <li><code>name!</code> \u274c</li> <li><code>_alter</code> \u2705</li> <li><code>Alter</code> \u2705</li> <li><code>\u20acin$</code> \u274c</li> <li><code>euro_in_dollar</code> \u2705</li> <li><code>z</code> \u2705</li> <li><code>_</code> \u2705</li> <li><code>__init__</code> \u2705</li> </ul> Variableninhalte tauschen <p>Ersetzen Sie die <code>...</code> im folgendne Code so, dass <code>preis_a</code> und <code>preis_b</code> den Inhalt tauschen.</p> <pre><code>preis_a = 10\npreis_b = 5\n\n...\n...\n...\n\nprint(preis_a) # 5\nprint(preis_b) # 10\n</code></pre> Tipp <p>Nutzen Sie eine Variable <code>z</code> als Zwischenspeicher.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>preis_a = 10\npreis_b = 5\n\nz = preis_b\npreis_b = preis_a\npreis_a = z\n\nprint(preis_a) # 5\nprint(preis_b) # 10\n</code></pre> Marsgewicht <p>Erstellen Sie das folgenden Programm:</p> <ul> <li>In der Variablen <code>gewicht</code> steht ein Gewicht (z.B. \\(65\\) kg)</li> <li>In einer zweiten Variablen <code>mars_faktor</code> steht die Zahl <code>0.38</code>.</li> <li>In einer dritten Variablen <code>mars_gewicht</code> soll das Gewicht auf dem Markt gespeichert werden. Dies wird berechnet, indem <code>gewicht</code> und <code>mars_faktor</code> miteinander multipliziert werden.  </li> <li>Auf der Konsole soll nun das <code>mars_gewicht</code> ausgegeben werden. (In diesem Beispiel \\(24.7\\))</li> </ul> <p>Hier ist Schwerkraftrechner mit dem Sie ihr Programm \u00fcberpr\u00fcfen k\u00f6nnen.</p> <p>\ud83d\ude80Bonus: Erweitern Sie Ihr Programm gerne um weitere Planeten.</p> Tipp <p>Kommazahlen wie \\(0,38\\) werden in Python mit einem Punkt, statt einem Komma geschrieben, also <code>0.38</code></p> <p>Um zwei Zahlen in Python miteinander zu multiplizieren nutzen sie <code>*</code>. Z.B. <code>a = 7 * 8</code>.</p> L\u00f6sung L\u00f6sungsvideo <p> </p> <pre><code>gewicht = 65\nmars_faktor = 0.38\nmars_gewicht = gewicht * mars_faktor\n</code></pre>"},{"location":"content/visualization/matplotlib/","title":"Matplotlib","text":"<p>Die\u00a0Matplotlib\u00a0ist eine umfangreichste Bibliothek, mit deren Hilfe verschiedene Diagrammtypen wie Linien-, Stab- oder Kuchendiagramme, Histogramme, Boxplots, Kontourdiagramme, aber auch dreidimensionale Diagramme und Funktionenplots auf einfache Weise erstellt werden k\u00f6nnen.</p> <p>Als erstes muss das Modul importiert werden: <pre><code>import matplotlib.pyplot as plt\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#liniendiagramm","title":"Liniendiagramm","text":"<p>Als Einf\u00fchrungsbeispiel werden wir lernen wie man Liniendiagramme erstellt. Mit der Methode <code>plot()</code> kann man 2D-Grafiken erstellen. Dazu muss man als Parameter eine Liste oder Array mit Werten f\u00fcr die x -und y-Achse \u00fcbergeben. Mit der Methode <code>show()</code> wird die Grafik sichtbar.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Use the plot method  \nplt.plot(x, y)  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Man kann auch einen Titel zu der Grafik hinzuf\u00fcgen: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Use the plot method  \nplt.plot(x, y)  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Auch die Beschriftung der beiden Achsen ist m\u00f6glich: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Use the plot method  \nplt.plot(x, y)  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Man kann die Schrittl\u00e4nge der x -und y-Werte auf den Achsen \u00e4ndern.  Dazu verwendet man die Methode <code>xticks</code>  und <code>yticks</code>.</p> <p>Zum Beispiel sollen nur Ganzzahlen abgebildet werden: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Use the plot method  \nplt.plot(x, y)  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Es ist m\u00f6glich eine Legende f\u00fcr eine bessere \u00dcbersicht hinzuzuf\u00fcgen. Als erstes muss man dem jeweiligen Plot durch den Parameter <code>label</code> eine Beschriftung geben. Ich nenne den Plot einfach <code>2x</code>. Dann erst kann man die Methode <code>legend()</code> verwendet um eine Legende zu erstellen.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Use the plot method  \nplt.plot(x, y, label=\"2x\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Das Aussehen der Linie, wie zum Beispiel Farbe, Dicke, Linienart, l\u00e4sst sich beliebig anpassen. Dazu verwendet man in der <code>plot()</code> Methode unterschiedliche Parameter.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Use the plot method  \nplt.plot(x, y, label=\"2x\", color=\"red\", linewidth=2, marker=\".\", markersize=10, markeredgecolor=\"blue\", linestyle=\"--\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Jedoch wird es h\u00e4ufig schnell un\u00fcbersichtlich wenn man viele Parameter verwendet. Man kann eine sogenannte \"shorthand notation\" verwenden, welche es uns erlaubt schnell Anpassungen vorzunehmen ohne die Angabe von vielen Parametern. Die \"shorthand notation\" sieht folgenderma\u00dfen aus:  <code>fmt=\"[color][marker][line]\"</code></p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Shorthand notation  \nfmt = \"r.--\"  \n# Use the plot method  \nplt.plot(x, y, fmt, label=\"2x\",  linewidth=2,  markersize=10, markeredgecolor=\"blue\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Man kann in dem Koordinatensystem selbst Texte platzieren. Dazu verwendet man die Methode <code>text()</code>. Dieser Methode muss man on der folgenden Reihenfolge Parameter \u00fcbergeben: - xcoord - ycoord - \"Your Text\"</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Shorthand notation  \nfmt = \"r.--\"  \n# Use the plot method  \nplt.plot(x, y, fmt, label=\"2x\",  linewidth=2,  markersize=10, markeredgecolor=\"blue\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Add Text  \nplt.text(1, 6, \"Die Funktion ist steigend\")  \n# Display the plot  \nplt.show()\n</code></pre></p> <p>Manchmal m\u00f6chte man das gesamte Aussehen \u00e4ndern ohne selbstst\u00e4ndig jedes Einzelne Element anzupassen. Dazu gibt es sogenannte \"style sheets\", sie werden durch <code>plt.style.use('style sheet')</code> gesetzt. In den Runden Klammern wird dann der Name des jeweiligen \"style sheet\" gesetzt, die Namen findet man in der Dokumentation.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n# Define the point which have to be connected  \nx = [1, 2, 3]  \ny = [2, 4, 6]  \n# Styling  \nplt.style.use('seaborn-v0_8-dark')  \n# print(plt.style.available)  # With this you can check valid style names  \n# Set the title  \nplt.title(\"Liniendiagramm\")  \n# Set the title of the axis  \nplt.xlabel(\"x-Werte\")  \nplt.ylabel(\"y-Werte\")  \n# Shorthand notation  \nfmt = \"r.--\"  \n# Use the plot method  \nplt.plot(x, y, fmt, label=\"2x\",  linewidth=2,  markersize=10, markeredgecolor=\"blue\")  \n# Change the scale of values on the axis  \nplt.xticks([0, 1, 2, 3])  # step is set to one unit  \nplt.yticks([0, 2, 4, 6, 8, 10])  # step is set to two units  \n# Add a legend  \nplt.legend()  \n# Add Text  \nplt.text(1, 6, \"Die Funktion ist steigend\")  \n# Display the plot  \nplt.show()\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#funktionen-plotten","title":"Funktionen plotten","text":"<p>Die Idee besteht darin, anhand einer Wertetabelle die Funktionen zu plotten. Bei Funktionen in der Ebene ben\u00f6tigt man die x -und y-Werte. die x-Werte kann man sich beliebig heraussuchen und die y-Werte werden durch die Funktionsgleichung berechnet. Am Ende m\u00fcssen die Werte in separaten Listen vorliegen.</p> <p>Am Anfang arbeiten wir mit Listen was jedoch sehr unpraktisch ist. Sp\u00e4ter werden wir das Modul <code>numpy</code> kennen lernen, welche uns optimalere nummerische Berechnungen erm\u00f6glichen wird. Dabei wird man einen neuen Datentyp kennen lernen welchen man anstelle der Listen verwendet.</p>"},{"location":"content/visualization/matplotlib/#normalparabel","title":"Normalparabel","text":"<pre><code>import matplotlib.pyplot as plt  \n\n# Define x-values  \nx = []  \nfor index in range(-10, 11):  \n    x.append(index)  \n\n# Define y-values  \ny = []  \nfor index in x:  \n    y.append(index ** 2)  \n\n# Plot function  \nplt.plot(x, y)  \n\nplt.show()\n</code></pre>"},{"location":"content/visualization/matplotlib/#allgemeine-parabel","title":"Allgemeine Parabel","text":"<pre><code>import matplotlib.pyplot as plt  \n# Parameters y=a*x^2 + b*x + c  \na = 0.5  \nb = 3  \nc = -2  \n# Define x-values  \nx = []  \nfor index in range(-20, 22):  \n    x.append(index)  \n\n# Define y-values  \ny = []  \nfor index in x:  \n    y.append(a * (index ** 2) + (b * index) + c)  \n\n# Plot function  \nplt.plot(x, y)  \n\nplt.show()\n</code></pre>"},{"location":"content/visualization/matplotlib/#groenanpassung","title":"Gr\u00f6\u00dfenanpassung","text":"<p>Es ist m\u00f6glich die Ma\u00dfe des Bilder anzupassen. Dazu ben\u00f6tigt man die Methode <code>figure()</code>. Innerhalb dieser Methode wird ein Parameter \u00fcbergeben, womit die Breite und H\u00f6he des Fensters angegeben wird in zoll.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n\n# Define x-values  \nx = []  \nfor index in range(-10, 11):  \n    x.append(index)  \n\n# Define y-values  \ny = []  \nfor index in x:  \n    y.append(index ** 2)  \n# Resize the window  \nplt.figure(figsize=(5,3), dpi=300)  # 5x3 inch (5*300=1500px and 3*300=900px)  \n\n# Plot function  \nplt.plot(x, y)  \n\nplt.show()\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#plot-speichern","title":"Plot Speichern","text":"<p>Mit der Methode <code>savefig()</code> kann man seinen Plot exportieren.</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt  \n\n# Define x-values  \nx = []  \nfor index in range(-10, 11):  \n    x.append(index)  \n\n# Define y-values  \ny = []  \nfor index in x:  \n    y.append(index ** 2)  \n# Resize the window  \nplt.figure(figsize=(5,3), dpi=300)  # 5x3 inch (5*300=1500px and 3*300=900px)  \n\n# Plot function  \nplt.plot(x, y)  \n# Export the plot  \nplt.savefig(\"Quadratische_Funktion.png\", dpi=300)  \nplt.show()\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#grundprinzip","title":"Grundprinzip","text":"<p>Bisher wurden alle Plots einfach in das gerade aktive Plot Fenster gemalt. F\u00fcr etwas kompliziertere Plots sollte man sich etwas mehr M\u00fche geben. Au\u00dferdem sollte man sich ein allgemeines Vorgehen zur Anfertigung von Plots aneignen, an welches man sich h\u00e4lt. Ansonsten verliert man schnell die \u00dcbersicht weil es sehr viele Wege gibt, die zum Ziel f\u00fchren.</p> <p>Die Diagramme in <code>matplotlib</code> befinden sich in einem <code>Figure</code> Objekt. Mit <code>plt.figure()</code> l\u00e4sst sich so ein <code>Figure</code> Objekt erzeugen. </p> <p>Innerhalb des \"Figure\" befindet sich noch die sogenannte \"Axes\". Dies ist das, was man sich unter einem Plot vorstellt, es ist der Bereich des Bildes mit den Daten.  Wenn man ein <code>Axes</code> Objekt erstellt, kann man damit dann alle Details des Plots steuern (z.B. Titel, Plot-Typ...).</p> <p>\"Axis\" ist die Achse des Diagramms, die mit Achsentitel versehen wird, einen bestimmten Intervall hat und so weiter. Dabei k\u00f6nnen entweder 2 Achsen oder auch 3 enthalten sein.</p> <p>![[axes_axis.png]]</p>"},{"location":"content/visualization/matplotlib/#figure-und-axes-objekte","title":"Figure und Axes Objekte","text":""},{"location":"content/visualization/matplotlib/#figure","title":"Figure","text":"<p>Die Methode <code>plt.figure()</code> erzeugt ein <code>Figure</code> Objekt <pre><code>fig = plt.figure()\n</code></pre> Durch die <code>figure()</code> Methode lassen sich viele Einstellungen vornehmen. Man kann wichtige Parameter wie <code>dpi</code>, <code>figsize</code>, <code>linewidth</code> und so weiter nutzen, um das Erscheinungsbild zu ver\u00e4ndern.</p>"},{"location":"content/visualization/matplotlib/#axes","title":"Axes","text":"<p>Ein \"Figure\" kann mehrere \"Axes\" beinhalten, jedoch kann ein \"Axes\" nur zu einem \"Figure\" geh\u00f6ren. Mit der Methode <code>axes()</code> kann man ein <code>Axes</code> Objekt erstellen: <pre><code>ax = plt.axes()\n</code></pre></p> <p>Diese \"Axes\" geh\u00f6rt dann dem oben zuvor definierten \"Figure\". Als Parameter steht normalerweise ein Tupel:  <code>axes((0.2, 0.2, 0.9, 0.9))</code> Die Bedeutung des Tupels ist folgenderma\u00dfen zu verstehen: - Erste Zahl:   Abstand von der linken Seite des Figure (20%) - Zweite Zahl:   Abstand von der unteren Seite des Figure (20%) - Dritte Zahl:   Breite des \"Axes\" von links nach rechts (90%) - Vierte Zahl:   H\u00f6he des \"Axes\" von unten nach oben (90%)</p> <p>Beispiel: <pre><code>import matplotlib.pyplot as plt\nfig1 = plt.figure()\nax1 = plt.axes((0.2, 0.2, 0.9, 0.9))\nax2 = plt.axes((1.2, 0.2, 0.9, 0.9))\nax3 = plt.axes((0.2, -0.8, 1.9, 0.9))\n</code></pre></p>"},{"location":"content/visualization/matplotlib/#die-plot-methode","title":"Die plot() - Methode","text":"<p>Mithilfe der <code>plot()</code> kann man \"Plots\" im Axes-Bereich erstellen. Dazu muss man die Methode auf einen <code>Axes</code> Objekt anwenden.</p> <p>Beispiel:</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np \n\n# Create a figure\nfig1 = plt.figure()\n# Create axes objects\nax1 = plt.axes((0.2, 0.2, 0.9, 0.9))\nax2 = plt.axes((1.2, 0.2, 0.9, 0.9))\nax3 = plt.axes((0.2, -0.8, 1.9, 0.9))\n\n# Create values for plot\nX = np.linspace(-np.pi, np.pi, 25) \nY1 = np.cos(X) \nY2 = np.sin(X)\nY3 = X ** 2\nY4 = 2 * X + 1\nY5 = X ** 3 - 1\n\n# Plot in specific axes\np1 = ax1.plot(X, Y1)\np2 = ax2.plot(X, Y2)\np3 = ax3.plot(X, Y3)\n\n\n# Create one more figure\nfig2 = plt.figure()\n# Create axes objects\nax4 = plt.axes((0.2, 0.2, 0.5, 0.5))\nax5 = plt.axes((1.2, 0.2, 0.5, 0.5))\n\n# Plot in specific axes\np4 = ax4.plot(X, Y4)\np5 = ax5.plot(X, Y5)\n\n# Zum speichern der beiden Figure Objekte\nfig1.savefig(\"plt1.png\", bbox_inches='tight')\nfig2.savefig(\"plt2.png\", bbox_inches='tight')\n</code></pre>"},{"location":"content/visualization/matplotlib/#axis","title":"Axis","text":"<p>Mithilfe von <code>ax.axis()</code> kann man die Koordinatenachsen eines <code>Axes</code> Objekt steuern. Dabei muss es immer unter den jeweiligen Axes-Objekt stehen. Als Parameter muss man eine Liste \u00fcbergeben welche wie folgt aussieht: <code>[x_min, x_max, y_min, y_max]</code></p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np \n# Create a figure\nfig1 = plt.figure()\n\n# Create axes objects\nax1 = plt.axes((0.2, 0.2, 0.9, 0.9))\nax2 = plt.axes((1.2, 0.2, 0.9, 0.9))\nax3 = plt.axes((0.2, -0.8, 1.9, 0.9))\n\n# Set axis ticks\nax1.axis([-2, 2, 0, 1])\nax2.axis([-2, 2, -1, 1])\nax3.axis([-5, 5, 0, 5])\n\n\n# Create values for plot\nX = np.linspace(-np.pi, np.pi, 25) \nY1 = np.cos(X) \nY2 = np.sin(X)\nY3 = X ** 2\n\n# Plot in specific axes\np1 = ax1.plot(X, Y1)\np2 = ax2.plot(X, Y2)\np3 = ax3.plot(X, Y3)\n\n\nfig1.savefig(\"plt1.png\", bbox_inches='tight')\n</code></pre> <p>Man kann sowohl Titel und Achsenbeschriftungen setzen indem man auf das jeweilige <code>Axes</code> Objekt zugreift:</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np \n# Create a figure\nfig1 = plt.figure()\n\n# Create axes objects\nax1 = plt.axes((0.2, 0.2, 0.9, 0.9))\nax2 = plt.axes((1.2, 0.2, 0.9, 0.9))\nax3 = plt.axes((0.2, -0.8, 1.9, 0.9))\n\n# Set axis ticks\nax1.axis([-2, 2, 0, 1])\nax2.axis([-2, 2, -1, 1])\nax3.axis([-5, 5, 0, 5])\n\n# Set title\nax1.set_title(\"Axes1\")\nax2.set_title(\"Axes2\")\nax3.set_title(\"Axes3\")\n\n# Set axis labels\nax1.set_xlabel(\"x-Werte\")\nax2.set_xlabel(\"x-Werte\")\nax3.set_xlabel(\"x-Werte\")\nax1.set_ylabel(\"y-Werte\")\nax2.set_ylabel(\"y-Werte\")\nax3.set_ylabel(\"y-Werte\")\n\n# Create values for plot\nX = np.linspace(-np.pi, np.pi, 25) \nY1 = np.cos(X) \nY2 = np.sin(X)\nY3 = X ** 2\n\n# Plot in specific axes\np1 = ax1.plot(X, Y1)\np2 = ax2.plot(X, Y2)\np3 = ax3.plot(X, Y3)\n\n\nfig1.savefig(\"plt1.png\", bbox_inches='tight')\n</code></pre> <p>Jetzt muss man jedoch die Abst\u00e4nde anpassen damit der y-Achsen Titel genug Platz hat. Dazu korrigiert man <code>ax3 = plt.axes((0.2, -0.8, 1.9, 0.8))</code>:</p>"},{"location":"content/visualization/matplotlib/#zusammenfassung","title":"Zusammenfassung","text":"<ul> <li>Vermeide die Nutzung von <code>plt.plot()</code>, <code>plt.title()</code>, <code>plt.xlabel()</code> und so weiter,  ansonsten wei\u00df man sp\u00e4ter nicht worauf sich die Zeile bezogen hatte</li> <li>Verstehe die Terminologie, was ist ein Figure, Axes und Axis</li> <li>Lerne nicht alle Parameter auswendig, siehe in der Dokumentation nach</li> </ul>"},{"location":"content/visualization/plotly/","title":"Plotly","text":"<p>Neben Matplotlib und SeaBorn ist Plotly die dritte gro\u00dfe Bibliothek f\u00fcr die Visualisierung von Daten in Python. Plotly ist eine interaktive Bibliothek, die es erm\u00f6glicht, Diagramme zu erstellen, die interaktiv sind. </p> <p>Zwar ist Plotly weniger performant als Matplotlib, bietet daf\u00fcr jedoch optisch ansprechendere Diagramme und interaktive Charts.</p> <p>Beispiel:</p> <pre><code>import plotly.express as px\nimport pandas as pd\n\n# Create a DataFrame\ndata = {\n    \"Name\": [\"John\", \"Anna\", \"Peter\", \"Linda\"],\n    \"Age\": [23, 34, 45, 56],\n    \"City\": [\"New York\", \"Berlin\", \"London\", \"Paris\"]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a scatter plot\nfig = px.scatter(df, x=\"Name\", y=\"Age\", color=\"City\")\n\n# Show the plot\nfig.show()\n</code></pre> <p>Plotly hat auch die M\u00f6glichkeit, fortgeschrittene Diagramme wie Karten oder auch 3D-Diagramme zu erstellen.</p> <p>Beispiel:</p> <pre><code>import plotly.express as px\nimport pandas as pd\n\n# Create a DataFrame\ndata = {\n    \"Name\": [\"John\", \"Anna\", \"Peter\", \"Linda\"],\n    \"Age\": [23, 34, 45, 56],\n    \"City\": [\"New York\", \"Berlin\", \"London\", \"Paris\"]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a 3D scatter plot\nfig = px.scatter_3d(df, x=\"Name\", y=\"Age\", z=\"City\", color=\"City\")\n\n# Show the plot\nfig.show()\n</code></pre>"},{"location":"content/visualization/seaborn/","title":"Seaborn","text":"<p>Seaborn ist eine Python-Bibliothek, die auf Matplotlib basiert und die Erstellung von ansprechenden und informativen Diagrammen erleichtert. Seaborn bietet eine Vielzahl von Diagrammtypen und Stilen, die es erm\u00f6glichen, Daten auf einfache Weise zu visualisieren.</p> <p>Die Grafiken von Seaborn \u00e4hneln denen von ggplot2, einer beliebten Visualisierungsbibliothek in R.</p> <p>Ein Plot in Seaborn basiert in der Regel auf einem DataFrame, das die Daten enth\u00e4lt, die visualisiert werden sollen. Die Daten werden dann in einem Plot dargestellt, der auf den Daten basiert.</p> <p>Beispiel:</p> <pre><code>import seaborn as sns\nimport pandas as pd\n\n# Create a DataFrame\ndata = {\n    \"Name\": [\"John\", \"Anna\", \"Peter\", \"Linda\"],\n    \"Age\": [23, 34, 45, 56],\n    \"City\": [\"New York\", \"Berlin\", \"London\", \"Paris\"]\n}\n\ndf = pd.DataFrame(data)\n\n# Create a scatter plot\nsns.scatterplot(data=df, x=\"Name\", y=\"Age\", hue=\"City\")\n\n# Show the plot\nplt.show()\n</code></pre> <p>In diesem Beispiel haben wir ein Streudiagramm erstellt, das die Namen und das Alter der Personen aus dem DataFrame <code>df</code> anzeigt. Die Punktfarben werden basierend auf der Stadt der Person eingef\u00e4rbt.</p> <p>Seaborn bietet eine Vielzahl von Diagrammtypen und Stilen, die es erm\u00f6glichen, Daten auf einfache und ansprechende Weise zu visualisieren. Es ist eine leistungsstarke Bibliothek f\u00fcr die Datenvisualisierung in Python.</p> <p>Au\u00dferdem gibt es in Seaborn n\u00fctzlich Funktionen, um sich einen ersten \u00dcberblick zu den Daten zu verschaffen. Zum Beispiel k\u00f6nnen wir in Seaborn die Funktion <code>pairplot()</code> verwenden, um Beziehungen zwischen den numerischen Spalten eines DataFrames zu visualisieren.</p> <p>Beispiel:</p> <pre><code>import seaborn as sns\nimport pandas as pd\n\n# Load a dataset\ndf = sns.load_dataset(\"iris\")\n\n# Create a pairplot\nsns.pairplot(df)\n\n# Show the plot\nplt.show()\n</code></pre> <p>In diesem Beispiel haben wir ein Paardiagramm erstellt, das Beziehungen zwischen den numerischen Spalten des Iris-Datensatzes visualisiert. Dies kann n\u00fctzlich sein, um Muster und Beziehungen zwischen den Variablen zu erkennen.</p>"},{"location":"content/visualization/streamlit/","title":"Streamlit","text":"<p>Wenn Sie kleine interaktive Dashboards erstellen m\u00f6chten, kann Streamlit eine gut Wahl sein. Stramlit ist eine Open-Source-Bibliothek, die es erm\u00f6glicht, Webanwendungen mit Python zu erstellen. Streamlit ist einfach zu bedienen und erfordert nur wenige Zeilen Code, um eine Webanwendung zu erstellen.</p> <p>Beispiel</p> <pre><code>import streamlit as st\nimport pandas as pd\nimport numpy as np\n\n# Create a simple dataframe\ndata = pd.DataFrame(\n    np.random.randn(50, 3),\n    columns=['a', 'b', 'c']\n)\n\n# Display the dataframe\nst.write(data)\n\n# Create a line chart\nst.line_chart(data)\n</code></pre> <p>Einen \u00dcberblick zu den Funktionen von Streamlit finden Sie hier.</p>"},{"location":"content/visualization/visualization/","title":"Visualisierungen in Python","text":"<p>Im gegensatz zu R, wo ggplot2 die Standardbibliothek f\u00fcr die Visualisierung von Daten ist, gibt es in Python mehrere Bibliotheken, die f\u00fcr die Visualisierung von Daten verwendet werden k\u00f6nnen. Die drei bekanntesten Bibliotheken sind Matplotlib, Seaborn und Plotly.</p> <p>Welche der Bibliotheken Sie verwenden ist mehr oder weniger eine Frage des Geschmacks. Matplotlib ist die Standardbibliothek f\u00fcr die Visualisierung von Daten in Python und bietet eine Vielzahl von Diagrammtypen und Stilen. Seaborn ist eine auf Matplotlib basierende Bibliothek, die die Erstellung von ansprechenden und informativen Diagrammen erleichtert. Plotly ist eine interaktive Bibliothek, die es erm\u00f6glicht, Diagramme zu erstellen, die interaktiv sind.</p> <p>Dar\u00fcber hinaus k\u00f6nnen wir in Python mit Dash und Streamlit ganze Dashboards erstellen. Diese sind \u00e4hnlich zu Shiny in R und erm\u00f6glichen es, interaktive Webanwendungen mit Python zu erstellen.</p>"}]}